{
  "address": "0x33a546C01b64953a016999c026A09408419cFe03",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLargerThanSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Disabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JudgementNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManualBudgetIncreaseRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabler",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointlessOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDoesntEndWithNewToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96[]",
          "name": "increase",
          "type": "uint96[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "BudgetIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "extension",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "DeadlineExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "MetadataEditted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applicationIds",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "_preapprove",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newMetadata",
          "type": "string"
        }
      ],
      "name": "editMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_extension",
          "type": "uint64"
        }
      ],
      "name": "extendDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getExecutingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getManagingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_increase",
          "type": "uint96[]"
        }
      ],
      "name": "increaseBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submissionId",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_applicationId",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "open",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successful",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "453b0e65771c6c1185ae780419830357",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLargerThanSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Disabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JudgementNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManualBudgetIncreaseRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointlessOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDoesntEndWithNewToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"increase\",\"type\":\"uint96[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BudgetIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"extension\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"DeadlineExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"MetadataEditted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applicationIds\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"_preapprove\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newMetadata\",\"type\":\"string\"}],\"name\":\"editMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_extension\",\"type\":\"uint64\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getExecutingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getManagingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_increase\",\"type\":\"uint96[]\"}],\"name\":\"increaseBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submissionId\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_applicationId\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successful\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applicationIds\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"params\":{\"_execute\":\"If the request should also be executed in this transaction.\",\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_manager\":\"Who will manage the task (become the manager).\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"editMetadata(uint256,string)\":{\"details\":\"This metadata update might change the task completely. Show a warning to people who applied before the change.\",\"params\":{\"_newMetadata\":\"New metadata of the task.\",\"_taskId\":\"Id of the task.\"}},\"executeRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"extendDeadline(uint256,uint64)\":{\"params\":{\"_extension\":\"How much to extend the deadline by.\",\"_taskId\":\"Id of the task.\"}},\"getExecutingTasks(address,uint256,uint256)\":{\"params\":{\"_executor\":\"The executor to fetch tasks of.\",\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getManagingTasks(address,uint256,uint256)\":{\"params\":{\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_manager\":\"The manager to fetch tasks of.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"increaseBudget(uint256,uint96[])\":{\"params\":{\"_increase\":\"How much to increase each tokens amount by.\",\"_taskId\":\"Id of the task.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submissionId\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_applicationId\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"notice\":\"Create a new task.\"},\"editMetadata(uint256,string)\":{\"notice\":\"Edit the metadata of a task.\"},\"executeRequest(uint256,uint8,uint8)\":{\"notice\":\"Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\"},\"extendDeadline(uint256,uint64)\":{\"notice\":\"Extend the deadline of a task.\"},\"getExecutingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of an executor. Most recent ones first.\"},\"getManagingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of a manager. Most recent ones first.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"increaseBudget(uint256,uint96[])\":{\"notice\":\"Increase the budget of the task.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"taskStatistics()\":{\"notice\":\"Retrieves the current statistics of created tasks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Tasks/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\\r\\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\\r\\n    function __Escrow_init() external {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\\r\\n    /// @param token The ERC20 contract address.\\r\\n    /// @param to The address to recieve the tokens.\\r\\n    /// @param amount The amount of ERC20 token to receive.\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda8a86697fa323530b53c13fca2e710de26595816ba7fb802d38dec2782f70e1\",\"license\":\"MIT\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Escrow} from \\\"./Escrow.sol\\\";\\r\\n\\r\\n/*\\r\\n  Some of the functionality in this contract will be removed in the next version.\\r\\n  This functionality will be provided by off-chain indexing instead.\\r\\n  Therefore this functionality might be implemented in a more dirty way to make it easier to remove.\\r\\n  This is true for:\\r\\n  - taskStatistics\\r\\n  - getManagingTasks\\r\\n  - getExecutingTasks\\r\\n  - manager and executor/applicant in all events (except first introduction)\\r\\n\\r\\n  Seperation of manager and creator is also a recent change. The frontend will currently use creator == manager.\\r\\n  Hence there is also no getCreatedTasks.\\r\\n*/\\r\\ninterface ITasks {\\r\\n    error InvalidTimestamp();\\r\\n    error InvalidAddress();\\r\\n    error PointlessOperation();\\r\\n    error ArrayLargerThanSupported();\\r\\n\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotManager();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget();\\r\\n    error RewardDoesntEndWithNewToken();\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n    error JudgementNone();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n    error RequestNotAccepted();\\r\\n    error RequestAlreadyExecuted();\\r\\n\\r\\n    error ManualBudgetIncreaseRequired();\\r\\n\\r\\n    event TaskCreated(\\r\\n        uint256 indexed taskId,\\r\\n        string metadata,\\r\\n        uint64 deadline,\\r\\n        ERC20Transfer[] budget,\\r\\n        address creator,\\r\\n        address manager\\r\\n    );\\r\\n    event ApplicationCreated(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        string metadata,\\r\\n        Reward[] reward,\\r\\n        address manager,\\r\\n        address applicant\\r\\n    );\\r\\n    event ApplicationAccepted(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        address manager,\\r\\n        address applicant\\r\\n    );\\r\\n    event TaskTaken(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event SubmissionCreated(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 submissionId,\\r\\n        string metadata,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event SubmissionReviewed(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 submissionId,\\r\\n        SubmissionJudgement judgement,\\r\\n        string feedback,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event TaskCompleted(\\r\\n        uint256 indexed taskId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n\\r\\n    event CancelTaskRequested(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 requestId,\\r\\n        string explanation,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event TaskCancelled(\\r\\n        uint256 indexed taskId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event RequestAccepted(\\r\\n        uint256 indexed taskId,\\r\\n        RequestType requestType,\\r\\n        uint8 requestId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event RequestExecuted(\\r\\n        uint256 indexed taskId,\\r\\n        RequestType requestType,\\r\\n        uint8 requestId,\\r\\n        address by,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n\\r\\n    event DeadlineExtended(\\r\\n        uint256 indexed taskId,\\r\\n        uint64 extension,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event BudgetIncreased(\\r\\n        uint256 indexed taskId,\\r\\n        uint96[] increase,\\r\\n        address manager\\r\\n    );\\r\\n    event MetadataEditted(\\r\\n        uint256 indexed taskId,\\r\\n        string newMetadata,\\r\\n        address manager\\r\\n    );\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @notice nextToken should always be true for the last entry\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to;\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param metadata Metadata of the application. (IPFS hash)\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the manager.\\r\\n    /// @param reward How much rewards the applicant wants for completion.\\r\\n    struct Application {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice For approving people on task creation (they are not required to make an application)\\r\\n    struct PreapprovedApplication {\\r\\n        address applicant;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement {\\r\\n        None,\\r\\n        Accepted,\\r\\n        Rejected\\r\\n    }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    /// @param feedback A response from the manager. (IPFS hash)\\r\\n    struct Submission {\\r\\n        string metadata;\\r\\n        string feedback;\\r\\n        SubmissionJudgement judgement;\\r\\n    }\\r\\n\\r\\n    enum RequestType {\\r\\n        CancelTask\\r\\n    }\\r\\n\\r\\n    /// @notice A container for shared request information.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct Request {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param request Request information.\\r\\n    /// @param explanation Why the task should be cancelled.\\r\\n    struct CancelTaskRequest {\\r\\n        Request request;\\r\\n        string explanation;\\r\\n    }\\r\\n\\r\\n    enum TaskState {\\r\\n        Open,\\r\\n        Taken,\\r\\n        Closed\\r\\n    }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param manager Who has created the task.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    /// @dev Storage blocks seperated by newlines.\\r\\n    struct Task {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        Escrow escrow;\\r\\n        address creator;\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        uint16 executorApplication;\\r\\n        address creator;\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        Escrow escrow;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n\\r\\n    /// @notice Retrieves the current statistics of created tasks.\\r\\n    function taskStatistics()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 openTasks,\\r\\n            uint256 takenTasks,\\r\\n            uint256 successfulTasks\\r\\n        );\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n\\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Retrieves all tasks of a manager. Most recent ones first.\\r\\n    /// @param _manager The manager to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getManagingTasks(\\r\\n        address _manager,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\\r\\n    /// @param _executor The executor to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param _manager Who will manage the task (become the manager).\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId);\\r\\n\\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId);\\r\\n\\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationIds Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationId Index of application you made that has been accepted.\\r\\n    function takeTask(uint256 _taskId, uint16 _applicationId) external;\\r\\n\\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n\\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submissionId Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    /// @param _execute If the request should also be executed in this transaction.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Extend the deadline of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _extension How much to extend the deadline by.\\r\\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\\r\\n\\r\\n    /// @notice Increase the budget of the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _increase How much to increase each tokens amount by.\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Edit the metadata of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New metadata of the task.\\r\\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x66cd1478e0c5175697007aa0eb43fc286948009db3c219ce25139aa4b1f7cf26\",\"license\":\"MIT\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, IERC20, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {TasksEnsure} from \\\"./TasksEnsure.sol\\\";\\r\\nimport {TasksUtils} from \\\"./TasksUtils.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract Tasks is Context, TasksEnsure, TasksUtils {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice Various statistics about total tasks.\\r\\n    uint256 private openTasks;\\r\\n    uint256 private takenTasks;\\r\\n    uint256 private successfulTasks;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address private immutable escrowImplementation;\\r\\n\\r\\n    /// @notice This address has the power to disable the contract, in case an exploit is discovered.\\r\\n    address private disabler;\\r\\n    error Disabled();\\r\\n    error NotDisabled();\\r\\n    error NotDisabler();\\r\\n\\r\\n    constructor() {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n        disabler = _msgSender();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskStatistics()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 open, uint256 taken, uint256 successful)\\r\\n    {\\r\\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        offchainTask = _toOffchainTask(task);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](\\r\\n            _taskIds.length\\r\\n        );\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getManagingTasks(\\r\\n        address _manager,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 managerTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\\r\\n            if (tasks[i].manager == _manager) {\\r\\n                taskIndexes[managerTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++managerTasksCount;\\r\\n                }\\r\\n                if (managerTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly {\\r\\n            mstore(\\r\\n                taskIndexes,\\r\\n                sub(mload(taskIndexes), sub(totalTasks, managerTasksCount))\\r\\n            )\\r\\n        }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 executorTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\\r\\n            if (\\r\\n                tasks[i].state != TaskState.Open &&\\r\\n                tasks[i].applications[tasks[i].executorApplication].applicant ==\\r\\n                _executor\\r\\n            ) {\\r\\n                taskIndexes[executorTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++executorTasksCount;\\r\\n                }\\r\\n                if (executorTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly {\\r\\n            mstore(\\r\\n                taskIndexes,\\r\\n                sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))\\r\\n            )\\r\\n        }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId) {\\r\\n        _ensureValidTimestamp(_deadline);\\r\\n        _ensureValidAddress(_manager);\\r\\n        if (_budget.length >= type(uint8).max) {\\r\\n            revert ArrayLargerThanSupported();\\r\\n        }\\r\\n        if (_preapprove.length >= type(uint16).max) {\\r\\n            revert ArrayLargerThanSupported();\\r\\n        }\\r\\n\\r\\n        _ensureNotDisabled();\\r\\n        taskId = taskCounter++;\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.metadata = _metadata;\\r\\n        task.deadline = _deadline;\\r\\n        task.budgetCount = uint8(_budget.length);\\r\\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\\r\\n        escrow.__Escrow_init();\\r\\n        task.escrow = escrow;\\r\\n        for (uint8 i; i < uint8(_budget.length); ) {\\r\\n            _budget[i].tokenContract.transferFrom(\\r\\n                _msgSender(),\\r\\n                address(escrow),\\r\\n                _budget[i].amount\\r\\n            );\\r\\n\\r\\n            // use balanceOf in case there is a fee asoosiated with the transfer\\r\\n            task.budget[i] = ERC20Transfer(\\r\\n                _budget[i].tokenContract,\\r\\n                uint96(_budget[i].tokenContract.balanceOf(address(escrow)))\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.manager = _manager;\\r\\n        task.creator = _msgSender();\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n        unchecked {\\r\\n            // Impossible to overflow due to openTasks <= taskCounter\\r\\n            ++openTasks;\\r\\n        }\\r\\n\\r\\n        emit TaskCreated(\\r\\n            taskId,\\r\\n            _metadata,\\r\\n            _deadline,\\r\\n            _budget,\\r\\n            _msgSender(),\\r\\n            _manager\\r\\n        );\\r\\n\\r\\n        // Gas optimization\\r\\n        if (_preapprove.length > 0) {\\r\\n            task.applicationCount = uint16(_preapprove.length);\\r\\n            for (uint16 i; i < uint16(_preapprove.length); ) {\\r\\n                Application storage application = task.applications[i];\\r\\n                application.applicant = _preapprove[i].applicant;\\r\\n                application.accepted = true;\\r\\n                _ensureRewardEndsWithNextToken(_preapprove[i].reward);\\r\\n                _setRewardBellowBudget(\\r\\n                    task,\\r\\n                    application,\\r\\n                    _preapprove[i].reward\\r\\n                );\\r\\n\\r\\n                emit ApplicationCreated(\\r\\n                    taskId,\\r\\n                    i,\\r\\n                    \\\"\\\",\\r\\n                    _preapprove[i].reward,\\r\\n                    _manager,\\r\\n                    _preapprove[i].applicant\\r\\n                );\\r\\n\\r\\n                emit ApplicationAccepted(\\r\\n                    taskId,\\r\\n                    i,\\r\\n                    _manager,\\r\\n                    _preapprove[i].applicant\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        if (_reward.length >= type(uint8).max) {\\r\\n            revert ArrayLargerThanSupported();\\r\\n        }\\r\\n\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureRewardEndsWithNextToken(_reward);\\r\\n\\r\\n        Application storage application = task.applications[\\r\\n            task.applicationCount\\r\\n        ];\\r\\n        application.metadata = _metadata;\\r\\n        application.applicant = _msgSender();\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            application.reward[i] = _reward[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        applicationId = task.applicationCount++;\\r\\n\\r\\n        emit ApplicationCreated(\\r\\n            _taskId,\\r\\n            applicationId,\\r\\n            _metadata,\\r\\n            _reward,\\r\\n            task.manager,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        for (uint i; i < _applicationIds.length; ) {\\r\\n            _ensureApplicationExists(task, _applicationIds[i]);\\r\\n\\r\\n            Application storage application = task.applications[\\r\\n                _applicationIds[i]\\r\\n            ];\\r\\n            application.accepted = true;\\r\\n            _increaseBudgetToReward(\\r\\n                task,\\r\\n                application.rewardCount,\\r\\n                application.reward\\r\\n            );\\r\\n            emit ApplicationAccepted(\\r\\n                _taskId,\\r\\n                _applicationIds[i],\\r\\n                _msgSender(),\\r\\n                application.applicant\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(uint256 _taskId, uint16 _applicationId) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureApplicationExists(task, _applicationId);\\r\\n\\r\\n        Application storage application = task.applications[_applicationId];\\r\\n        _ensureSenderIsApplicant(application);\\r\\n        _ensureApplicationIsAccepted(application);\\r\\n\\r\\n        task.executorApplication = _applicationId;\\r\\n\\r\\n        unchecked {\\r\\n            --openTasks;\\r\\n            ++takenTasks;\\r\\n        }\\r\\n        task.state = TaskState.Taken;\\r\\n\\r\\n        emit TaskTaken(_taskId, _applicationId, task.manager, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        Submission storage submission = task.submissions[task.submissionCount];\\r\\n        submission.metadata = _metadata;\\r\\n        submissionId = task.submissionCount++;\\r\\n\\r\\n        emit SubmissionCreated(\\r\\n            _taskId,\\r\\n            submissionId,\\r\\n            _metadata,\\r\\n            task.manager,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n        _ensureSubmissionExists(task, _submissionId);\\r\\n\\r\\n        Submission storage submission = task.submissions[_submissionId];\\r\\n        _ensureSubmissionNotJudged(submission);\\r\\n        _ensureJudgementNotNone(_judgement);\\r\\n        submission.judgement = _judgement;\\r\\n        submission.feedback = _feedback;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++successfulTasks;\\r\\n            }\\r\\n            _payoutTask(task);\\r\\n\\r\\n            emit TaskCompleted(\\r\\n                _taskId,\\r\\n                _msgSender(),\\r\\n                task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(\\r\\n            _taskId,\\r\\n            _submissionId,\\r\\n            _judgement,\\r\\n            _feedback,\\r\\n            _msgSender(),\\r\\n            task.applications[task.executorApplication].applicant\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        if (\\r\\n            task.state == TaskState.Open ||\\r\\n            task.deadline <= uint64(block.timestamp)\\r\\n        ) {\\r\\n            // Task is open or deadline past\\r\\n            if (task.state == TaskState.Open) {\\r\\n                unchecked {\\r\\n                    --openTasks;\\r\\n                }\\r\\n            } else {\\r\\n                // if (task.state == TaskState.Taken) {\\r\\n                unchecked {\\r\\n                    --takenTasks;\\r\\n                }\\r\\n            }\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(\\r\\n                _taskId,\\r\\n                _msgSender(),\\r\\n                task.state == TaskState.Open\\r\\n                    ? address(0)\\r\\n                    : task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        } else {\\r\\n            // Task is taken and deadline has not past\\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[\\r\\n                task.cancelTaskRequestCount\\r\\n            ];\\r\\n            request.explanation = _explanation;\\r\\n            cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n\\r\\n            emit CancelTaskRequested(\\r\\n                _taskId,\\r\\n                cancelTaskRequestId,\\r\\n                _explanation,\\r\\n                _msgSender(),\\r\\n                task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n\\r\\n            CancelTaskRequest storage cancelTaskRequest = task\\r\\n                .cancelTaskRequests[_requestId];\\r\\n            _ensureRequestNotAccepted(cancelTaskRequest.request);\\r\\n\\r\\n            if (_execute) {\\r\\n                // use executeRequest in the body instead? (more gas due to all the checks, but less code duplication)\\r\\n                unchecked {\\r\\n                    --takenTasks;\\r\\n                }\\r\\n                _refundCreator(task);\\r\\n\\r\\n                emit TaskCancelled(_taskId, task.manager, _msgSender());\\r\\n                cancelTaskRequest.request.executed = true;\\r\\n            }\\r\\n\\r\\n            cancelTaskRequest.request.accepted = true;\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(\\r\\n            _taskId,\\r\\n            _requestType,\\r\\n            _requestId,\\r\\n            task.manager,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n\\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n\\r\\n            CancelTaskRequest storage cancelTaskRequest = task\\r\\n                .cancelTaskRequests[_requestId];\\r\\n            _ensureRequestAccepted(cancelTaskRequest.request);\\r\\n            _ensureRequestNotExecuted(cancelTaskRequest.request);\\r\\n\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n            }\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(\\r\\n                _taskId,\\r\\n                task.manager,\\r\\n                task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n            cancelTaskRequest.request.executed = true;\\r\\n        }\\r\\n\\r\\n        emit RequestExecuted(\\r\\n            _taskId,\\r\\n            _requestType,\\r\\n            _requestId,\\r\\n            _msgSender(),\\r\\n            task.manager,\\r\\n            task.applications[task.executorApplication].applicant\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function extendDeadline(uint256 _taskId, uint64 _extension) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        if (_extension == 0) {\\r\\n            revert PointlessOperation();\\r\\n        }\\r\\n        task.deadline += _extension;\\r\\n\\r\\n        emit DeadlineExtended(\\r\\n            _taskId,\\r\\n            _extension,\\r\\n            _msgSender(),\\r\\n            task.state == TaskState.Open\\r\\n                ? address(0)\\r\\n                : task.applications[task.executorApplication].applicant\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        for (uint8 i; i < uint8(_increase.length); ) {\\r\\n            ERC20Transfer storage transfer = task.budget[i];\\r\\n            transfer.tokenContract.transferFrom(\\r\\n                _msgSender(),\\r\\n                address(task.escrow),\\r\\n                _increase[i]\\r\\n            );\\r\\n\\r\\n            // Use balanceOf as there could be a fee in transferFrom\\r\\n            transfer.amount = uint96(\\r\\n                transfer.tokenContract.balanceOf(address(task.escrow))\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit BudgetIncreased(_taskId, _increase, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        if (Strings.equal(task.metadata, _newMetadata)) {\\r\\n            revert PointlessOperation();\\r\\n        }\\r\\n        task.metadata = _newMetadata;\\r\\n        emit MetadataEditted(_taskId, _newMetadata, _msgSender());\\r\\n    }\\r\\n\\r\\n    function disable() external {\\r\\n        _ensureDisabler();\\r\\n        disabler = address(0);\\r\\n    }\\r\\n\\r\\n    // Ideally you are able to transfer it to the new contract, but that requires addition to the escrow contract\\r\\n    // I prefer this, so the escrow contract keeps being basic (both for security and clone costs)\\r\\n    function refund(uint256 _taskId) external {\\r\\n        _ensureDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskNotClosed(task);\\r\\n        // oficially should update taskOpen / Taken here, but as the contract will cease operations, no point\\r\\n        _refundCreator(task);\\r\\n    }\\r\\n\\r\\n    function _getTask(\\r\\n        uint256 _taskId\\r\\n    ) internal view returns (Task storage task) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        task = tasks[_taskId];\\r\\n    }\\r\\n\\r\\n    function _ensureNotDisabled() internal view {\\r\\n        if (disabler == address(0)) {\\r\\n            revert Disabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabled() internal view {\\r\\n        if (disabler != address(0)) {\\r\\n            revert NotDisabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabler() internal view {\\r\\n        if (_msgSender() != disabler) {\\r\\n            revert NotDisabler();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xacf4205393a65374b41e239d66a25dd7f20ea0c6ba8eead530f2c6288e392ef5\",\"license\":\"MIT\"},\"contracts/Tasks/TasksEnsure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n  Functions to ensure a certain precondition is met.\\r\\n*/\\r\\nabstract contract TasksEnsure is ITasks, Context {\\r\\n    function _ensureValidTimestamp(uint64 timestamp) internal pure {\\r\\n        if (timestamp == 0) {\\r\\n            revert InvalidTimestamp();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureValidAddress(address addr) internal pure {\\r\\n        if (addr == address(0)) {\\r\\n            revert InvalidAddress();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskIsOpen(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskIsTaken(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskNotClosed(Task storage task) internal view {\\r\\n        if (task.state == TaskState.Closed) {\\r\\n            revert TaskClosed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsManager(Task storage task) internal view {\\r\\n        if (task.manager != _msgSender()) {\\r\\n            revert NotManager();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev Should only be called is the task is not open!\\r\\n    function _ensureSenderIsExecutor(Task storage task) internal view {\\r\\n        if (\\r\\n            task.applications[task.executorApplication].applicant !=\\r\\n            _msgSender()\\r\\n        ) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRewardEndsWithNextToken(\\r\\n        Reward[] memory reward\\r\\n    ) internal pure {\\r\\n        unchecked {\\r\\n            if (reward.length != 0 && !reward[reward.length - 1].nextToken) {\\r\\n                revert RewardDoesntEndWithNewToken();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationExists(\\r\\n        Task storage task,\\r\\n        uint16 _applicationId\\r\\n    ) internal view {\\r\\n        if (_applicationId >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsApplicant(\\r\\n        Application storage application\\r\\n    ) internal view {\\r\\n        if (application.applicant != _msgSender()) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationIsAccepted(\\r\\n        Application storage application\\r\\n    ) internal view {\\r\\n        if (!application.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionExists(\\r\\n        Task storage task,\\r\\n        uint8 _submissionId\\r\\n    ) internal view {\\r\\n        if (_submissionId >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionNotJudged(\\r\\n        Submission storage submission\\r\\n    ) internal view {\\r\\n        if (submission.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureJudgementNotNone(\\r\\n        SubmissionJudgement judgement\\r\\n    ) internal pure {\\r\\n        if (judgement == SubmissionJudgement.None) {\\r\\n            revert JudgementNone();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureCancelTaskRequestExists(\\r\\n        Task storage task,\\r\\n        uint8 _requestId\\r\\n    ) internal view {\\r\\n        if (_requestId >= task.cancelTaskRequestCount) {\\r\\n            revert RequestDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotAccepted(Request storage request) internal view {\\r\\n        if (request.accepted) {\\r\\n            revert RequestAlreadyAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestAccepted(Request storage request) internal view {\\r\\n        if (!request.accepted) {\\r\\n            revert RequestNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotExecuted(Request storage request) internal view {\\r\\n        if (request.executed) {\\r\\n            revert RequestAlreadyExecuted();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x17bb6eb693cc697e561c9f080fdc80ff4fc9db126c99a6da2e8fa9f7c375de39\",\"license\":\"MIT\"},\"contracts/Tasks/TasksUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n  Higher level functions to allow the Tasks file to be more readable.\\r\\n*/\\r\\nabstract contract TasksUtils is ITasks, Context {\\r\\n    function _toOffchainTask(\\r\\n        Task storage task\\r\\n    ) internal view returns (OffChainTask memory offchainTask) {\\r\\n        offchainTask.metadata = task.metadata;\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.creator = task.creator;\\r\\n        offchainTask.manager = task.manager;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.applications = new OffChainApplication[](\\r\\n            task.applicationCount\\r\\n        );\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].metadata = application.metadata;\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n            offchainTask.applications[i].reward = new Reward[](\\r\\n                application.rewardCount\\r\\n            );\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](\\r\\n            task.cancelTaskRequestCount\\r\\n        );\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _increaseBudgetToReward(\\r\\n        Task storage task,\\r\\n        uint8 _length,\\r\\n        mapping(uint8 => Reward) storage _reward\\r\\n    ) internal {\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 needed;\\r\\n        for (uint8 i; i < _length; ) {\\r\\n            unchecked {\\r\\n                needed += _reward[i].amount;\\r\\n            }\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                if (needed > erc20Transfer.amount) {\\r\\n                    // Existing budget in escrow doesnt cover the needed reward\\r\\n                    erc20Transfer.tokenContract.transferFrom(\\r\\n                        _msgSender(),\\r\\n                        address(task.escrow),\\r\\n                        needed - erc20Transfer.amount\\r\\n                    );\\r\\n\\r\\n                    if (\\r\\n                        erc20Transfer.tokenContract.balanceOf(\\r\\n                            address(task.escrow)\\r\\n                        ) < needed\\r\\n                    ) {\\r\\n                        // transferFrom returns less funds than send, use increaseBudget to increase balance to wanted reward.\\r\\n                        revert ManualBudgetIncreaseRequired();\\r\\n                    }\\r\\n\\r\\n                    // (2^88-1) * 2^8 = 2^96-2^8, needed cannot be more than 2^96-1, so fits in uint96\\r\\n                    task.budget[j].amount = uint96(needed);\\r\\n                }\\r\\n\\r\\n                needed = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setRewardBellowBudget(\\r\\n        Task storage task,\\r\\n        Application storage application,\\r\\n        Reward[] calldata _reward\\r\\n    ) internal {\\r\\n        if (_reward.length >= type(uint8).max) {\\r\\n            revert ArrayLargerThanSupported();\\r\\n        }\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 alreadyReserved;\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\\r\\n            unchecked {\\r\\n                alreadyReserved += _reward[i].amount;\\r\\n            }\\r\\n            if (alreadyReserved > erc20Transfer.amount) {\\r\\n                revert RewardAboveBudget();\\r\\n            }\\r\\n\\r\\n            application.reward[i] = _reward[i];\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                alreadyReserved = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _payoutTask(Task storage task) internal {\\r\\n        Application storage executor = task.applications[\\r\\n            task.executorApplication\\r\\n        ];\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n\\r\\n        uint8 j;\\r\\n        uint8 rewardCount = executor.rewardCount;\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            while (j < rewardCount) {\\r\\n                Reward memory reward = executor.reward[j];\\r\\n                escrow.transfer(\\r\\n                    erc20Transfer.tokenContract,\\r\\n                    reward.to,\\r\\n                    reward.amount\\r\\n                );\\r\\n                unchecked {\\r\\n                    erc20Transfer.amount -= reward.amount;\\r\\n                    ++j;\\r\\n                }\\r\\n\\r\\n                if (reward.nextToken) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Gas optimization\\r\\n            if (erc20Transfer.amount != 0) {\\r\\n                escrow.transfer(\\r\\n                    erc20Transfer.tokenContract,\\r\\n                    creator,\\r\\n                    erc20Transfer.amount\\r\\n                );\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n\\r\\n    function _refundCreator(Task storage task) internal {\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            escrow.transfer(\\r\\n                erc20Transfer.tokenContract,\\r\\n                creator,\\r\\n                erc20Transfer.amount\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa3e70915b1fd8e7c4da75377f05e13f530be15797f7ff150ba9a5b0c45fe384f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applicationIds": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "params": {
          "_execute": "If the request should also be executed in this transaction.",
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_manager": "Who will manage the task (become the manager).",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "editMetadata(uint256,string)": {
        "details": "This metadata update might change the task completely. Show a warning to people who applied before the change.",
        "params": {
          "_newMetadata": "New metadata of the task.",
          "_taskId": "Id of the task."
        }
      },
      "executeRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "extendDeadline(uint256,uint64)": {
        "params": {
          "_extension": "How much to extend the deadline by.",
          "_taskId": "Id of the task."
        }
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "params": {
          "_executor": "The executor to fetch tasks of.",
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getManagingTasks(address,uint256,uint256)": {
        "params": {
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_manager": "The manager to fetch tasks of.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "increaseBudget(uint256,uint96[])": {
        "params": {
          "_increase": "How much to increase each tokens amount by.",
          "_taskId": "Id of the task."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submissionId": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_applicationId": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "notice": "Create a new task."
      },
      "editMetadata(uint256,string)": {
        "notice": "Edit the metadata of a task."
      },
      "executeRequest(uint256,uint8,uint8)": {
        "notice": "Exectued an accepted request, allows anyone to pay for the gas costs of the execution."
      },
      "extendDeadline(uint256,uint64)": {
        "notice": "Extend the deadline of a task."
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of an executor. Most recent ones first."
      },
      "getManagingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of a manager. Most recent ones first."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "increaseBudget(uint256,uint96[])": {
        "notice": "Increase the budget of the task."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "taskStatistics()": {
        "notice": "Retrieves the current statistics of created tasks."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26299,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26302,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "openTasks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 26304,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "takenTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26306,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "successfulTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26312,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Task)26043_storage)"
      },
      {
        "astId": 26318,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "disabler",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)25708": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)19781": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)25973": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)25998": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)25951_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)25951_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)26043_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)26043_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)25994_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)25994_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)25930_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)25930_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)25937_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)25937_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)25981_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)25981_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)25951_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 25939,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25941,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25943,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 25945,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25950,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)25937_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(CancelTaskRequest)25994_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 25991,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "request",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Request)25988_storage"
          },
          {
            "astId": 25993,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC20Transfer)25930_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 25927,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)19781"
          },
          {
            "astId": 25929,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)25988_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Request",
        "members": [
          {
            "astId": 25985,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25987,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)25937_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 25932,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25934,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25936,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)25981_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 25975,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25977,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "feedback",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 25980,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(SubmissionJudgement)25973"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Task)26043_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 26000,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 26002,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 26005,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 8,
            "slot": "1",
            "type": "t_contract(Escrow)25708"
          },
          {
            "astId": 26007,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 26009,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "manager",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 26012,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(TaskState)25998"
          },
          {
            "astId": 26014,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 21,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 26016,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 23,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 26018,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 24,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 26020,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 26,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 26022,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 27,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 26027,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)25930_storage)"
          },
          {
            "astId": 26032,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint16,t_struct(Application)25951_storage)"
          },
          {
            "astId": 26037,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint8,t_struct(Submission)25981_storage)"
          },
          {
            "astId": 26042,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)25994_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}