{
  "address": "0x39E5e231D0A8e4e5b7Db9682E4d7B4dd4359D8b1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Disabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JudgementNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabler",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDoesntEndWithNewToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96[]",
          "name": "increase",
          "type": "uint96[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "BudgetIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "extension",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "DeadlineExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "MetadataEditted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applicationIds",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "_preapprove",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newMetadata",
          "type": "string"
        }
      ],
      "name": "editMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_extension",
          "type": "uint64"
        }
      ],
      "name": "extendDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getExecutingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getManagingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_increase",
          "type": "uint96[]"
        }
      ],
      "name": "increaseBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submissionId",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_applicationId",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "open",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successful",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5910d17fcec318205e8db92c99398ebff3cdbe29e84bed56f82c0831e3bc2924",
  "receipt": {
    "to": null,
    "from": "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "contractAddress": "0x39E5e231D0A8e4e5b7Db9682E4d7B4dd4359D8b1",
    "transactionIndex": 1,
    "gasUsed": "4886946",
    "logsBloom": "0x
    "blockHash": "0xef824213098c761005c38b934fcc98ebb5deeaeabbd5a4d58e2204f686cd0200",
    "transactionHash": "0x5910d17fcec318205e8db92c99398ebff3cdbe29e84bed56f82c0831e3bc2924",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 38850465,
        "transactionHash": "0x5910d17fcec318205e8db92c99398ebff3cdbe29e84bed56f82c0831e3bc2924",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001a0afa2c8cbe0000000000000000000000000000000000000000000000000013f6c03eb93f86c50000000000000000000000000000000000000000000000053fe2ca22778754e300000000000000000000000000000000000000000000000013dcb5448cb2c8c50000000000000000000000000000000000000000000000053ffcd51ca41412e3",
        "logIndex": 2,
        "blockHash": "0xef824213098c761005c38b934fcc98ebb5deeaeabbd5a4d58e2204f686cd0200"
      }
    ],
    "blockNumber": 38850465,
    "cumulativeGasUsed": "4949669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc02535d8a4cf061950d36b2670f7887",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Disabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JudgementNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDoesntEndWithNewToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"increase\",\"type\":\"uint96[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BudgetIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"extension\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"DeadlineExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"MetadataEditted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applicationIds\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"_preapprove\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newMetadata\",\"type\":\"string\"}],\"name\":\"editMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_extension\",\"type\":\"uint64\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getExecutingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getManagingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_increase\",\"type\":\"uint96[]\"}],\"name\":\"increaseBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submissionId\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_applicationId\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successful\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applicationIds\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"params\":{\"_execute\":\"If the request should also be executed in this transaction.\",\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_manager\":\"Who will manage the task (become the manager).\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"editMetadata(uint256,string)\":{\"details\":\"This metadata update might change the task completely. Show a warning to people who applied before the change.\",\"params\":{\"_newMetadata\":\"New metadata of the task.\",\"_taskId\":\"Id of the task.\"}},\"executeRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"extendDeadline(uint256,uint64)\":{\"params\":{\"_extension\":\"How much to extend the deadline by.\",\"_taskId\":\"Id of the task.\"}},\"getExecutingTasks(address,uint256,uint256)\":{\"params\":{\"_executor\":\"The executor to fetch tasks of.\",\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getManagingTasks(address,uint256,uint256)\":{\"params\":{\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_manager\":\"The manager to fetch tasks of.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"increaseBudget(uint256,uint96[])\":{\"params\":{\"_increase\":\"How much to increase each tokens amount by.\",\"_taskId\":\"Id of the task.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submissionId\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_applicationId\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"notice\":\"Create a new task.\"},\"editMetadata(uint256,string)\":{\"notice\":\"Edit the metadata of a task.\"},\"executeRequest(uint256,uint8,uint8)\":{\"notice\":\"Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\"},\"extendDeadline(uint256,uint64)\":{\"notice\":\"Extend the deadline of a task.\"},\"getExecutingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of an executor. Most recent ones first.\"},\"getManagingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of a manager. Most recent ones first.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"increaseBudget(uint256,uint96[])\":{\"notice\":\"Increase the budget of the task.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"taskStatistics()\":{\"notice\":\"Retrieves the current statistics of created tasks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Tasks/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\\r\\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\\r\\n    function __Escrow_init() external {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\\r\\n    /// @param token The ERC20 contract address.\\r\\n    /// @param to The address to recieve the tokens.\\r\\n    /// @param amount The amount of ERC20 token to receive.\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8483173af0273ca06c6aa852f0884660803aa8ddcbf6d4af33bf4c80df5f0aaf\",\"license\":\"None\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Escrow} from \\\"./Escrow.sol\\\";\\r\\n\\r\\n/*\\r\\n  Some of the functionality in this contract will be removed in the next version.\\r\\n  This functionality will be provided by off-chain indexing instead.\\r\\n  Therefore this functionality might be implemented in a more dirty way to make it easier to remove.\\r\\n  This is true for:\\r\\n  - taskStatistics\\r\\n  - getManagingTasks\\r\\n  - getExecutingTasks\\r\\n  - manager and executor/applicant in all events (except first introduction)\\r\\n\\r\\n  Seperation of manager and creator is also a recent change. The frontend will currently use creator == manager.\\r\\n  Hence there is also no getCreatedTasks.\\r\\n*/\\r\\ninterface ITasks {\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotManager();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget();\\r\\n    error RewardDoesntEndWithNewToken();\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n    error JudgementNone();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n    error RequestNotAccepted();\\r\\n    error RequestAlreadyExecuted();\\r\\n\\r\\n    event TaskCreated(\\r\\n        uint256 indexed taskId,\\r\\n        string metadata,\\r\\n        uint64 deadline,\\r\\n        ERC20Transfer[] budget,\\r\\n        address creator,\\r\\n        address manager\\r\\n    );\\r\\n    event ApplicationCreated(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        string metadata,\\r\\n        Reward[] reward,\\r\\n        address manager,\\r\\n        address applicant\\r\\n    );\\r\\n    event ApplicationAccepted(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        address manager,\\r\\n        address applicant\\r\\n    );\\r\\n    event TaskTaken(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event SubmissionCreated(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 submissionId,\\r\\n        string metadata,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event SubmissionReviewed(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 submissionId,\\r\\n        SubmissionJudgement judgement,\\r\\n        string feedback,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event TaskCompleted(\\r\\n        uint256 indexed taskId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n\\r\\n    event CancelTaskRequested(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 requestId,\\r\\n        string explanation,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event TaskCancelled(\\r\\n        uint256 indexed taskId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event RequestAccepted(\\r\\n        uint256 indexed taskId,\\r\\n        RequestType requestType,\\r\\n        uint8 requestId,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event RequestExecuted(\\r\\n        uint256 indexed taskId,\\r\\n        RequestType requestType,\\r\\n        uint8 requestId,\\r\\n        address by,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n\\r\\n    event DeadlineExtended(\\r\\n        uint256 indexed taskId,\\r\\n        uint64 extension,\\r\\n        address manager,\\r\\n        address executor\\r\\n    );\\r\\n    event BudgetIncreased(\\r\\n        uint256 indexed taskId,\\r\\n        uint96[] increase,\\r\\n        address manager\\r\\n    );\\r\\n    event MetadataEditted(\\r\\n        uint256 indexed taskId,\\r\\n        string newMetadata,\\r\\n        address manager\\r\\n    );\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @notice nextToken should always be true for the last entry\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to;\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param metadata Metadata of the application. (IPFS hash)\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the manager.\\r\\n    /// @param reward How much rewards the applicant wants for completion.\\r\\n    struct Application {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice For approving people on task creation (they are not required to make an application)\\r\\n    struct PreapprovedApplication {\\r\\n        address applicant;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement {\\r\\n        None,\\r\\n        Accepted,\\r\\n        Rejected\\r\\n    }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    /// @param feedback A response from the manager. (IPFS hash)\\r\\n    struct Submission {\\r\\n        string metadata;\\r\\n        string feedback;\\r\\n        SubmissionJudgement judgement;\\r\\n    }\\r\\n\\r\\n    enum RequestType {\\r\\n        CancelTask\\r\\n    }\\r\\n\\r\\n    /// @notice A container for shared request information.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct Request {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param request Request information.\\r\\n    /// @param explanation Why the task should be cancelled.\\r\\n    struct CancelTaskRequest {\\r\\n        Request request;\\r\\n        string explanation;\\r\\n    }\\r\\n\\r\\n    enum TaskState {\\r\\n        Open,\\r\\n        Taken,\\r\\n        Closed\\r\\n    }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param manager Who has created the task.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    /// @dev Storage blocks seperated by newlines.\\r\\n    struct Task {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        Escrow escrow;\\r\\n        address creator;\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        uint16 executorApplication;\\r\\n        address creator;\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        Escrow escrow;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n\\r\\n    /// @notice Retrieves the current statistics of created tasks.\\r\\n    function taskStatistics()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 openTasks,\\r\\n            uint256 takenTasks,\\r\\n            uint256 successfulTasks\\r\\n        );\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n\\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Retrieves all tasks of a manager. Most recent ones first.\\r\\n    /// @param _manager The manager to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getManagingTasks(\\r\\n        address _manager,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\\r\\n    /// @param _executor The executor to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param _manager Who will manage the task (become the manager).\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId);\\r\\n\\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId);\\r\\n\\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationIds Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationId Index of application you made that has been accepted.\\r\\n    function takeTask(uint256 _taskId, uint16 _applicationId) external;\\r\\n\\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n\\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submissionId Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    /// @param _execute If the request should also be executed in this transaction.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Extend the deadline of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _extension How much to extend the deadline by.\\r\\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\\r\\n\\r\\n    /// @notice Increase the budget of the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _increase How much to increase each tokens amount by.\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Edit the metadata of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New metadata of the task.\\r\\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd03354ef4a12cd25f25ddf14ffd3d4383f6b3b0ca824f8e1db4c73f116638a31\",\"license\":\"None\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, IERC20, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {TasksEnsure} from \\\"./TasksEnsure.sol\\\";\\r\\nimport {TasksUtils} from \\\"./TasksUtils.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ncontract Tasks is Context, TasksEnsure, TasksUtils {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice Various statistics about total tasks.\\r\\n    uint256 private openTasks;\\r\\n    uint256 private takenTasks;\\r\\n    uint256 private successfulTasks;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address private escrowImplementation;\\r\\n\\r\\n    /// @notice This address has the power to disable the contract, in case an exploit is discovered.\\r\\n    address private disabler;\\r\\n    error Disabled();\\r\\n    error NotDisabled();\\r\\n    error NotDisabler();\\r\\n\\r\\n    constructor() {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n        disabler = _msgSender();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskStatistics()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 open, uint256 taken, uint256 successful)\\r\\n    {\\r\\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        offchainTask = _toOffchainTask(task);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](\\r\\n            _taskIds.length\\r\\n        );\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getManagingTasks(\\r\\n        address _manager,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 managerTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\\r\\n            if (tasks[i].manager == _manager) {\\r\\n                taskIndexes[managerTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++managerTasksCount;\\r\\n                }\\r\\n                if (managerTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly {\\r\\n            mstore(\\r\\n                taskIndexes,\\r\\n                sub(mload(taskIndexes), sub(totalTasks, managerTasksCount))\\r\\n            )\\r\\n        }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 executorTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\\r\\n            if (\\r\\n                tasks[i].state != TaskState.Open &&\\r\\n                tasks[i].applications[tasks[i].executorApplication].applicant ==\\r\\n                _executor\\r\\n            ) {\\r\\n                taskIndexes[executorTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++executorTasksCount;\\r\\n                }\\r\\n                if (executorTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly {\\r\\n            mstore(\\r\\n                taskIndexes,\\r\\n                sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))\\r\\n            )\\r\\n        }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId) {\\r\\n        _ensureNotDisabled();\\r\\n        taskId = taskCounter++;\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.metadata = _metadata;\\r\\n        task.deadline = _deadline;\\r\\n        task.budgetCount = uint8(_budget.length);\\r\\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\\r\\n        escrow.__Escrow_init();\\r\\n        task.escrow = escrow;\\r\\n        for (uint8 i; i < uint8(_budget.length); ) {\\r\\n            _budget[i].tokenContract.transferFrom(\\r\\n                _msgSender(),\\r\\n                address(escrow),\\r\\n                _budget[i].amount\\r\\n            );\\r\\n            task.budget[i] = _budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.manager = _manager;\\r\\n        task.creator = _msgSender();\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n        unchecked {\\r\\n            // Impossible to overflow due to openTasks <= taskCounter\\r\\n            ++openTasks;\\r\\n        }\\r\\n\\r\\n        emit TaskCreated(\\r\\n            taskId,\\r\\n            _metadata,\\r\\n            _deadline,\\r\\n            _budget,\\r\\n            _msgSender(),\\r\\n            _manager\\r\\n        );\\r\\n\\r\\n        // Gas optimization\\r\\n        if (_preapprove.length > 0) {\\r\\n            task.applicationCount = uint16(_preapprove.length);\\r\\n            for (uint16 i; i < uint16(_preapprove.length); ) {\\r\\n                Application storage application = task.applications[i];\\r\\n                application.applicant = _preapprove[i].applicant;\\r\\n                application.accepted = true;\\r\\n                _ensureRewardEndsWithNextToken(_preapprove[i].reward);\\r\\n                _setRewardBellowBudget(\\r\\n                    task,\\r\\n                    application,\\r\\n                    _preapprove[i].reward\\r\\n                );\\r\\n\\r\\n                emit ApplicationCreated(\\r\\n                    taskId,\\r\\n                    i,\\r\\n                    \\\"\\\",\\r\\n                    _preapprove[i].reward,\\r\\n                    _manager,\\r\\n                    _preapprove[i].applicant\\r\\n                );\\r\\n\\r\\n                emit ApplicationAccepted(\\r\\n                    taskId,\\r\\n                    i,\\r\\n                    _manager,\\r\\n                    _preapprove[i].applicant\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureRewardEndsWithNextToken(_reward);\\r\\n\\r\\n        Application storage application = task.applications[\\r\\n            task.applicationCount\\r\\n        ];\\r\\n        application.metadata = _metadata;\\r\\n        application.applicant = _msgSender();\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            application.reward[i] = _reward[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        applicationId = task.applicationCount++;\\r\\n\\r\\n        emit ApplicationCreated(\\r\\n            _taskId,\\r\\n            applicationId,\\r\\n            _metadata,\\r\\n            _reward,\\r\\n            task.manager,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        for (uint i; i < _applicationIds.length; ) {\\r\\n            _ensureApplicationExists(task, _applicationIds[i]);\\r\\n\\r\\n            Application storage application = task.applications[\\r\\n                _applicationIds[i]\\r\\n            ];\\r\\n            application.accepted = true;\\r\\n            _increaseBudgetToReward(\\r\\n                task,\\r\\n                application.rewardCount,\\r\\n                application.reward\\r\\n            );\\r\\n            emit ApplicationAccepted(\\r\\n                _taskId,\\r\\n                _applicationIds[i],\\r\\n                _msgSender(),\\r\\n                application.applicant\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(uint256 _taskId, uint16 _applicationId) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureApplicationExists(task, _applicationId);\\r\\n\\r\\n        Application storage application = task.applications[_applicationId];\\r\\n        _ensureSenderIsApplicant(application);\\r\\n        _ensureApplicationIsAccepted(application);\\r\\n\\r\\n        task.executorApplication = _applicationId;\\r\\n\\r\\n        unchecked {\\r\\n            --openTasks;\\r\\n            ++takenTasks;\\r\\n        }\\r\\n        task.state = TaskState.Taken;\\r\\n\\r\\n        emit TaskTaken(_taskId, _applicationId, task.manager, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        Submission storage submission = task.submissions[task.submissionCount];\\r\\n        submission.metadata = _metadata;\\r\\n        submissionId = task.submissionCount++;\\r\\n\\r\\n        emit SubmissionCreated(\\r\\n            _taskId,\\r\\n            submissionId,\\r\\n            _metadata,\\r\\n            task.manager,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n        _ensureSubmissionExists(task, _submissionId);\\r\\n\\r\\n        Submission storage submission = task.submissions[_submissionId];\\r\\n        _ensureSubmissionNotJudged(submission);\\r\\n        _ensureJudgementNotNone(_judgement);\\r\\n        submission.judgement = _judgement;\\r\\n        submission.feedback = _feedback;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++successfulTasks;\\r\\n            }\\r\\n            _payoutTask(task);\\r\\n\\r\\n            emit TaskCompleted(\\r\\n                _taskId,\\r\\n                _msgSender(),\\r\\n                task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(\\r\\n            _taskId,\\r\\n            _submissionId,\\r\\n            _judgement,\\r\\n            _feedback,\\r\\n            _msgSender(),\\r\\n            task.applications[task.executorApplication].applicant\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        if (\\r\\n            task.state == TaskState.Open ||\\r\\n            task.deadline <= uint64(block.timestamp)\\r\\n        ) {\\r\\n            // Task is open or deadline past\\r\\n            if (task.state == TaskState.Open) {\\r\\n                unchecked {\\r\\n                    --openTasks;\\r\\n                }\\r\\n            } else {\\r\\n                // if (task.state == TaskState.Taken) {\\r\\n                unchecked {\\r\\n                    --takenTasks;\\r\\n                }\\r\\n            }\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(\\r\\n                _taskId,\\r\\n                _msgSender(),\\r\\n                task.state == TaskState.Open\\r\\n                    ? address(0)\\r\\n                    : task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        } else {\\r\\n            // Task is taken and deadline has not past\\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[\\r\\n                task.cancelTaskRequestCount\\r\\n            ];\\r\\n            request.explanation = _explanation;\\r\\n            cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n\\r\\n            emit CancelTaskRequested(\\r\\n                _taskId,\\r\\n                cancelTaskRequestId,\\r\\n                _explanation,\\r\\n                _msgSender(),\\r\\n                task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n\\r\\n            CancelTaskRequest storage cancelTaskRequest = task\\r\\n                .cancelTaskRequests[_requestId];\\r\\n            _ensureRequestNotAccepted(cancelTaskRequest.request);\\r\\n\\r\\n            if (_execute) {\\r\\n                // use executeRequest in the body instead? (more gas due to all the checks, but less code duplication)\\r\\n                unchecked {\\r\\n                    --takenTasks;\\r\\n                }\\r\\n                _refundCreator(task);\\r\\n\\r\\n                emit TaskCancelled(_taskId, task.manager, _msgSender());\\r\\n                cancelTaskRequest.request.executed = true;\\r\\n            }\\r\\n\\r\\n            cancelTaskRequest.request.accepted = true;\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(\\r\\n            _taskId,\\r\\n            _requestType,\\r\\n            _requestId,\\r\\n            task.manager,\\r\\n            _msgSender()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n\\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n\\r\\n            CancelTaskRequest storage cancelTaskRequest = task\\r\\n                .cancelTaskRequests[_requestId];\\r\\n            _ensureRequestAccepted(cancelTaskRequest.request);\\r\\n            _ensureRequestNotExecuted(cancelTaskRequest.request);\\r\\n\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n            }\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(\\r\\n                _taskId,\\r\\n                task.manager,\\r\\n                task.applications[task.executorApplication].applicant\\r\\n            );\\r\\n            cancelTaskRequest.request.executed = true;\\r\\n        }\\r\\n\\r\\n        emit RequestExecuted(\\r\\n            _taskId,\\r\\n            _requestType,\\r\\n            _requestId,\\r\\n            _msgSender(),\\r\\n            task.manager,\\r\\n            task.applications[task.executorApplication].applicant\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function extendDeadline(uint256 _taskId, uint64 _extension) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        task.deadline += _extension;\\r\\n\\r\\n        emit DeadlineExtended(\\r\\n            _taskId,\\r\\n            _extension,\\r\\n            _msgSender(),\\r\\n            task.state == TaskState.Open\\r\\n                ? address(0)\\r\\n                : task.applications[task.executorApplication].applicant\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        for (uint8 i; i < uint8(_increase.length); ) {\\r\\n            ERC20Transfer storage transfer = task.budget[i];\\r\\n            transfer.tokenContract.transferFrom(\\r\\n                _msgSender(),\\r\\n                address(task.escrow),\\r\\n                _increase[i]\\r\\n            );\\r\\n            transfer.amount += _increase[i];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit BudgetIncreased(_taskId, _increase, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        task.metadata = _newMetadata;\\r\\n        emit MetadataEditted(_taskId, _newMetadata, _msgSender());\\r\\n    }\\r\\n\\r\\n    function disable() external {\\r\\n        _ensureDisabler();\\r\\n        disabler = address(0);\\r\\n    }\\r\\n\\r\\n    // Ideally you are able to transfer it to the new contract, but that requires addition to the escrow contract\\r\\n    // I prefer this, so the escrow contract keeps being basic (both for security and clone costs)\\r\\n    function refund(uint256 _taskId) external {\\r\\n        _ensureDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskNotClosed(task);\\r\\n        // oficially should update taskOpen / Taken here, but as the contract will cease operations, no point\\r\\n        _refundCreator(task);\\r\\n    }\\r\\n\\r\\n    function _getTask(\\r\\n        uint256 _taskId\\r\\n    ) internal view returns (Task storage task) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        task = tasks[_taskId];\\r\\n    }\\r\\n\\r\\n    function _ensureNotDisabled() internal view {\\r\\n        if (disabler == address(0)) {\\r\\n            revert Disabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabled() internal view {\\r\\n        if (disabler != address(0)) {\\r\\n            revert NotDisabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabler() internal view {\\r\\n        if (_msgSender() != disabler) {\\r\\n            revert NotDisabler();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a8c03b1cb24641ea14b6b6d495def39df3aedb5e9a22edff7111daebddbae73\",\"license\":\"None\"},\"contracts/Tasks/TasksEnsure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n  Functions to ensure a certain precondition is met.\\r\\n*/\\r\\nabstract contract TasksEnsure is ITasks, Context {\\r\\n    function _ensureTaskIsOpen(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskIsTaken(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskNotClosed(Task storage task) internal view {\\r\\n        if (task.state == TaskState.Closed) {\\r\\n            revert TaskClosed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsManager(Task storage task) internal view {\\r\\n        if (task.manager != _msgSender()) {\\r\\n            revert NotManager();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev Should only be called is the task is not open!\\r\\n    function _ensureSenderIsExecutor(Task storage task) internal view {\\r\\n        if (\\r\\n            task.applications[task.executorApplication].applicant !=\\r\\n            _msgSender()\\r\\n        ) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRewardEndsWithNextToken(\\r\\n        Reward[] memory reward\\r\\n    ) internal pure {\\r\\n        unchecked {\\r\\n            if (reward.length != 0 && !reward[reward.length - 1].nextToken) {\\r\\n                revert RewardDoesntEndWithNewToken();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationExists(\\r\\n        Task storage task,\\r\\n        uint16 _applicationId\\r\\n    ) internal view {\\r\\n        if (_applicationId >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsApplicant(\\r\\n        Application storage application\\r\\n    ) internal view {\\r\\n        if (application.applicant != _msgSender()) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationIsAccepted(\\r\\n        Application storage application\\r\\n    ) internal view {\\r\\n        if (!application.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionExists(\\r\\n        Task storage task,\\r\\n        uint8 _submissionId\\r\\n    ) internal view {\\r\\n        if (_submissionId >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionNotJudged(\\r\\n        Submission storage submission\\r\\n    ) internal view {\\r\\n        if (submission.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureJudgementNotNone(\\r\\n        SubmissionJudgement judgement\\r\\n    ) internal pure {\\r\\n        if (judgement == SubmissionJudgement.None) {\\r\\n            revert JudgementNone();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureCancelTaskRequestExists(\\r\\n        Task storage task,\\r\\n        uint8 _requestId\\r\\n    ) internal view {\\r\\n        if (_requestId >= task.cancelTaskRequestCount) {\\r\\n            revert RequestDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotAccepted(Request storage request) internal view {\\r\\n        if (request.accepted) {\\r\\n            revert RequestAlreadyAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestAccepted(Request storage request) internal view {\\r\\n        if (!request.accepted) {\\r\\n            revert RequestNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotExecuted(Request storage request) internal view {\\r\\n        if (request.executed) {\\r\\n            revert RequestAlreadyExecuted();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13fec30715f034814325a835921972a987a95fbc3cf3da9a91579c2ad6d1cd2b\",\"license\":\"None\"},\"contracts/Tasks/TasksUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n  Higher level functions to allow the Tasks file to be more readable.\\r\\n*/\\r\\nabstract contract TasksUtils is ITasks, Context {\\r\\n    function _toOffchainTask(\\r\\n        Task storage task\\r\\n    ) internal view returns (OffChainTask memory offchainTask) {\\r\\n        offchainTask.metadata = task.metadata;\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.creator = task.creator;\\r\\n        offchainTask.manager = task.manager;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.applications = new OffChainApplication[](\\r\\n            task.applicationCount\\r\\n        );\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].metadata = application.metadata;\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n            offchainTask.applications[i].reward = new Reward[](\\r\\n                application.rewardCount\\r\\n            );\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](\\r\\n            task.cancelTaskRequestCount\\r\\n        );\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _increaseBudgetToReward(\\r\\n        Task storage task,\\r\\n        uint8 _length,\\r\\n        mapping(uint8 => Reward) storage _reward\\r\\n    ) internal {\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 needed;\\r\\n        for (uint8 i; i < _length; ) {\\r\\n            unchecked {\\r\\n                needed += _reward[i].amount;\\r\\n            }\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                if (needed > erc20Transfer.amount) {\\r\\n                    // Existing budget in escrow doesnt cover the needed reward\\r\\n                    erc20Transfer.tokenContract.transferFrom(\\r\\n                        _msgSender(),\\r\\n                        address(task.escrow),\\r\\n                        needed - erc20Transfer.amount\\r\\n                    );\\r\\n                    task.budget[j].amount = uint96(needed);\\r\\n                }\\r\\n\\r\\n                needed = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setRewardBellowBudget(\\r\\n        Task storage task,\\r\\n        Application storage application,\\r\\n        Reward[] calldata _reward\\r\\n    ) internal {\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 alreadyReserved;\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\\r\\n            unchecked {\\r\\n                alreadyReserved += _reward[i].amount;\\r\\n            }\\r\\n            if (alreadyReserved > erc20Transfer.amount) {\\r\\n                revert RewardAboveBudget();\\r\\n            }\\r\\n\\r\\n            application.reward[i] = _reward[i];\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                alreadyReserved = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _payoutTask(Task storage task) internal {\\r\\n        Application storage executor = task.applications[\\r\\n            task.executorApplication\\r\\n        ];\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n\\r\\n        uint8 j;\\r\\n        uint8 rewardCount = executor.rewardCount;\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            while (j < rewardCount) {\\r\\n                Reward memory reward = executor.reward[j];\\r\\n                escrow.transfer(\\r\\n                    erc20Transfer.tokenContract,\\r\\n                    reward.to,\\r\\n                    reward.amount\\r\\n                );\\r\\n                unchecked {\\r\\n                    erc20Transfer.amount -= reward.amount;\\r\\n                    ++j;\\r\\n                }\\r\\n\\r\\n                if (reward.nextToken) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Gas optimization\\r\\n            if (erc20Transfer.amount != 0) {\\r\\n                escrow.transfer(\\r\\n                    erc20Transfer.tokenContract,\\r\\n                    creator,\\r\\n                    erc20Transfer.amount\\r\\n                );\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n\\r\\n    function _refundCreator(Task storage task) internal {\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            escrow.transfer(\\r\\n                erc20Transfer.tokenContract,\\r\\n                creator,\\r\\n                erc20Transfer.amount\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9ec28553c0d6235f353b842f12be607a067ebb16c267ef85c405e1ada2e9af69\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000020906200008c565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055620000663390565b600680546001600160a01b0319166001600160a01b03929092169190911790556200009a565b6102a980620054a883390190565b6153fe80620000aa6000396000f3fe608060405234801561001057600080fd5b506004361061016b5760003560e01c806377b98419116100cd578063b685504b11610081578063b795282911610066578063b795282914610306578063c5f9027b14610319578063ecb8adae1461032c57600080fd5b8063b685504b146102eb578063b6cb58a5146102fe57600080fd5b806391a29225116100b257806391a2922514610292578063978a2b53146102a5578063a5e99c4e146102c657600080fd5b806377b984191461026c57806383219a8a1461027f57600080fd5b80633f74d41d116101245780635ac1d773116101095780635ac1d7731461022257806362ffbb201461024657806376645a931461025957600080fd5b80633f74d41d146101dc57806352a63d49146101fc57600080fd5b8063278ecde111610155578063278ecde1146101ae5780632f2770db146101c15780633f561a40146101c957600080fd5b8062f9467d146101705780631d65e77e14610185575b600080fd5b61018361017e366004613ec5565b61033f565b005b610198610193366004613f14565b6104d7565b6040516101a59190614383565b60405180910390f35b6101836101bc366004613f14565b610567565b610183610592565b6101836101d73660046143e2565b6105c4565b6101ef6101ea36600461445b565b610771565b6040516101a59190614490565b61020f61020a366004614552565b61091a565b60405161ffff90911681526020016101a5565b600154600254600354604080519384526020840192909252908201526060016101a5565b6101836102543660046143e2565b610b44565b6101ef610267366004614677565b610d8a565b61018361027a36600461471d565b610ea9565b61018361028d366004614792565b6110ae565b6101836102a03660046147d1565b611116565b6102b86102b3366004614825565b6112d4565b6040519081526020016101a5565b6102d96102d4366004614792565b6119a0565b60405160ff90911681526020016101a5565b6101836102f9366004614924565b611acc565b6000546102b8565b6101ef61031436600461445b565b611c30565b610183610327366004614950565b611d43565b6102d961033a366004614792565b611eac565b6103476121d0565b600061035285612221565b905061035d8161226f565b610366816122dc565b6103708184612361565b60ff83166000908152600782016020526040902061038d816123c4565b821561044557600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190556103c482612400565b60038201546040805173ffffffffffffffffffffffffffffffffffffffff9092168252336020830152805188927f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e7292908290030190a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001781555b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600381015485907f22c8636df8a0387ea92695f6534f3a1dccaa44ba42e7627c4d205e078dbbbe04908690869073ffffffffffffffffffffffffffffffffffffffff166104b83390565b6040516104c89493929190614983565b60405180910390a25050505050565b61054a604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b600061055583612221565b90506105608161259b565b9392505050565b61056f6130b6565b600061057a82612221565b905061058581613106565b61058e81612400565b5050565b61059a613170565b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6105cc6121d0565b60006105d784612221565b90506105e2816131d7565b6105eb81613241565b60005b8281101561076a576106268285858481811061060c5761060c6149c6565b905060200201602081019061062191906149f5565b613294565b6000826005016000868685818110610640576106406149c6565b905060200201602081019061065591906149f5565b61ffff16815260208101919091526040016000206001810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017908190559091506106da9084907501000000000000000000000000000000000000000000900460ff16600284016132f5565b857f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f86868581811061070e5761070e6149c6565b905060200201602081019061072391906149f5565b60018401546040805161ffff93909316835233602084015273ffffffffffffffffffffffffffffffffffffffff90911682820152519081900360600190a2506001016105ee565b5050505050565b600080546060918167ffffffffffffffff811115610791576107916145f9565b6040519080825280602002602001820160405280156107ba578160200160208202803683370190505b5090506000856000036107d5576107d2600184614a3f565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd576000808281526004602052604090206003015474010000000000000000000000000000000000000000900460ff16600281111561083d5761083d613f91565b141580156108a35750600081815260046020908152604080832060038101547501000000000000000000000000000000000000000000900461ffff16845260050190915290206001015473ffffffffffffffffffffffffffffffffffffffff8981169116145b156108d657808383815181106108bb576108bb6149c6565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016107d7565b50808303825103825261090f82610d8a565b979650505050505050565b60006109246121d0565b600061092f87612221565b905061093a816131d7565b6109958484808060200260200160405190810160405280939291908181526020016000905b8282101561098b5761097c60608302860136819003810190614a71565b8152602001906001019061095f565b505050505061359f565b60038101547801000000000000000000000000000000000000000000000000900461ffff1660009081526005820160205260409020806109d6878983614b7f565b5060018101805460ff86167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ff0000000000000000000000000000000000000000909116331717905560005b60ff8086169082161015610a7c5785858260ff16818110610a4857610a486149c6565b60ff841660009081526002860160205260409020606090910292909201919050610a728282614c99565b5050600101610a25565b506003820180547801000000000000000000000000000000000000000000000000900461ffff16906018610aaf83614d4a565b91906101000a81548161ffff021916908361ffff1602179055509250877f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d84898989898860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b1e3390565b604051610b319796959493929190614e35565b60405180910390a2505095945050505050565b610b4c6121d0565b6000610b5784612221565b9050610b6281613241565b610b6b816131d7565b60005b60ff8084169082161015610d475760ff811660009081526004830160205260409020805473ffffffffffffffffffffffffffffffffffffffff166323b872dd33600186015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16888860ff8816818110610bea57610bea6149c6565b9050602002016020810190610bff9190614eb5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190614ed2565b5084848360ff16818110610cc057610cc06149c6565b9050602002016020810190610cd59190614eb5565b81548290601490610d0d9084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16614eef565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081600101915050610b6e565b50837ffd28ab2ce625e634dd4caa0b1632ca64ed46e19b4ddd416693af49ad5e696d62848433604051610d7c93929190614f14565b60405180910390a250505050565b60606000825167ffffffffffffffff811115610da857610da86145f9565b604051908082528060200260200182016040528015610e4c57816020015b610e39604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081610dc65790505b50905060005b8351811015610ea257610e7d848281518110610e7057610e706149c6565b60200260200101516104d7565b828281518110610e8f57610e8f6149c6565b6020908102919091010152600101610e52565b5092915050565b610eb16121d0565b6000610ebc86612221565b9050610ec78161226f565b610ed081613241565b610eda8186613605565b60ff851660009081526006820160205260409020610ef781613667565b610f00856136b9565b848160020160006101000a81548160ff02191690836002811115610f2657610f26613f91565b021790555060018101610f3a848683614b7f565b506001856002811115610f4f57610f4f613f91565b0361101757600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055600380546001019055610f8e82613704565b867f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d963360038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff94851681529316908301520160405180910390a25b867f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a9303878787873360038901547501000000000000000000000000000000000000000000900461ffff16600090815260058a0160205260409081902060010154905161109d96959493929173ffffffffffffffffffffffffffffffffffffffff1690614f86565b60405180910390a250505050505050565b6110b66121d0565b60006110c184612221565b90506110cc81613241565b6110d5816131d7565b806110e1838583614b7f565b50837f967dad14c5f736d50ac946b958b80007717809320b4864c86cd29b0898fad807848433604051610d7c93929190614fe2565b61111e6121d0565b600061112984612221565b90506111348161226f565b61113e8183612361565b60ff82166000908152600782016020526040902061115b81613a6c565b61116481613aa7565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905561119582612400565b60038201547501000000000000000000000000000000000000000000810461ffff16600090815260058401602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff948516815293169083015286917f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72910160405180910390a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055837fa20926c2163603eba714f9531625851214f394b2984a5038f03c478b73b0458a84846112733390565b600386015461ffff7501000000000000000000000000000000000000000000820416600090815260058801602052604090819020600101549051610d7c9594939273ffffffffffffffffffffffffffffffffffffffff90811692169061501c565b60006112de6121d0565b6000805490806112ed83615068565b9091555060008181526004602052604090209091508061130e8a8c83614b7f565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a161790556003810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8916021790556005546000906113b39073ffffffffffffffffffffffffffffffffffffffff16613ae8565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b505050506001820180547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff84160217905560005b60ff80891690821610156115dc5788888260ff16818110611488576114886149c6565b61149e92602060409092020190810191506150a0565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff168181106114d0576114d06149c6565b90506040020160200160208101906114e89190614eb5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af115801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115939190614ed2565b5088888260ff168181106115a9576115a96149c6565b60ff84166000908152600487016020526040908190209102929092019190506115d282826150bd565b5050600101611465565b506003820180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff89161790915560028301805433921682179055600180548101905560405184917fcef3c76c6dc8ae3380ddd7db5dc62d9912867f43c04b1408899aa707f307804991611673918f918f918f918f918f918f90615122565b60405180910390a28315611992576003820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff80861690821610156119905761ffff8116600081815260058501602052604090209087908790818110611707576117076149c6565b90506020028101906117199190615202565b6117279060208101906150a0565b6001820180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091177401000000000000000000000000000000000000000017905561180a878761ffff851681811061179e5761179e6149c6565b90506020028101906117b09190615202565b6117be906020810190615240565b808060200260200160405190810160405280939291908181526020016000905b8282101561098b576117fb60608302860136819003810190614a71565b815260200190600101906117de565b61184a848289898661ffff16818110611825576118256149c6565b90506020028101906118379190615202565b611845906020810190615240565b613bb4565b847f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d8389898661ffff16818110611883576118836149c6565b90506020028101906118959190615202565b6118a3906020810190615240565b8c8c8c8961ffff168181106118ba576118ba6149c6565b90506020028101906118cc9190615202565b6118da9060208101906150a0565b6040516118eb9594939291906152a7565b60405180910390a2847f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f838a8a8a8761ffff1681811061192d5761192d6149c6565b905060200281019061193f9190615202565b61194d9060208101906150a0565b6040805161ffff909416845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a2506001016116cf565b505b505098975050505050505050565b60006119aa6121d0565b60006119b585612221565b90506119c08161226f565b6119c9816122dc565b60038101547a010000000000000000000000000000000000000000000000000000900460ff166000908152600682016020526040902080611a0b858783614b7f565b506003820180547a010000000000000000000000000000000000000000000000000000900460ff1690601a611a3f83615302565b91906101000a81548160ff021916908360ff1602179055509250857febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d1287128487878660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611aaa3390565b604051611abb959493929190615321565b60405180910390a250509392505050565b611ad46121d0565b6000611adf83612221565b9050611aea816131d7565b611af48183613294565b61ffff821660009081526005820160205260409020611b1281613dee565b611b1b81613e41565b6003820180547fffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000061ffff8616908102919091178255600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01815560028054909101905581547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000179092556040805191825273ffffffffffffffffffffffffffffffffffffffff9092166020820152339181019190915284907f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de190606001610d7c565b600080546060918167ffffffffffffffff811115611c5057611c506145f9565b604051908082528060200260200182016040528015611c79578160200160208202803683370190505b509050600085600003611c9457611c91600184614a3f565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd5760008181526004602052604090206003015473ffffffffffffffffffffffffffffffffffffffff808a16911603611d1c5780838381518110611d0157611d016149c6565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611c96565b611d4b6121d0565b6000611d5683612221565b9050611d6181613241565b611d6a81613106565b600181018054839190600090611d8b90849067ffffffffffffffff1661536d565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f3d9ee6a0fdedaee94f1c3631bf046c61c58704428408ca72e3e7ffa046884a6883611ddb3390565b6000600386015474010000000000000000000000000000000000000000900460ff166002811115611e0e57611e0e613f91565b14611e645760038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16611e67565b60005b6040805167ffffffffffffffff909416845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a2505050565b6000611eb66121d0565b6000611ec185612221565b9050611ecc81613241565b611ed581613106565b6000600382015474010000000000000000000000000000000000000000900460ff166002811115611f0857611f08613f91565b1480611f255750600181015467ffffffffffffffff428116911611155b156120a9576000600382015474010000000000000000000000000000000000000000900460ff166002811115611f5d57611f5d613f91565b03611f8f57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055611fb8565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b611fc181612400565b847f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72336000600385015474010000000000000000000000000000000000000000900460ff16600281111561201757612017613f91565b1461206d5760038401547501000000000000000000000000000000000000000000900461ffff16600090815260058501602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16612070565b60005b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520160405180910390a260ff91506121c8565b60038101547b01000000000000000000000000000000000000000000000000000000900460ff1660009081526007820160205260409020600181016120ef858783614b7f565b506003820180547b01000000000000000000000000000000000000000000000000000000900460ff1690601b61212483615302565b91906101000a81548160ff021916908360ff1602179055509250857f8beb4b470a422a5a51289e17afad55bb1f5692ed0b2ad0d71779119481d3899284878761216a3390565b60038801547501000000000000000000000000000000000000000000900461ffff16600090815260058901602052604090819020600101549051611abb959493929173ffffffffffffffffffffffffffffffffffffffff1690615321565b509392505050565b60065473ffffffffffffffffffffffffffffffffffffffff1661221f576040517f75884cda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008054821061225d576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600090815260046020526040902090565b6001600382015474010000000000000000000000000000000000000000900460ff1660028111156122a2576122a2613f91565b146122d9576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600381015461ffff750100000000000000000000000000000000000000000090910416600090815260058201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff1633146122d9576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7b0100000000000000000000000000000000000000000000000000000090910481169082161061058e576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff16156122d9576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154600282015460018301547701000000000000000000000000000000000000000000000090920460ff169173ffffffffffffffffffffffffffffffffffffffff91821691680100000000000000009091041660005b8360ff168160ff1610156125555760ff811660009081526004868101602090815260409283902083518085018552905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905294517fbeabacc800000000000000000000000000000000000000000000000000000000815293840152868416602484015260448301919091529184169063beabacc890606401600060405180830381600087803b15801561253157600080fd5b505af1158015612545573d6000803e3d6000fd5b5050505081600101915050612459565b5050505060030180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b61260e604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b8154829061261b90614ae3565b80601f016020809104026020016040519081016040528092919081815260200182805461264790614ae3565b80156126945780601f1061266957610100808354040283529160200191612694565b820191906000526020600020905b81548152906001019060200180831161267757829003601f168201915b5050509183525050600182015467ffffffffffffffff16602082015260038201547501000000000000000000000000000000000000000000810461ffff16604083015260028084015473ffffffffffffffffffffffffffffffffffffffff90811660608501528216608084015260a083019174010000000000000000000000000000000000000000900460ff169081111561273157612731613f91565b9081600281111561274457612744613f91565b905250600182015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660c0820152600382015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156127ae576127ae6145f9565b6040519080825280602002602001820160405280156127f357816020015b60408051808201909152600080825260208201528152602001906001900390816127cc5790505b5060e082015260005b8160e00151518160ff16101561289c5760ff8116600081815260048501602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260e08401518051919290918110612889576128896149c6565b60209081029190910101526001016127fc565b5060038201547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff8111156128da576128da6145f9565b60405190808252806020026020018201604052801561294e57816020015b61293b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b8152602001906001900390816128f85790505b5061010082015260005b816101000151518160ff161015612cb05760ff8116600090815260058401602052604090208054819061298a90614ae3565b80601f01602080910402602001604051908101604052809291908181526020018280546129b690614ae3565b8015612a035780601f106129d857610100808354040283529160200191612a03565b820191906000526020600020905b8154815290600101906020018083116129e657829003601f168201915b50505050508361010001518360ff1681518110612a2257612a226149c6565b6020908102919091010151526001810154610100840151805173ffffffffffffffffffffffffffffffffffffffff9092169160ff8516908110612a6757612a676149c6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9092169101526001810154610100840151805160ff740100000000000000000000000000000000000000009093048316928516908110612aca57612aca6149c6565b602090810291909101015190151560409091015260018101547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612b1757612b176145f9565b604051908082528060200260200182016040528015612b8057816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181612b355790505b508361010001518360ff1681518110612b9b57612b9b6149c6565b60200260200101516060018190525060005b8361010001518360ff1681518110612bc757612bc76149c6565b602002602001015160600151518160ff161015612ca65760ff8181166000908152600284016020908152604091829020825160608101845290548085161515825261010080820473ffffffffffffffffffffffffffffffffffffffff1693830193909352750100000000000000000000000000000000000000000090046affffffffffffffffffffff1692810192909252860151805191929091908616908110612c7357612c736149c6565b6020026020010151606001518260ff1681518110612c9357612c936149c6565b6020908102919091010152600101612bad565b5050600101612958565b5060038201547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612cef57612cef6145f9565b604051908082528060200260200182016040528015612d4057816020015b612d2d604080516060808201835280825260208201529081016000905290565b815260200190600190039081612d0d5790505b5061012082015260005b816101200151518160ff161015612efd5760ff8116600090815260068401602052604090819020815160608101909252805482908290612d8990614ae3565b80601f0160208091040260200160405190810160405280929190818152602001828054612db590614ae3565b8015612e025780601f10612dd757610100808354040283529160200191612e02565b820191906000526020600020905b815481529060010190602001808311612de557829003601f168201915b50505050508152602001600182018054612e1b90614ae3565b80601f0160208091040260200160405190810160405280929190818152602001828054612e4790614ae3565b8015612e945780601f10612e6957610100808354040283529160200191612e94565b820191906000526020600020905b815481529060010190602001808311612e7757829003601f168201915b505050918352505060028281015460209092019160ff1690811115612ebb57612ebb613f91565b6002811115612ecc57612ecc613f91565b815250508261012001518260ff1681518110612eea57612eea6149c6565b6020908102919091010152600101612d4a565b5060038201547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612f3d57612f3d6145f9565b604051908082528060200260200182016040528015612f9357816020015b60408051608081018252600091810182815260608083019390935281526020810191909152815260200190600190039081612f5b5790505b5061014082015260005b816101400151518160ff1610156130b05760ff80821660009081526007850160209081526040918290208251608081018452815480861615159482019485526101009004909416151560608501529183526001820180549184019161300190614ae3565b80601f016020809104026020016040519081016040528092919081815260200182805461302d90614ae3565b801561307a5780601f1061304f5761010080835404028352916020019161307a565b820191906000526020600020905b81548152906001019060200180831161305d57829003601f168201915b5050505050815250508261014001518260ff168151811061309d5761309d6149c6565b6020908102919091010152600101612f9d565b50919050565b60065473ffffffffffffffffffffffffffffffffffffffff161561221f576040517f5b3d539f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600382015474010000000000000000000000000000000000000000900460ff16600281111561313957613139613f91565b036122d9576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461221f576040517f0e5e0b5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600382015474010000000000000000000000000000000000000000900460ff16600281111561320a5761320a613f91565b146122d9576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff1633146122d9576040517fc0fc8a8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015461ffff780100000000000000000000000000000000000000000000000090910481169082161061058e576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600484016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b8560ff168160ff1610156135965760ff8082166000908152602087905260409020546affffffffffffffffffffff75010000000000000000000000000000000000000000008204169390930192161561358e5782602001516bffffffffffffffffffffffff1682111561351c57825173ffffffffffffffffffffffffffffffffffffffff166323b872dd338960010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686602001516bffffffffffffffffffffffff16866134289190614a3f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af11580156134a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c59190614ed2565b5060ff841660009081526004880160205260409020805473ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000006bffffffffffffffffffffffff8516021790555b60ff60019094019384166000908152600488016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b60010161335a565b50505050505050565b8051158015906135ce5750806001825103815181106135c0576135c06149c6565b602002602001015160000151155b156122d9576040517f1f0e3e5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7a01000000000000000000000000000000000000000000000000000090910481169082161061058e576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028083015460ff169081111561368257613682613f91565b146122d9576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160028111156136cd576136cd613f91565b036122d9576040517fe1ac484400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154750100000000000000000000000000000000000000000080820461ffff1660009081526005840160205260408120600285015460018087015490830154929573ffffffffffffffffffffffffffffffffffffffff928316956801000000000000000090920490921693920460ff9081169177010000000000000000000000000000000000000000000000900416825b8160ff168160ff161015613a205760ff8116600090815260048901602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16908201525b8360ff168560ff1610156139585760ff858116600090815260028a0160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff90811692820183905275010000000000000000000000000000000000000000009094046affffffffffffffffffffff16818401819052855193517fbeabacc80000000000000000000000000000000000000000000000000000000081529385166004850152602484019290925260448301919091529188169063beabacc890606401600060405180830381600087803b1580156138f957600080fd5b505af115801561390d573d6000803e3d6000fd5b5050505060408101516020830180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805160019690960195156139525750613958565b5061380b565b60208101516bffffffffffffffffffffffff1615613a1757805160208201516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b1580156139fe57600080fd5b505af1158015613a12573d6000803e3d6000fd5b505050505b50600101613798565b5050505060039390930180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055505050565b805460ff166122d9576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610100900460ff16156122d9576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff8116613baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6001830180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8416021790556000808052600485016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8086169082161015613de45785858260ff16818110613c8357613c836149c6565b9050606002016040016020810190613c9b919061538e565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613cf8576040517fb8f6ba5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858260ff16818110613d0d57613d0d6149c6565b60ff8416600090815260028b0160205260409020606090910292909201919050613d378282614c99565b90505085858260ff16818110613d4f57613d4f6149c6565b613d6592602060609092020190810191506153ab565b15613ddc5760ff60019094019384166000908152600489016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613c60565b5050505050505050565b600181015473ffffffffffffffffffffffffffffffffffffffff1633146122d9576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015474010000000000000000000000000000000000000000900460ff166122d9576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803560018110613baf57600080fd5b803560ff81168114613baf57600080fd5b80151581146122d957600080fd5b60008060008060808587031215613edb57600080fd5b84359350613eeb60208601613e97565b9250613ef960408601613ea6565b91506060850135613f0981613eb7565b939692955090935050565b600060208284031215613f2657600080fd5b5035919050565b6000815180845260005b81811015613f5357602081850181015186830182015201613f37565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106122d9576122d9613f91565b613fd981613fc0565b9052565b600081518084526020808501945080840160005b8381101561403c578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101613ff1565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015614133578385038a5282516080815181885261408882890182613f2d565b838a015173ffffffffffffffffffffffffffffffffffffffff9081168a8c01526040808601511515818c01526060958601518b8403878d01528051808552908d019689965091945091929091908c01905b8086101561411b5786518051151583528d81015185168e8401528501516affffffffffffffffffffff1685830152958c019560019590950194908201906140d9565b509e8b019e9950505094880194505050600101614066565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156141c257828403895281516060815181875261418182880182613f2d565b91505086820151868203888801526141998282613f2d565b91505060408083015192506141ad83613fc0565b9590950152978401979084019060010161415f565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156141c25782840389528151805180511515865286015115158686015285015160606040860181905261422581870183613f2d565b9a87019a95505050908401906001016141ed565b6000610160825181855261424f82860182613f2d565b915050602083015161426d602086018267ffffffffffffffff169052565b506040830151614283604086018261ffff169052565b5060608301516142ab606086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060808301516142d3608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08301516142e660a0860182613fd0565b5060c083015161430e60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e083015184820360e08601526143268282613fdd565b91505061010080840151858303828701526143418382614047565b92505050610120808401518583038287015261435d8382614141565b92505050610140808401518583038287015261437983826141cf565b9695505050505050565b6020815260006105606020830184614239565b60008083601f8401126143a857600080fd5b50813567ffffffffffffffff8111156143c057600080fd5b6020830191508360208260051b85010111156143db57600080fd5b9250929050565b6000806000604084860312156143f757600080fd5b83359250602084013567ffffffffffffffff81111561441557600080fd5b61442186828701614396565b9497909650939450505050565b73ffffffffffffffffffffffffffffffffffffffff811681146122d957600080fd5b8035613baf8161442e565b60008060006060848603121561447057600080fd5b833561447b8161442e565b95602085013595506040909401359392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614503577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526144f1858351614239565b945092850192908501906001016144b7565b5092979650505050505050565b60008083601f84011261452257600080fd5b50813567ffffffffffffffff81111561453a57600080fd5b6020830191508360208285010111156143db57600080fd5b60008060008060006060868803121561456a57600080fd5b85359450602086013567ffffffffffffffff8082111561458957600080fd5b61459589838a01614510565b909650945060408801359150808211156145ae57600080fd5b818801915088601f8301126145c257600080fd5b8135818111156145d157600080fd5b8960206060830285010111156145e657600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561466f5761466f6145f9565b604052919050565b6000602080838503121561468a57600080fd5b823567ffffffffffffffff808211156146a257600080fd5b818501915085601f8301126146b657600080fd5b8135818111156146c8576146c86145f9565b8060051b91506146d9848301614628565b81815291830184019184810190888411156146f357600080fd5b938501935b83851015614711578435825293850193908501906146f8565b98975050505050505050565b60008060008060006080868803121561473557600080fd5b8535945061474560208701613ea6565b935060408601356003811061475957600080fd5b9250606086013567ffffffffffffffff81111561477557600080fd5b61478188828901614510565b969995985093965092949392505050565b6000806000604084860312156147a757600080fd5b83359250602084013567ffffffffffffffff8111156147c557600080fd5b61442186828701614510565b6000806000606084860312156147e657600080fd5b833592506147f660208501613e97565b915061480460408501613ea6565b90509250925092565b803567ffffffffffffffff81168114613baf57600080fd5b60008060008060008060008060a0898b03121561484157600080fd5b883567ffffffffffffffff8082111561485957600080fd5b6148658c838d01614510565b909a50985088915061487960208c0161480d565b975060408b013591508082111561488f57600080fd5b818b0191508b601f8301126148a357600080fd5b8135818111156148b257600080fd5b8c60208260061b85010111156148c757600080fd5b60208301975095506148db60608c01614450565b945060808b01359150808211156148f157600080fd5b506148fe8b828c01614396565b999c989b5096995094979396929594505050565b803561ffff81168114613baf57600080fd5b6000806040838503121561493757600080fd5b8235915061494760208401614912565b90509250929050565b6000806040838503121561496357600080fd5b823591506149476020840161480d565b60018110613fd957613fd9613f91565b608081016149918287614973565b60ff94909416602082015273ffffffffffffffffffffffffffffffffffffffff92831660408201529116606090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215614a0757600080fd5b61056082614912565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115614a5257614a52614a10565b92915050565b6affffffffffffffffffffff811681146122d957600080fd5b600060608284031215614a8357600080fd5b6040516060810181811067ffffffffffffffff82111715614aa657614aa66145f9565b6040528235614ab481613eb7565b81526020830135614ac48161442e565b60208201526040830135614ad781614a58565b60408201529392505050565b600181811c90821680614af757607f821691505b6020821081036130b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f821115614b7a57600081815260208120601f850160051c81016020861015614b575750805b601f850160051c820191505b81811015614b7657828155600101614b63565b5050505b505050565b67ffffffffffffffff831115614b9757614b976145f9565b614bab83614ba58354614ae3565b83614b30565b6000601f841160018114614bfd5760008515614bc75750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b17835561076a565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015614c4c5786850135825560209485019460019092019101614c2c565b5086821015614c87577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135614ca481613eb7565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff1691821783556020840135614ce28161442e565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff00000000000000000000000000000000000000000081848285161717855560408601359250614d3983614a58565b921760a89190911b90911617905550565b600061ffff808316818103614d6157614d61614a10565b6001019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b8581101561403c578135614dd781613eb7565b1515875281830135614de88161442e565b73ffffffffffffffffffffffffffffffffffffffff1687840152604082810135614e1181614a58565b6affffffffffffffffffffff16908801526060968701969190910190600101614dc4565b61ffff8816815260a060208201526000614e5360a08301888a614d6b565b8281036040840152614e66818789614db4565b91505073ffffffffffffffffffffffffffffffffffffffff808516606084015280841660808401525098975050505050505050565b6bffffffffffffffffffffffff811681146122d957600080fd5b600060208284031215614ec757600080fd5b813561056081614e9b565b600060208284031215614ee457600080fd5b815161056081613eb7565b6bffffffffffffffffffffffff818116838216019080821115610ea257610ea2614a10565b6040808252810183905260008460608301825b86811015614f5c578235614f3a81614e9b565b6bffffffffffffffffffffffff16825260209283019290910190600101614f27565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60ff87168152614f9586613fc0565b85602082015260a060408201526000614fb260a083018688614d6b565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b604081526000614ff6604083018587614d6b565b905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60a0810161502a8288614973565b60ff95909516602082015273ffffffffffffffffffffffffffffffffffffffff93841660408201529183166060830152909116608090910152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361509957615099614a10565b5060010190565b6000602082840312156150b257600080fd5b81356105608161442e565b81356150c88161442e565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff00000000000000000000000000000000000000008181845416178355602084013561511881614e9b565b60a01b1617905550565b60a08152600061513660a08301898b614d6b565b602067ffffffffffffffff89168185015260408483038186015282888452828401905089935060005b898110156151b95784356151728161442e565b73ffffffffffffffffffffffffffffffffffffffff1682528484013561519781614e9b565b6bffffffffffffffffffffffff1682850152938201939082019060010161515f565b5073ffffffffffffffffffffffffffffffffffffffff8816606087015293506151e192505050565b73ffffffffffffffffffffffffffffffffffffffff83166080830152614711565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261523657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261527557600080fd5b83018035915067ffffffffffffffff82111561529057600080fd5b60200191506060810236038213156143db57600080fd5b61ffff8616815260a06020820152600060a082015260c0604082015260006152d360c083018688614db4565b73ffffffffffffffffffffffffffffffffffffffff948516606084015292909316608090910152949350505050565b600060ff821660ff810361531857615318614a10565b60010192915050565b60ff8616815260806020820152600061533e608083018688614d6b565b73ffffffffffffffffffffffffffffffffffffffff948516604084015292909316606090910152949350505050565b67ffffffffffffffff818116838216019080821115610ea257610ea2614a10565b6000602082840312156153a057600080fd5b813561056081614a58565b6000602082840312156153bd57600080fd5b813561056081613eb756fea26469706673582212203d91049895ea252ec5c8581e4e3e6f81a24ac31a8b0d8fa5848f29dd9df4b86a64736f6c63430008110033608060405234801561001057600080fd5b50610289806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806365b145fb1461003b578063beabacc814610045575b600080fd5b610043610058565b005b6100436100533660046101e9565b6100d4565b60005473ffffffffffffffffffffffffffffffffffffffff16156100a8576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610125576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061022a565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101e657600080fd5b50565b6000806000606084860312156101fe57600080fd5b8335610209816101c4565b92506020840135610219816101c4565b929592945050506040919091013590565b60006020828403121561023c57600080fd5b8151801515811461024c57600080fd5b939250505056fea264697066735822122071e4a897de1270fdf9bdcd1b89860b1104c5e39385f3358cc1d1cd9348a1939864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016b5760003560e01c806377b98419116100cd578063b685504b11610081578063b795282911610066578063b795282914610306578063c5f9027b14610319578063ecb8adae1461032c57600080fd5b8063b685504b146102eb578063b6cb58a5146102fe57600080fd5b806391a29225116100b257806391a2922514610292578063978a2b53146102a5578063a5e99c4e146102c657600080fd5b806377b984191461026c57806383219a8a1461027f57600080fd5b80633f74d41d116101245780635ac1d773116101095780635ac1d7731461022257806362ffbb201461024657806376645a931461025957600080fd5b80633f74d41d146101dc57806352a63d49146101fc57600080fd5b8063278ecde111610155578063278ecde1146101ae5780632f2770db146101c15780633f561a40146101c957600080fd5b8062f9467d146101705780631d65e77e14610185575b600080fd5b61018361017e366004613ec5565b61033f565b005b610198610193366004613f14565b6104d7565b6040516101a59190614383565b60405180910390f35b6101836101bc366004613f14565b610567565b610183610592565b6101836101d73660046143e2565b6105c4565b6101ef6101ea36600461445b565b610771565b6040516101a59190614490565b61020f61020a366004614552565b61091a565b60405161ffff90911681526020016101a5565b600154600254600354604080519384526020840192909252908201526060016101a5565b6101836102543660046143e2565b610b44565b6101ef610267366004614677565b610d8a565b61018361027a36600461471d565b610ea9565b61018361028d366004614792565b6110ae565b6101836102a03660046147d1565b611116565b6102b86102b3366004614825565b6112d4565b6040519081526020016101a5565b6102d96102d4366004614792565b6119a0565b60405160ff90911681526020016101a5565b6101836102f9366004614924565b611acc565b6000546102b8565b6101ef61031436600461445b565b611c30565b610183610327366004614950565b611d43565b6102d961033a366004614792565b611eac565b6103476121d0565b600061035285612221565b905061035d8161226f565b610366816122dc565b6103708184612361565b60ff83166000908152600782016020526040902061038d816123c4565b821561044557600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190556103c482612400565b60038201546040805173ffffffffffffffffffffffffffffffffffffffff9092168252336020830152805188927f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e7292908290030190a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001781555b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600381015485907f22c8636df8a0387ea92695f6534f3a1dccaa44ba42e7627c4d205e078dbbbe04908690869073ffffffffffffffffffffffffffffffffffffffff166104b83390565b6040516104c89493929190614983565b60405180910390a25050505050565b61054a604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b600061055583612221565b90506105608161259b565b9392505050565b61056f6130b6565b600061057a82612221565b905061058581613106565b61058e81612400565b5050565b61059a613170565b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6105cc6121d0565b60006105d784612221565b90506105e2816131d7565b6105eb81613241565b60005b8281101561076a576106268285858481811061060c5761060c6149c6565b905060200201602081019061062191906149f5565b613294565b6000826005016000868685818110610640576106406149c6565b905060200201602081019061065591906149f5565b61ffff16815260208101919091526040016000206001810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017908190559091506106da9084907501000000000000000000000000000000000000000000900460ff16600284016132f5565b857f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f86868581811061070e5761070e6149c6565b905060200201602081019061072391906149f5565b60018401546040805161ffff93909316835233602084015273ffffffffffffffffffffffffffffffffffffffff90911682820152519081900360600190a2506001016105ee565b5050505050565b600080546060918167ffffffffffffffff811115610791576107916145f9565b6040519080825280602002602001820160405280156107ba578160200160208202803683370190505b5090506000856000036107d5576107d2600184614a3f565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd576000808281526004602052604090206003015474010000000000000000000000000000000000000000900460ff16600281111561083d5761083d613f91565b141580156108a35750600081815260046020908152604080832060038101547501000000000000000000000000000000000000000000900461ffff16845260050190915290206001015473ffffffffffffffffffffffffffffffffffffffff8981169116145b156108d657808383815181106108bb576108bb6149c6565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016107d7565b50808303825103825261090f82610d8a565b979650505050505050565b60006109246121d0565b600061092f87612221565b905061093a816131d7565b6109958484808060200260200160405190810160405280939291908181526020016000905b8282101561098b5761097c60608302860136819003810190614a71565b8152602001906001019061095f565b505050505061359f565b60038101547801000000000000000000000000000000000000000000000000900461ffff1660009081526005820160205260409020806109d6878983614b7f565b5060018101805460ff86167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ff0000000000000000000000000000000000000000909116331717905560005b60ff8086169082161015610a7c5785858260ff16818110610a4857610a486149c6565b60ff841660009081526002860160205260409020606090910292909201919050610a728282614c99565b5050600101610a25565b506003820180547801000000000000000000000000000000000000000000000000900461ffff16906018610aaf83614d4a565b91906101000a81548161ffff021916908361ffff1602179055509250877f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d84898989898860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b1e3390565b604051610b319796959493929190614e35565b60405180910390a2505095945050505050565b610b4c6121d0565b6000610b5784612221565b9050610b6281613241565b610b6b816131d7565b60005b60ff8084169082161015610d475760ff811660009081526004830160205260409020805473ffffffffffffffffffffffffffffffffffffffff166323b872dd33600186015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16888860ff8816818110610bea57610bea6149c6565b9050602002016020810190610bff9190614eb5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190614ed2565b5084848360ff16818110610cc057610cc06149c6565b9050602002016020810190610cd59190614eb5565b81548290601490610d0d9084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16614eef565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081600101915050610b6e565b50837ffd28ab2ce625e634dd4caa0b1632ca64ed46e19b4ddd416693af49ad5e696d62848433604051610d7c93929190614f14565b60405180910390a250505050565b60606000825167ffffffffffffffff811115610da857610da86145f9565b604051908082528060200260200182016040528015610e4c57816020015b610e39604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081610dc65790505b50905060005b8351811015610ea257610e7d848281518110610e7057610e706149c6565b60200260200101516104d7565b828281518110610e8f57610e8f6149c6565b6020908102919091010152600101610e52565b5092915050565b610eb16121d0565b6000610ebc86612221565b9050610ec78161226f565b610ed081613241565b610eda8186613605565b60ff851660009081526006820160205260409020610ef781613667565b610f00856136b9565b848160020160006101000a81548160ff02191690836002811115610f2657610f26613f91565b021790555060018101610f3a848683614b7f565b506001856002811115610f4f57610f4f613f91565b0361101757600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055600380546001019055610f8e82613704565b867f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d963360038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff94851681529316908301520160405180910390a25b867f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a9303878787873360038901547501000000000000000000000000000000000000000000900461ffff16600090815260058a0160205260409081902060010154905161109d96959493929173ffffffffffffffffffffffffffffffffffffffff1690614f86565b60405180910390a250505050505050565b6110b66121d0565b60006110c184612221565b90506110cc81613241565b6110d5816131d7565b806110e1838583614b7f565b50837f967dad14c5f736d50ac946b958b80007717809320b4864c86cd29b0898fad807848433604051610d7c93929190614fe2565b61111e6121d0565b600061112984612221565b90506111348161226f565b61113e8183612361565b60ff82166000908152600782016020526040902061115b81613a6c565b61116481613aa7565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905561119582612400565b60038201547501000000000000000000000000000000000000000000810461ffff16600090815260058401602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff948516815293169083015286917f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72910160405180910390a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055837fa20926c2163603eba714f9531625851214f394b2984a5038f03c478b73b0458a84846112733390565b600386015461ffff7501000000000000000000000000000000000000000000820416600090815260058801602052604090819020600101549051610d7c9594939273ffffffffffffffffffffffffffffffffffffffff90811692169061501c565b60006112de6121d0565b6000805490806112ed83615068565b9091555060008181526004602052604090209091508061130e8a8c83614b7f565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a161790556003810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8916021790556005546000906113b39073ffffffffffffffffffffffffffffffffffffffff16613ae8565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b505050506001820180547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff84160217905560005b60ff80891690821610156115dc5788888260ff16818110611488576114886149c6565b61149e92602060409092020190810191506150a0565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff168181106114d0576114d06149c6565b90506040020160200160208101906114e89190614eb5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af115801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115939190614ed2565b5088888260ff168181106115a9576115a96149c6565b60ff84166000908152600487016020526040908190209102929092019190506115d282826150bd565b5050600101611465565b506003820180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff89161790915560028301805433921682179055600180548101905560405184917fcef3c76c6dc8ae3380ddd7db5dc62d9912867f43c04b1408899aa707f307804991611673918f918f918f918f918f918f90615122565b60405180910390a28315611992576003820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff80861690821610156119905761ffff8116600081815260058501602052604090209087908790818110611707576117076149c6565b90506020028101906117199190615202565b6117279060208101906150a0565b6001820180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091177401000000000000000000000000000000000000000017905561180a878761ffff851681811061179e5761179e6149c6565b90506020028101906117b09190615202565b6117be906020810190615240565b808060200260200160405190810160405280939291908181526020016000905b8282101561098b576117fb60608302860136819003810190614a71565b815260200190600101906117de565b61184a848289898661ffff16818110611825576118256149c6565b90506020028101906118379190615202565b611845906020810190615240565b613bb4565b847f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d8389898661ffff16818110611883576118836149c6565b90506020028101906118959190615202565b6118a3906020810190615240565b8c8c8c8961ffff168181106118ba576118ba6149c6565b90506020028101906118cc9190615202565b6118da9060208101906150a0565b6040516118eb9594939291906152a7565b60405180910390a2847f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f838a8a8a8761ffff1681811061192d5761192d6149c6565b905060200281019061193f9190615202565b61194d9060208101906150a0565b6040805161ffff909416845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a2506001016116cf565b505b505098975050505050505050565b60006119aa6121d0565b60006119b585612221565b90506119c08161226f565b6119c9816122dc565b60038101547a010000000000000000000000000000000000000000000000000000900460ff166000908152600682016020526040902080611a0b858783614b7f565b506003820180547a010000000000000000000000000000000000000000000000000000900460ff1690601a611a3f83615302565b91906101000a81548160ff021916908360ff1602179055509250857febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d1287128487878660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611aaa3390565b604051611abb959493929190615321565b60405180910390a250509392505050565b611ad46121d0565b6000611adf83612221565b9050611aea816131d7565b611af48183613294565b61ffff821660009081526005820160205260409020611b1281613dee565b611b1b81613e41565b6003820180547fffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000061ffff8616908102919091178255600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01815560028054909101905581547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000179092556040805191825273ffffffffffffffffffffffffffffffffffffffff9092166020820152339181019190915284907f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de190606001610d7c565b600080546060918167ffffffffffffffff811115611c5057611c506145f9565b604051908082528060200260200182016040528015611c79578160200160208202803683370190505b509050600085600003611c9457611c91600184614a3f565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd5760008181526004602052604090206003015473ffffffffffffffffffffffffffffffffffffffff808a16911603611d1c5780838381518110611d0157611d016149c6565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611c96565b611d4b6121d0565b6000611d5683612221565b9050611d6181613241565b611d6a81613106565b600181018054839190600090611d8b90849067ffffffffffffffff1661536d565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f3d9ee6a0fdedaee94f1c3631bf046c61c58704428408ca72e3e7ffa046884a6883611ddb3390565b6000600386015474010000000000000000000000000000000000000000900460ff166002811115611e0e57611e0e613f91565b14611e645760038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16611e67565b60005b6040805167ffffffffffffffff909416845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a2505050565b6000611eb66121d0565b6000611ec185612221565b9050611ecc81613241565b611ed581613106565b6000600382015474010000000000000000000000000000000000000000900460ff166002811115611f0857611f08613f91565b1480611f255750600181015467ffffffffffffffff428116911611155b156120a9576000600382015474010000000000000000000000000000000000000000900460ff166002811115611f5d57611f5d613f91565b03611f8f57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055611fb8565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b611fc181612400565b847f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72336000600385015474010000000000000000000000000000000000000000900460ff16600281111561201757612017613f91565b1461206d5760038401547501000000000000000000000000000000000000000000900461ffff16600090815260058501602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16612070565b60005b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520160405180910390a260ff91506121c8565b60038101547b01000000000000000000000000000000000000000000000000000000900460ff1660009081526007820160205260409020600181016120ef858783614b7f565b506003820180547b01000000000000000000000000000000000000000000000000000000900460ff1690601b61212483615302565b91906101000a81548160ff021916908360ff1602179055509250857f8beb4b470a422a5a51289e17afad55bb1f5692ed0b2ad0d71779119481d3899284878761216a3390565b60038801547501000000000000000000000000000000000000000000900461ffff16600090815260058901602052604090819020600101549051611abb959493929173ffffffffffffffffffffffffffffffffffffffff1690615321565b509392505050565b60065473ffffffffffffffffffffffffffffffffffffffff1661221f576040517f75884cda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008054821061225d576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600090815260046020526040902090565b6001600382015474010000000000000000000000000000000000000000900460ff1660028111156122a2576122a2613f91565b146122d9576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600381015461ffff750100000000000000000000000000000000000000000090910416600090815260058201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff1633146122d9576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7b0100000000000000000000000000000000000000000000000000000090910481169082161061058e576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff16156122d9576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154600282015460018301547701000000000000000000000000000000000000000000000090920460ff169173ffffffffffffffffffffffffffffffffffffffff91821691680100000000000000009091041660005b8360ff168160ff1610156125555760ff811660009081526004868101602090815260409283902083518085018552905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905294517fbeabacc800000000000000000000000000000000000000000000000000000000815293840152868416602484015260448301919091529184169063beabacc890606401600060405180830381600087803b15801561253157600080fd5b505af1158015612545573d6000803e3d6000fd5b5050505081600101915050612459565b5050505060030180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b61260e604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b8154829061261b90614ae3565b80601f016020809104026020016040519081016040528092919081815260200182805461264790614ae3565b80156126945780601f1061266957610100808354040283529160200191612694565b820191906000526020600020905b81548152906001019060200180831161267757829003601f168201915b5050509183525050600182015467ffffffffffffffff16602082015260038201547501000000000000000000000000000000000000000000810461ffff16604083015260028084015473ffffffffffffffffffffffffffffffffffffffff90811660608501528216608084015260a083019174010000000000000000000000000000000000000000900460ff169081111561273157612731613f91565b9081600281111561274457612744613f91565b905250600182015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660c0820152600382015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156127ae576127ae6145f9565b6040519080825280602002602001820160405280156127f357816020015b60408051808201909152600080825260208201528152602001906001900390816127cc5790505b5060e082015260005b8160e00151518160ff16101561289c5760ff8116600081815260048501602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260e08401518051919290918110612889576128896149c6565b60209081029190910101526001016127fc565b5060038201547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff8111156128da576128da6145f9565b60405190808252806020026020018201604052801561294e57816020015b61293b604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b8152602001906001900390816128f85790505b5061010082015260005b816101000151518160ff161015612cb05760ff8116600090815260058401602052604090208054819061298a90614ae3565b80601f01602080910402602001604051908101604052809291908181526020018280546129b690614ae3565b8015612a035780601f106129d857610100808354040283529160200191612a03565b820191906000526020600020905b8154815290600101906020018083116129e657829003601f168201915b50505050508361010001518360ff1681518110612a2257612a226149c6565b6020908102919091010151526001810154610100840151805173ffffffffffffffffffffffffffffffffffffffff9092169160ff8516908110612a6757612a676149c6565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9092169101526001810154610100840151805160ff740100000000000000000000000000000000000000009093048316928516908110612aca57612aca6149c6565b602090810291909101015190151560409091015260018101547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612b1757612b176145f9565b604051908082528060200260200182016040528015612b8057816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181612b355790505b508361010001518360ff1681518110612b9b57612b9b6149c6565b60200260200101516060018190525060005b8361010001518360ff1681518110612bc757612bc76149c6565b602002602001015160600151518160ff161015612ca65760ff8181166000908152600284016020908152604091829020825160608101845290548085161515825261010080820473ffffffffffffffffffffffffffffffffffffffff1693830193909352750100000000000000000000000000000000000000000090046affffffffffffffffffffff1692810192909252860151805191929091908616908110612c7357612c736149c6565b6020026020010151606001518260ff1681518110612c9357612c936149c6565b6020908102919091010152600101612bad565b5050600101612958565b5060038201547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612cef57612cef6145f9565b604051908082528060200260200182016040528015612d4057816020015b612d2d604080516060808201835280825260208201529081016000905290565b815260200190600190039081612d0d5790505b5061012082015260005b816101200151518160ff161015612efd5760ff8116600090815260068401602052604090819020815160608101909252805482908290612d8990614ae3565b80601f0160208091040260200160405190810160405280929190818152602001828054612db590614ae3565b8015612e025780601f10612dd757610100808354040283529160200191612e02565b820191906000526020600020905b815481529060010190602001808311612de557829003601f168201915b50505050508152602001600182018054612e1b90614ae3565b80601f0160208091040260200160405190810160405280929190818152602001828054612e4790614ae3565b8015612e945780601f10612e6957610100808354040283529160200191612e94565b820191906000526020600020905b815481529060010190602001808311612e7757829003601f168201915b505050918352505060028281015460209092019160ff1690811115612ebb57612ebb613f91565b6002811115612ecc57612ecc613f91565b815250508261012001518260ff1681518110612eea57612eea6149c6565b6020908102919091010152600101612d4a565b5060038201547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612f3d57612f3d6145f9565b604051908082528060200260200182016040528015612f9357816020015b60408051608081018252600091810182815260608083019390935281526020810191909152815260200190600190039081612f5b5790505b5061014082015260005b816101400151518160ff1610156130b05760ff80821660009081526007850160209081526040918290208251608081018452815480861615159482019485526101009004909416151560608501529183526001820180549184019161300190614ae3565b80601f016020809104026020016040519081016040528092919081815260200182805461302d90614ae3565b801561307a5780601f1061304f5761010080835404028352916020019161307a565b820191906000526020600020905b81548152906001019060200180831161305d57829003601f168201915b5050505050815250508261014001518260ff168151811061309d5761309d6149c6565b6020908102919091010152600101612f9d565b50919050565b60065473ffffffffffffffffffffffffffffffffffffffff161561221f576040517f5b3d539f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600382015474010000000000000000000000000000000000000000900460ff16600281111561313957613139613f91565b036122d9576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461221f576040517f0e5e0b5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600382015474010000000000000000000000000000000000000000900460ff16600281111561320a5761320a613f91565b146122d9576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff1633146122d9576040517fc0fc8a8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015461ffff780100000000000000000000000000000000000000000000000090910481169082161061058e576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600484016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b8560ff168160ff1610156135965760ff8082166000908152602087905260409020546affffffffffffffffffffff75010000000000000000000000000000000000000000008204169390930192161561358e5782602001516bffffffffffffffffffffffff1682111561351c57825173ffffffffffffffffffffffffffffffffffffffff166323b872dd338960010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686602001516bffffffffffffffffffffffff16866134289190614a3f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af11580156134a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c59190614ed2565b5060ff841660009081526004880160205260409020805473ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000006bffffffffffffffffffffffff8516021790555b60ff60019094019384166000908152600488016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b60010161335a565b50505050505050565b8051158015906135ce5750806001825103815181106135c0576135c06149c6565b602002602001015160000151155b156122d9576040517f1f0e3e5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7a01000000000000000000000000000000000000000000000000000090910481169082161061058e576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028083015460ff169081111561368257613682613f91565b146122d9576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160028111156136cd576136cd613f91565b036122d9576040517fe1ac484400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154750100000000000000000000000000000000000000000080820461ffff1660009081526005840160205260408120600285015460018087015490830154929573ffffffffffffffffffffffffffffffffffffffff928316956801000000000000000090920490921693920460ff9081169177010000000000000000000000000000000000000000000000900416825b8160ff168160ff161015613a205760ff8116600090815260048901602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16908201525b8360ff168560ff1610156139585760ff858116600090815260028a0160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff90811692820183905275010000000000000000000000000000000000000000009094046affffffffffffffffffffff16818401819052855193517fbeabacc80000000000000000000000000000000000000000000000000000000081529385166004850152602484019290925260448301919091529188169063beabacc890606401600060405180830381600087803b1580156138f957600080fd5b505af115801561390d573d6000803e3d6000fd5b5050505060408101516020830180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805160019690960195156139525750613958565b5061380b565b60208101516bffffffffffffffffffffffff1615613a1757805160208201516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b1580156139fe57600080fd5b505af1158015613a12573d6000803e3d6000fd5b505050505b50600101613798565b5050505060039390930180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055505050565b805460ff166122d9576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610100900460ff16156122d9576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff8116613baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6001830180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8416021790556000808052600485016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8086169082161015613de45785858260ff16818110613c8357613c836149c6565b9050606002016040016020810190613c9b919061538e565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613cf8576040517fb8f6ba5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858260ff16818110613d0d57613d0d6149c6565b60ff8416600090815260028b0160205260409020606090910292909201919050613d378282614c99565b90505085858260ff16818110613d4f57613d4f6149c6565b613d6592602060609092020190810191506153ab565b15613ddc5760ff60019094019384166000908152600489016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613c60565b5050505050505050565b600181015473ffffffffffffffffffffffffffffffffffffffff1633146122d9576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015474010000000000000000000000000000000000000000900460ff166122d9576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803560018110613baf57600080fd5b803560ff81168114613baf57600080fd5b80151581146122d957600080fd5b60008060008060808587031215613edb57600080fd5b84359350613eeb60208601613e97565b9250613ef960408601613ea6565b91506060850135613f0981613eb7565b939692955090935050565b600060208284031215613f2657600080fd5b5035919050565b6000815180845260005b81811015613f5357602081850181015186830182015201613f37565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106122d9576122d9613f91565b613fd981613fc0565b9052565b600081518084526020808501945080840160005b8381101561403c578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101613ff1565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015614133578385038a5282516080815181885261408882890182613f2d565b838a015173ffffffffffffffffffffffffffffffffffffffff9081168a8c01526040808601511515818c01526060958601518b8403878d01528051808552908d019689965091945091929091908c01905b8086101561411b5786518051151583528d81015185168e8401528501516affffffffffffffffffffff1685830152958c019560019590950194908201906140d9565b509e8b019e9950505094880194505050600101614066565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156141c257828403895281516060815181875261418182880182613f2d565b91505086820151868203888801526141998282613f2d565b91505060408083015192506141ad83613fc0565b9590950152978401979084019060010161415f565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156141c25782840389528151805180511515865286015115158686015285015160606040860181905261422581870183613f2d565b9a87019a95505050908401906001016141ed565b6000610160825181855261424f82860182613f2d565b915050602083015161426d602086018267ffffffffffffffff169052565b506040830151614283604086018261ffff169052565b5060608301516142ab606086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060808301516142d3608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08301516142e660a0860182613fd0565b5060c083015161430e60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e083015184820360e08601526143268282613fdd565b91505061010080840151858303828701526143418382614047565b92505050610120808401518583038287015261435d8382614141565b92505050610140808401518583038287015261437983826141cf565b9695505050505050565b6020815260006105606020830184614239565b60008083601f8401126143a857600080fd5b50813567ffffffffffffffff8111156143c057600080fd5b6020830191508360208260051b85010111156143db57600080fd5b9250929050565b6000806000604084860312156143f757600080fd5b83359250602084013567ffffffffffffffff81111561441557600080fd5b61442186828701614396565b9497909650939450505050565b73ffffffffffffffffffffffffffffffffffffffff811681146122d957600080fd5b8035613baf8161442e565b60008060006060848603121561447057600080fd5b833561447b8161442e565b95602085013595506040909401359392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614503577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526144f1858351614239565b945092850192908501906001016144b7565b5092979650505050505050565b60008083601f84011261452257600080fd5b50813567ffffffffffffffff81111561453a57600080fd5b6020830191508360208285010111156143db57600080fd5b60008060008060006060868803121561456a57600080fd5b85359450602086013567ffffffffffffffff8082111561458957600080fd5b61459589838a01614510565b909650945060408801359150808211156145ae57600080fd5b818801915088601f8301126145c257600080fd5b8135818111156145d157600080fd5b8960206060830285010111156145e657600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561466f5761466f6145f9565b604052919050565b6000602080838503121561468a57600080fd5b823567ffffffffffffffff808211156146a257600080fd5b818501915085601f8301126146b657600080fd5b8135818111156146c8576146c86145f9565b8060051b91506146d9848301614628565b81815291830184019184810190888411156146f357600080fd5b938501935b83851015614711578435825293850193908501906146f8565b98975050505050505050565b60008060008060006080868803121561473557600080fd5b8535945061474560208701613ea6565b935060408601356003811061475957600080fd5b9250606086013567ffffffffffffffff81111561477557600080fd5b61478188828901614510565b969995985093965092949392505050565b6000806000604084860312156147a757600080fd5b83359250602084013567ffffffffffffffff8111156147c557600080fd5b61442186828701614510565b6000806000606084860312156147e657600080fd5b833592506147f660208501613e97565b915061480460408501613ea6565b90509250925092565b803567ffffffffffffffff81168114613baf57600080fd5b60008060008060008060008060a0898b03121561484157600080fd5b883567ffffffffffffffff8082111561485957600080fd5b6148658c838d01614510565b909a50985088915061487960208c0161480d565b975060408b013591508082111561488f57600080fd5b818b0191508b601f8301126148a357600080fd5b8135818111156148b257600080fd5b8c60208260061b85010111156148c757600080fd5b60208301975095506148db60608c01614450565b945060808b01359150808211156148f157600080fd5b506148fe8b828c01614396565b999c989b5096995094979396929594505050565b803561ffff81168114613baf57600080fd5b6000806040838503121561493757600080fd5b8235915061494760208401614912565b90509250929050565b6000806040838503121561496357600080fd5b823591506149476020840161480d565b60018110613fd957613fd9613f91565b608081016149918287614973565b60ff94909416602082015273ffffffffffffffffffffffffffffffffffffffff92831660408201529116606090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215614a0757600080fd5b61056082614912565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115614a5257614a52614a10565b92915050565b6affffffffffffffffffffff811681146122d957600080fd5b600060608284031215614a8357600080fd5b6040516060810181811067ffffffffffffffff82111715614aa657614aa66145f9565b6040528235614ab481613eb7565b81526020830135614ac48161442e565b60208201526040830135614ad781614a58565b60408201529392505050565b600181811c90821680614af757607f821691505b6020821081036130b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f821115614b7a57600081815260208120601f850160051c81016020861015614b575750805b601f850160051c820191505b81811015614b7657828155600101614b63565b5050505b505050565b67ffffffffffffffff831115614b9757614b976145f9565b614bab83614ba58354614ae3565b83614b30565b6000601f841160018114614bfd5760008515614bc75750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b17835561076a565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015614c4c5786850135825560209485019460019092019101614c2c565b5086821015614c87577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135614ca481613eb7565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff1691821783556020840135614ce28161442e565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff00000000000000000000000000000000000000000081848285161717855560408601359250614d3983614a58565b921760a89190911b90911617905550565b600061ffff808316818103614d6157614d61614a10565b6001019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b8581101561403c578135614dd781613eb7565b1515875281830135614de88161442e565b73ffffffffffffffffffffffffffffffffffffffff1687840152604082810135614e1181614a58565b6affffffffffffffffffffff16908801526060968701969190910190600101614dc4565b61ffff8816815260a060208201526000614e5360a08301888a614d6b565b8281036040840152614e66818789614db4565b91505073ffffffffffffffffffffffffffffffffffffffff808516606084015280841660808401525098975050505050505050565b6bffffffffffffffffffffffff811681146122d957600080fd5b600060208284031215614ec757600080fd5b813561056081614e9b565b600060208284031215614ee457600080fd5b815161056081613eb7565b6bffffffffffffffffffffffff818116838216019080821115610ea257610ea2614a10565b6040808252810183905260008460608301825b86811015614f5c578235614f3a81614e9b565b6bffffffffffffffffffffffff16825260209283019290910190600101614f27565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60ff87168152614f9586613fc0565b85602082015260a060408201526000614fb260a083018688614d6b565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b604081526000614ff6604083018587614d6b565b905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60a0810161502a8288614973565b60ff95909516602082015273ffffffffffffffffffffffffffffffffffffffff93841660408201529183166060830152909116608090910152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361509957615099614a10565b5060010190565b6000602082840312156150b257600080fd5b81356105608161442e565b81356150c88161442e565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff00000000000000000000000000000000000000008181845416178355602084013561511881614e9b565b60a01b1617905550565b60a08152600061513660a08301898b614d6b565b602067ffffffffffffffff89168185015260408483038186015282888452828401905089935060005b898110156151b95784356151728161442e565b73ffffffffffffffffffffffffffffffffffffffff1682528484013561519781614e9b565b6bffffffffffffffffffffffff1682850152938201939082019060010161515f565b5073ffffffffffffffffffffffffffffffffffffffff8816606087015293506151e192505050565b73ffffffffffffffffffffffffffffffffffffffff83166080830152614711565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261523657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261527557600080fd5b83018035915067ffffffffffffffff82111561529057600080fd5b60200191506060810236038213156143db57600080fd5b61ffff8616815260a06020820152600060a082015260c0604082015260006152d360c083018688614db4565b73ffffffffffffffffffffffffffffffffffffffff948516606084015292909316608090910152949350505050565b600060ff821660ff810361531857615318614a10565b60010192915050565b60ff8616815260806020820152600061533e608083018688614d6b565b73ffffffffffffffffffffffffffffffffffffffff948516604084015292909316606090910152949350505050565b67ffffffffffffffff818116838216019080821115610ea257610ea2614a10565b6000602082840312156153a057600080fd5b813561056081614a58565b6000602082840312156153bd57600080fd5b813561056081613eb756fea26469706673582212203d91049895ea252ec5c8581e4e3e6f81a24ac31a8b0d8fa5848f29dd9df4b86a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applicationIds": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "params": {
          "_execute": "If the request should also be executed in this transaction.",
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_manager": "Who will manage the task (become the manager).",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "editMetadata(uint256,string)": {
        "details": "This metadata update might change the task completely. Show a warning to people who applied before the change.",
        "params": {
          "_newMetadata": "New metadata of the task.",
          "_taskId": "Id of the task."
        }
      },
      "executeRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "extendDeadline(uint256,uint64)": {
        "params": {
          "_extension": "How much to extend the deadline by.",
          "_taskId": "Id of the task."
        }
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "params": {
          "_executor": "The executor to fetch tasks of.",
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getManagingTasks(address,uint256,uint256)": {
        "params": {
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_manager": "The manager to fetch tasks of.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "increaseBudget(uint256,uint96[])": {
        "params": {
          "_increase": "How much to increase each tokens amount by.",
          "_taskId": "Id of the task."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submissionId": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_applicationId": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "notice": "Create a new task."
      },
      "editMetadata(uint256,string)": {
        "notice": "Edit the metadata of a task."
      },
      "executeRequest(uint256,uint8,uint8)": {
        "notice": "Exectued an accepted request, allows anyone to pay for the gas costs of the execution."
      },
      "extendDeadline(uint256,uint64)": {
        "notice": "Extend the deadline of a task."
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of an executor. Most recent ones first."
      },
      "getManagingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of a manager. Most recent ones first."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "increaseBudget(uint256,uint96[])": {
        "notice": "Increase the budget of the task."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "taskStatistics()": {
        "notice": "Retrieves the current statistics of created tasks."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26174,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26177,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "openTasks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 26179,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "takenTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26181,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "successfulTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26187,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Task)25920_storage)"
      },
      {
        "astId": 26190,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "escrowImplementation",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 26193,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "disabler",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)25595": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)19668": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)25850": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)25875": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)25828_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)25828_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)25920_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)25920_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)25871_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)25871_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)25807_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)25807_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)25814_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)25814_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)25858_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)25858_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)25828_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 25816,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25818,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25820,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 25822,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25827,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)25814_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(CancelTaskRequest)25871_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 25868,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "request",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Request)25865_storage"
          },
          {
            "astId": 25870,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC20Transfer)25807_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 25804,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)19668"
          },
          {
            "astId": 25806,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)25865_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Request",
        "members": [
          {
            "astId": 25862,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25864,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)25814_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 25809,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25811,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25813,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)25858_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 25852,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25854,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "feedback",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 25857,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(SubmissionJudgement)25850"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Task)25920_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 25877,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25879,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25882,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 8,
            "slot": "1",
            "type": "t_contract(Escrow)25595"
          },
          {
            "astId": 25884,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 25886,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "manager",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 25889,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(TaskState)25875"
          },
          {
            "astId": 25891,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 21,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 25893,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 23,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25895,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 24,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 25897,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 26,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25899,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 27,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25904,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)25807_storage)"
          },
          {
            "astId": 25909,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint16,t_struct(Application)25828_storage)"
          },
          {
            "astId": 25914,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint8,t_struct(Submission)25858_storage)"
          },
          {
            "astId": 25919,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)25871_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
