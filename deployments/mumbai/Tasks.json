{
  "address": "0xC5489f4F9DadB81736A19b5571ED02417D969827",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProposer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestNotAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "application",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        }
      ],
      "name": "ChangeScopeRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        }
      ],
      "name": "DropExecutorRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        }
      ],
      "name": "RequestExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "preapproved",
          "type": "tuple[]"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applications",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "_preapprove",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getExecutingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getProposingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submission",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_application",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "open",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successful",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7adf7129599a4cfee872e4448b9646038f7b07d5f56ae546fda34b9e78427ec",
  "receipt": {
    "to": null,
    "from": "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "contractAddress": "0xC5489f4F9DadB81736A19b5571ED02417D969827",
    "transactionIndex": 9,
    "gasUsed": "3924447",
    "logsBloom": "0x
    "blockHash": "0xf0ede3d282ff63c3e5d7b4786aa532ae887cea47d0fa957274d125b92db7d796",
    "transactionHash": "0xf7adf7129599a4cfee872e4448b9646038f7b07d5f56ae546fda34b9e78427ec",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 38177872,
        "transactionHash": "0xf7adf7129599a4cfee872e4448b9646038f7b07d5f56ae546fda34b9e78427ec",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d0bf7533695f60000000000000000000000000000000000000000000000000dd7b74c6ff9ce8c000000000000000000000000000000000000000000000044755ab7d9b333f1f90000000000000000000000000000000000000000000000000dbaab551cc338960000000000000000000000000000000000000000000000447577c3d1066a87ef",
        "logIndex": 17,
        "blockHash": "0xf0ede3d282ff63c3e5d7b4786aa532ae887cea47d0fa957274d125b92db7d796"
      }
    ],
    "blockNumber": 38177872,
    "cumulativeGasUsed": "4636583",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c7f95db3c0bcd683e4b79aa79c902147",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"application\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"name\":\"ChangeScopeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"name\":\"DropExecutorRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"preapproved\",\"type\":\"tuple[]\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applications\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"_preapprove\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getExecutingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getProposingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submission\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_application\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successful\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applications\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"params\":{\"_execute\":\"If the request should also be executed in this transaction.\",\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_manager\":\"Who will manage the task (become the proposer).\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"executeRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"getExecutingTasks(address,uint256,uint256)\":{\"params\":{\"_executor\":\"The executor to fetch tasks of.\",\"_fromTaskId\":\"What taskId to start from.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getProposingTasks(address,uint256,uint256)\":{\"params\":{\"_fromTaskId\":\"What taskId to start from.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\",\"_proposer\":\"The proposer to fetch tasks of.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submission\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_application\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"notice\":\"Create a new task.\"},\"executeRequest(uint256,uint8,uint8)\":{\"notice\":\"Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\"},\"getExecutingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of an executor. Most recent ones first.\"},\"getProposingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of a proposer. Most recent ones first.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"taskStatistics()\":{\"notice\":\"Retrieves the current statistics of created tasks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Tasks/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    function __Escrow_init() external {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n        \\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x460a4d880edb618af736b39cfc0dd7064d47afdf312f77d9cf6240d938c52a70\",\"license\":\"None\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Escrow } from \\\"./Escrow.sol\\\";\\r\\n\\r\\ninterface ITasks {\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotProposer();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget(uint8 index);\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n    error RequestNotAccepted();\\r\\n    error RequestAlreadyExecuted();\\r\\n\\r\\n    event TaskCreated(uint256 taskId, string metadata, uint64 deadline, ERC20Transfer[] budget, address manager, PreapprovedApplication[] preapproved);\\r\\n    event ApplicationCreated(uint256 taskId, uint16 applicationId, string metadata, Reward[] reward, address proposer, address applicant);\\r\\n    event ApplicationAccepted(uint256 taskId, uint16 application, address proposer, address applicant);\\r\\n    event TaskTaken(uint256 taskId, uint16 applicationId, address proposer, address executor);\\r\\n    event SubmissionCreated(uint256 taskId, uint8 submissionId, string metadata, address proposer, address executor);\\r\\n    event SubmissionReviewed(uint256 taskId, uint8 submissionId, SubmissionJudgement judgement, string feedback, address proposer, address executor);\\r\\n    event TaskCompleted(uint256 taskId, address proposer, address executor);\\r\\n\\r\\n    // TODO: Maybe add proposer and executor to the following events\\r\\n    event ChangeScopeRequested(uint256 taskId, uint8 requestId, string metadata, uint64 deadline, Reward[] reward);\\r\\n    event DropExecutorRequested(uint256 taskId, uint8 requestId, string explanation);\\r\\n    event CancelTaskRequested(uint256 taskId, uint8 requestId, string explanation);\\r\\n    event RequestAccepted(uint256 taskId, RequestType requestType, uint8 requestId);\\r\\n    event RequestExecuted(uint256 taskId, RequestType requestType, uint8 requestId, address by);\\r\\n    event TaskCancelled(uint256 taskId);\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to; // Might change this to index instead of address array, will do some gas testing\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the proposer.\\r\\n    /// @param reward How much rewards the applicant wants for completion.\\r\\n    struct Application {\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice For approving people on task creation (they are not required to make an application)\\r\\n    struct PreapprovedApplication {\\r\\n        address applicant;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement { None, Accepted, Rejected }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    struct Submission {\\r\\n        SubmissionJudgement judgement;\\r\\n    }\\r\\n\\r\\n    enum RequestType { ChangeScope, DropExecutor, CancelTask }\\r\\n\\r\\n    /// @notice A container for a request to change the scope of a task.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    /// @param deadline New deadline for the task.\\r\\n    /// @param reward New reward for the executor of the task.\\r\\n    struct ChangeScopeRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n        uint64 deadline;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainChangeScopeRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n        uint64 deadline;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to drop the executor of a task.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct DropExecutorRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct CancelTaskRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    enum TaskState { Open, Taken, Closed }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param proposer Who has created the task.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    struct Task {\\r\\n        uint64 deadline;\\r\\n        Escrow escrow;\\r\\n\\r\\n        address proposer;\\r\\n        TaskState state;\\r\\n        // bool changed;\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        // uint8 changeScopeRequestCount;\\r\\n        // uint8 dropExecutorRequestCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        // mapping(uint8 => ChangeScopeRequest) changeScopeRequests;\\r\\n        // mapping(uint8 => DropExecutorRequest) dropExecutorRequests;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        uint64 deadline;\\r\\n        uint16 executorApplication;\\r\\n        address proposer;\\r\\n        TaskState state;\\r\\n        Escrow escrow;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        // OffChainChangeScopeRequest[] changeScopeRequests;\\r\\n        // DropExecutorRequest[] dropExecutorRequests;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n    \\r\\n    /// @notice Retrieves the current statistics of created tasks.\\r\\n    function taskStatistics() external view returns (uint256 openTasks, uint256 takenTasks, uint256 successfulTasks);\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n    \\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of a proposer. Most recent ones first.\\r\\n    /// @param _proposer The proposer to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getProposingTasks(\\r\\n        address _proposer,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\\r\\n    /// @param _executor The executor to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param _manager Who will manage the task (become the proposer).\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId);\\r\\n    \\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId);\\r\\n    \\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applications Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applications\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _application Index of application you made that has been accepted.\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _application\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n    \\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submission Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submission,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Creates a request to change the scope.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New description of the task. (IPFS hash)\\r\\n    /// @param _newDeadline New deadline of the task.\\r\\n    /// @param _newReward New reward of the task.\\r\\n    // function changeScope(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _newMetadata,\\r\\n    //     uint64 _newDeadline,\\r\\n    //     Reward[] calldata _newReward\\r\\n    // ) external returns (uint8 changeTaskRequestId);\\r\\n\\r\\n    /// @notice Drops the current executor of the task\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the executor should be dropped.\\r\\n    // function dropExecutor(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _explanation\\r\\n    // ) external returns (uint8 dropExecutorRequestId);\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    /// @param _execute If the request should also be executed in this transaction.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x7e701b2afa68861f535b96df8e9671cfff1e88050c2e29002f3feea4d2914ec3\",\"license\":\"None\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITasks, IERC20, Escrow } from \\\"./ITasks.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ncontract Tasks is Context, ITasks {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice Various statistics about total tasks.\\r\\n    uint256 private openTasks;\\r\\n    uint256 private takenTasks;\\r\\n    uint256 private successfulTasks;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address private escrowImplementation;\\r\\n\\r\\n    constructor() {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function taskStatistics() external view returns (uint256 open, uint256 taken, uint256 successful) {\\r\\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.proposer = task.proposer;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        offchainTask.applications = new OffChainApplication[](task.applicationCount);\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n            offchainTask.applications[i].reward = new Reward[](application.rewardCount);\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // offchainTask.changeScopeRequests = new OffChainChangeScopeRequest[](task.changeScopeRequestCount);\\r\\n        // for (uint8 i; i < offchainTask.changeScopeRequests.length; ) {\\r\\n        //     offchainTask.changeScopeRequests[i].metadata = task.changeScopeRequests[i].metadata;\\r\\n        //     offchainTask.changeScopeRequests[i].accepted = task.changeScopeRequests[i].accepted;\\r\\n        //     offchainTask.changeScopeRequests[i].deadline = task.changeScopeRequests[i].deadline;\\r\\n        //     offchainTask.changeScopeRequests[i].reward = new Reward[](task.changeScopeRequests[i].rewardCount);\\r\\n        //     for (uint8 j; j < offchainTask.changeScopeRequests[i].reward.length; ) {\\r\\n        //         offchainTask.changeScopeRequests[i].reward[j] = task.changeScopeRequests[i].reward[j];\\r\\n        //         unchecked {\\r\\n        //             ++j;\\r\\n        //         }\\r\\n        //     }\\r\\n        //     unchecked {\\r\\n        //         ++i;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        // offchainTask.dropExecutorRequests = new DropExecutorRequest[](task.dropExecutorRequestCount);\\r\\n        // for (uint8 i; i < offchainTask.dropExecutorRequests.length; ) {\\r\\n        //     offchainTask.dropExecutorRequests[i] = task.dropExecutorRequests[i];\\r\\n        //     unchecked {\\r\\n        //         ++i;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](task.cancelTaskRequestCount);\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](_taskIds.length);\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getProposingTasks(\\r\\n        address _proposer,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 proposerTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\\r\\n            if (tasks[i].proposer == _proposer) {\\r\\n                taskIndexes[proposerTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++proposerTasksCount;\\r\\n                }\\r\\n                if (proposerTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, proposerTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 executorTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\\r\\n            if (tasks[i].state != TaskState.Open && tasks[i].applications[tasks[i].executorApplication].applicant == _executor) {\\r\\n                taskIndexes[executorTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++executorTasksCount;\\r\\n                }\\r\\n                if (executorTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId) {\\r\\n        unchecked {\\r\\n            taskId = taskCounter++;\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.deadline = _deadline;\\r\\n        task.budgetCount = uint8(_budget.length);\\r\\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\\r\\n        escrow.__Escrow_init();\\r\\n        task.escrow = escrow;\\r\\n        for (uint8 i; i < _budget.length; ) {\\r\\n            _budget[i].tokenContract.transferFrom(_msgSender(), address(escrow), _budget[i].amount);\\r\\n            task.budget[i] = _budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        task.proposer = _manager;\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n        unchecked {\\r\\n            ++openTasks;\\r\\n        }\\r\\n\\r\\n        if (_preapprove.length > 0) {\\r\\n            task.applicationCount = uint16(_preapprove.length);\\r\\n            for (uint16 i; i < _preapprove.length; ) {\\r\\n                Application storage application = task.applications[i];\\r\\n                application.applicant = _preapprove[i].applicant;\\r\\n                application.accepted = true;\\r\\n                _setReward(task, application, _preapprove[i].reward);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TaskCreated(taskId, _metadata, _deadline, _budget, _manager, _preapprove);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n\\r\\n        Application storage application = task.applications[task.applicationCount];\\r\\n        application.applicant = _msgSender();\\r\\n        _setReward(task, application, _reward);\\r\\n        unchecked {\\r\\n            applicationId = task.applicationCount++;\\r\\n        }\\r\\n\\r\\n        emit ApplicationCreated(_taskId, applicationId, _metadata, _reward, task.proposer, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applications\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n        if (task.proposer != _msgSender()) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        for (uint i; i < _applications.length; ) {\\r\\n            if (_applications[i] >= task.applicationCount) {\\r\\n                revert ApplicationDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            task.applications[_applications[i]].accepted = true;\\r\\n            emit ApplicationAccepted(_taskId, uint16(i), _msgSender(), task.applications[_applications[i]].applicant);\\r\\n            \\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _application\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n        if (_application >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Application storage application_ = task.applications[_application];\\r\\n        if (application_.applicant != _msgSender()) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n        if (!application_.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n\\r\\n        task.executorApplication = _application;\\r\\n\\r\\n        task.state = TaskState.Taken;\\r\\n        unchecked {\\r\\n            --openTasks;\\r\\n            ++takenTasks;\\r\\n        }\\r\\n\\r\\n        emit TaskTaken(_taskId, _application, task.proposer, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.applications[task.executorApplication].applicant != _msgSender()) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n\\r\\n        unchecked { \\r\\n            submissionId = task.submissionCount++;\\r\\n        }\\r\\n\\r\\n        emit SubmissionCreated(_taskId, submissionId, _metadata, task.proposer, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submission,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.proposer != _msgSender()) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n        if (_submission >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Submission storage submission_ = task.submissions[_submission];\\r\\n        if (submission_.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n        submission_.judgement = _judgement;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            Application storage executor = task.applications[task.executorApplication];\\r\\n            address proposer = _msgSender(); // task.proposer;\\r\\n            Escrow escrow = task.escrow;\\r\\n\\r\\n            uint8 j;\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n            uint8 rewardCount = executor.rewardCount;\\r\\n            for (uint8 i; i < rewardCount; ) {\\r\\n                Reward memory reward = executor.reward[i];\\r\\n                escrow.transfer(erc20Transfer.tokenContract, executor.applicant, reward.amount);\\r\\n                unchecked {\\r\\n                    erc20Transfer.amount -= reward.amount;\\r\\n                }\\r\\n\\r\\n                if (reward.nextToken) {\\r\\n                    if (erc20Transfer.amount > 0) {\\r\\n                        escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n                    }\\r\\n\\r\\n                    unchecked {\\r\\n                        erc20Transfer = task.budget[++j];\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            uint8 budgetCount = task.budgetCount;\\r\\n            while (j < budgetCount) {\\r\\n                escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n                \\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            task.state = TaskState.Closed;\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++successfulTasks;\\r\\n            }\\r\\n\\r\\n            emit TaskCompleted(_taskId, proposer, executor.applicant);\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(_taskId, _submission, _judgement, _feedback, _msgSender(), task.applications[task.executorApplication].applicant);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    // function changeScope(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _newMetadata,\\r\\n    //     uint64 _newDeadline,\\r\\n    //     Reward[] calldata _newReward\\r\\n    // ) external returns (uint8 changeTaskRequestId) {\\r\\n        // if (_taskId >= taskCounter) {\\r\\n        //     revert TaskDoesNotExist();\\r\\n        // }\\r\\n\\r\\n        // Task storage task = tasks[_taskId];\\r\\n        // if (task.state != TaskState.Taken) {\\r\\n        //     revert TaskNotTaken();\\r\\n        // }\\r\\n        // if (task.proposer != _msgSender()) {\\r\\n        //     revert NotProposer();\\r\\n        // }\\r\\n\\r\\n        // ChangeScopeRequest storage request = task.changeScopeRequests[task.changeScopeRequestCount];\\r\\n        // request.metadata = _newMetadata;\\r\\n        // request.timestamp = uint64(block.timestamp);\\r\\n        // request.deadline = _newDeadline;\\r\\n        // request.rewardCount = uint8(_newReward.length);\\r\\n\\r\\n        // uint8 j;\\r\\n        // ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        // uint256 needed;\\r\\n        // for (uint8 i; i < uint8(_newReward.length); ) {\\r\\n        //     unchecked {\\r\\n        //         needed += _newReward[i].amount;\\r\\n        //     }\\r\\n\\r\\n        //     request.reward[i] = _newReward[i];\\r\\n\\r\\n        //     if (_newReward[i].nextToken) {\\r\\n        //         if (needed > erc20Transfer.amount) {\\r\\n        //             // Excisting budget in escrow doesnt cover the new reward\\r\\n        //             erc20Transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), needed - erc20Transfer.amount);\\r\\n        //         }\\r\\n\\r\\n        //         needed = 0;\\r\\n        //         unchecked {\\r\\n        //             erc20Transfer = task.budget[++j];\\r\\n        //         }\\r\\n        //     }\\r\\n\\r\\n        //     unchecked {\\r\\n        //         ++i;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        // unchecked {\\r\\n        //     changeTaskRequestId = task.changeScopeRequestCount++;\\r\\n        // }\\r\\n        \\r\\n        // emit ChangeScopeRequested(_taskId, changeTaskRequestId, _msgSender(), _newMetadata, _newDeadline, _newReward);\\r\\n    // }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    // function dropExecutor(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _explanation\\r\\n    // ) external returns (uint8 dropExecutorRequestId) {\\r\\n        // if (_taskId >= taskCounter) {\\r\\n        //     revert TaskDoesNotExist();\\r\\n        // }\\r\\n\\r\\n        // Task storage task = tasks[_taskId];\\r\\n        // if (task.state != TaskState.Taken) {\\r\\n        //     revert TaskNotTaken();\\r\\n        // }\\r\\n        // if (task.proposer != _msgSender()) {\\r\\n        //     revert NotProposer();\\r\\n        // }\\r\\n\\r\\n        // DropExecutorRequest storage request = task.dropExecutorRequests[task.dropExecutorRequestCount];\\r\\n        // request.explanation = _explanation;\\r\\n        // request.timestamp = uint64(block.timestamp);\\r\\n        // unchecked {\\r\\n        //     dropExecutorRequestId = task.dropExecutorRequestCount++;\\r\\n        // }\\r\\n\\r\\n        // emit DropExecutorRequested(_taskId, dropExecutorRequestId, _msgSender(), _explanation);\\r\\n    // }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.proposer != _msgSender()) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Closed) {\\r\\n            revert TaskClosed();\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Open || task.deadline <= uint64(block.timestamp)) {\\r\\n            // Task is open or deadline past\\r\\n            _refundProposer(task);\\r\\n            emit TaskCancelled(_taskId);\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        }\\r\\n        else {\\r\\n            // Task is taken and deadline has not past\\r\\n            unchecked {\\r\\n                cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n            }\\r\\n\\r\\n            emit CancelTaskRequested(_taskId, cancelTaskRequestId, _explanation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.applications[task.executorApplication].applicant != _msgSender()) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n        \\r\\n        if (_requestType == RequestType.ChangeScope) {\\r\\n            // if (_requestId >= task.changeScopeRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n\\r\\n            // ChangeScopeRequest storage request = task.changeScopeRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.metadata = request.metadata;\\r\\n            // task.deadline = request.deadline;\\r\\n            // task.changed = true;\\r\\n            // Application storage executor = task.applications[task.executorApplication];\\r\\n            // uint8 rewardCount = request.rewardCount;\\r\\n            // executor.rewardCount = rewardCount;\\r\\n            // for (uint8 i; i < rewardCount; ) {\\r\\n            //     executor.reward[i] = request.reward[i];\\r\\n\\r\\n            //     unchecked {\\r\\n            //         ++i;\\r\\n            //     }\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else if (_requestType == RequestType.DropExecutor) {\\r\\n            // if (_requestId >= task.dropExecutorRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n            \\r\\n            // DropExecutorRequest storage request = task.dropExecutorRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.submissionCount = 0;\\r\\n            // if (task.changed) {\\r\\n            //     task.applicationCount = 0;\\r\\n            //     task.changed = false; // hmm maybe questionable, would be better in case the new executor is dropped again and the task is not changed again, but does not make sense ux wise\\r\\n            // }\\r\\n\\r\\n            // task.state = TaskState.Open;\\r\\n            // unchecked {\\r\\n            //     --takenTasks;\\r\\n            //     ++openTasks;\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else { // if (_requestType == RequestType.CancelTask) {\\r\\n            if (_requestId >= task.cancelTaskRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[_requestId];\\r\\n            if (request.accepted) {\\r\\n                revert RequestAlreadyAccepted();\\r\\n            }\\r\\n\\r\\n            if (_execute) {\\r\\n                // use executeRequest here? (more gas due to all the checks...)\\r\\n                _refundProposer(task);\\r\\n                emit TaskCancelled(_taskId);\\r\\n                request.executed = true;\\r\\n            }\\r\\n\\r\\n            request.accepted = true;\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(_taskId, _requestType, _requestId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        \\r\\n        if (_requestType == RequestType.ChangeScope) {\\r\\n            // if (_requestId >= task.changeScopeRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n\\r\\n            // ChangeScopeRequest storage request = task.changeScopeRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.metadata = request.metadata;\\r\\n            // task.deadline = request.deadline;\\r\\n            // task.changed = true;\\r\\n            // Application storage executor = task.applications[task.executorApplication];\\r\\n            // uint8 rewardCount = request.rewardCount;\\r\\n            // executor.rewardCount = rewardCount;\\r\\n            // for (uint8 i; i < rewardCount; ) {\\r\\n            //     executor.reward[i] = request.reward[i];\\r\\n\\r\\n            //     unchecked {\\r\\n            //         ++i;\\r\\n            //     }\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else if (_requestType == RequestType.DropExecutor) {\\r\\n            // if (_requestId >= task.dropExecutorRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n            \\r\\n            // DropExecutorRequest storage request = task.dropExecutorRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.submissionCount = 0;\\r\\n            // if (task.changed) {\\r\\n            //     task.applicationCount = 0;\\r\\n            //     task.changed = false; // hmm maybe questionable, would be better in case the new executor is dropped again and the task is not changed again, but does not make sense ux wise\\r\\n            // }\\r\\n\\r\\n            // task.state = TaskState.Open;\\r\\n            // unchecked {\\r\\n            //     --takenTasks;\\r\\n            //     ++openTasks;\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else { // if (_requestType == RequestType.CancelTask) {\\r\\n            if (_requestId >= task.cancelTaskRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[_requestId];\\r\\n            if (!request.accepted) {\\r\\n                revert RequestNotAccepted();\\r\\n            }\\r\\n            if (request.executed) {\\r\\n                revert RequestAlreadyExecuted();\\r\\n            }\\r\\n\\r\\n            _refundProposer(task);\\r\\n            emit TaskCancelled(_taskId);\\r\\n            request.executed = true;\\r\\n        }\\r\\n\\r\\n        emit RequestExecuted(_taskId, _requestType, _requestId, _msgSender());\\r\\n    }\\r\\n\\r\\n    function _setReward(\\r\\n        Task storage task,\\r\\n        Application storage application, \\r\\n        Reward[] calldata _reward\\r\\n    ) internal {\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 alreadyReserved;\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\\r\\n            unchecked {\\r\\n                alreadyReserved += _reward[i].amount;\\r\\n            }\\r\\n            if (alreadyReserved > erc20Transfer.amount) {\\r\\n                revert RewardAboveBudget(i);\\r\\n            }\\r\\n\\r\\n            application.reward[i] = _reward[i];\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                alreadyReserved = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _refundProposer(Task storage task) internal {\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        address proposer = task.proposer;\\r\\n        Escrow escrow = task.escrow;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Open) {\\r\\n            unchecked {\\r\\n                --openTasks;\\r\\n            }\\r\\n        } else if (task.state == TaskState.Taken) {\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n            }\\r\\n        }\\r\\n        task.state = TaskState.Closed;\\r\\n\\r\\n        // Possibly could do some assembly trickery here to get the index of the task and emit TaskCancelled\\r\\n    }\\r\\n}\",\"keccak256\":\"0x8bf5b54b8acdec1b971aaf4ff9a8e632d15392778c9c14fbf8f711506f13045f\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620000209062000064565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b039290921691909117905562000072565b6102a9806200438e83390190565b61430c80620000826000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c806376645a9311610097578063a5e99c4e11610066578063a5e99c4e14610221578063b685504b14610246578063b6cb58a514610259578063ecb8adae1461026157600080fd5b806376645a93146101c757806377b98419146101da57806391a29225146101ed578063978a2b531461020057600080fd5b80633f561a40116100d35780633f561a40146101575780633f74d41d1461016a57806352a63d491461017d5780635ac1d773146101a357600080fd5b8062f9467d146100f95780630353ce601461010e5780631d65e77e14610137575b600080fd5b61010c6101073660046131f5565b610274565b005b61012161011c366004613273565b610567565b60405161012e91906135fd565b60405180910390f35b61014a61014536600461367d565b610697565b60405161012e9190613696565b61010c6101653660046136fc565b610e7e565b610121610178366004613273565b611159565b61019061018b36600461378a565b6112e2565b60405161ffff909116815260200161012e565b6001546002546003546040805193845260208401929092529082015260600161012e565b6101216101d5366004613860565b6114c8565b61010c6101e836600461393c565b6115d9565b61010c6101fb3660046139ad565b611e13565b61021361020e3660046139eb565b612095565b60405190815260200161012e565b61023461022f366004613ade565b612559565b60405160ff909116815260200161012e565b61010c610254366004613b2f565b61274e565b600054610213565b61023461026f366004613ade565b612a2d565b60005484106102af576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084815260046020526040902060018082015474010000000000000000000000000000000000000000900460ff1660028111156102ef576102ef6132a8565b14610326576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015461ffff750100000000000000000000000000000000000000000090910416600090815260038201602052604090205473ffffffffffffffffffffffffffffffffffffffff1633146103a8576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460028111156103bc576103bc6132a8565b146105255760018460028111156103d5576103d56132a8565b1461052557600181015460ff7b0100000000000000000000000000000000000000000000000000000090910481169084161061043d576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff8084166000908152600583016020526040902080549091161561048e576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82156104fb5761049d82612c65565b6040518681527fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed69060200160405180910390a180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001781555b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b7ff8b7f8bb91b1d7e729d781b5a50d92293ee708dddedd69a888aaa707c6be092385858560405161055893929190613b5b565b60405180910390a15050505050565b600080546060918167ffffffffffffffff81111561058757610587613831565b6040519080825280602002602001820160405280156105b0578160200160208202803683370190505b5090506000856000036105cb576105c8600184613b82565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461067a5760008181526004602052604090206001015473ffffffffffffffffffffffffffffffffffffffff808a16911603610653578083838151811061063857610638613bc2565b6020026020010181815250508160010191508582031561067a575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016105cd565b50808303825103825261068c826114c8565b979650505050505050565b6106fc60408051610120810182526000808252602082018190529181018290529060608201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b6000548210610737576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260046020908152604091829020805467ffffffffffffffff16845260018101547501000000000000000000000000000000000000000000810461ffff169285019290925273ffffffffffffffffffffffffffffffffffffffff821692840192909252606083019074010000000000000000000000000000000000000000900460ff1660028111156107cf576107cf6132a8565b908160028111156107e2576107e26132a8565b905250805468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff166080830152600181015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561084957610849613831565b60405190808252806020026020018201604052801561088e57816020015b60408051808201909152600080825260208201528152602001906001900390816108675790505b5060a083015260005b8260a00151518160ff1610156109375760ff8116600081815260028401602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260a0850151805191929091811061092457610924613bc2565b6020908102919091010152600101610897565b5060018101547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff81111561097557610975613831565b6040519080825280602002602001820160405280156109c257816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816109935790505b5060c083015260005b8260c00151518160ff161015610c625760ff811660008181526003840160205260409020805460c08601518051929373ffffffffffffffffffffffffffffffffffffffff909216929091908110610a2457610a24613bc2565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff9091169052805460c0850151805160ff740100000000000000000000000000000000000000009093048316928516908110610a8157610a81613bc2565b60209081029190910181015191151591015280547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610ac957610ac9613831565b604051908082528060200260200182016040528015610b3257816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610ae75790505b508460c001518360ff1681518110610b4c57610b4c613bc2565b60200260200101516040018190525060005b8460c001518360ff1681518110610b7757610b77613bc2565b602002602001015160400151518160ff161015610c585760ff81811660009081526001840160209081526040918290208251606081018452905480851615158252610100810473ffffffffffffffffffffffffffffffffffffffff169282019290925275010000000000000000000000000000000000000000009091046affffffffffffffffffffff169181019190915260c0870151805191929091908616908110610c2557610c25613bc2565b6020026020010151604001518260ff1681518110610c4557610c45613bc2565b6020908102919091010152600101610b5e565b50506001016109cb565b5060018101547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610ca157610ca1613831565b604051908082528060200260200182016040528015610ce157816020015b604080516020810190915260008152815260200190600190039081610cbf5790505b5060e083015260005b8260e00151518160ff161015610d745760ff80821660009081526004840160209081526040918290208251918201909252815490928391166002811115610d3357610d336132a8565b6002811115610d4457610d446132a8565b815250508360e001518260ff1681518110610d6157610d61613bc2565b6020908102919091010152600101610cea565b5060018101547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610db457610db4613831565b604051908082528060200260200182016040528015610df957816020015b6040805180820190915260008082526020820152815260200190600190039081610dd25790505b5061010083015260005b826101000151518160ff161015610e775760ff808216600081815260058501602090815260409182902082518084019093525480851615158352610100908190049094161515908201529185015180519091908110610e6457610e64613bc2565b6020908102919091010152600101610e03565b5050919050565b6000548310610eb9576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260046020526040812090600182015474010000000000000000000000000000000000000000900460ff166002811115610ef957610ef96132a8565b14610f30576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015473ffffffffffffffffffffffffffffffffffffffff163314610f83576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b828110156111525760018201547801000000000000000000000000000000000000000000000000900461ffff16848483818110610fc557610fc5613bc2565b9050602002016020810190610fda9190613bf1565b61ffff1610611015576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182600301600086868581811061102f5761102f613bc2565b90506020020160208101906110449190613bf1565b61ffff1681526020810191909152604001600020805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790557f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f85826110c83390565b8560030160008989888181106110e0576110e0613bc2565b90506020020160208101906110f59190613bf1565b61ffff9081168252602080830193909352604091820160002054825196875294169185019190915273ffffffffffffffffffffffffffffffffffffffff9182169084015216606082015260800160405180910390a1600101610f86565b5050505050565b600080546060918167ffffffffffffffff81111561117957611179613831565b6040519080825280602002602001820160405280156111a2578160200160208202803683370190505b5090506000856000036111bd576111ba600184613b82565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461067a576000808281526004602052604090206001015474010000000000000000000000000000000000000000900460ff166002811115611225576112256132a8565b141580156112885750600081815260046020908152604080832060018101547501000000000000000000000000000000000000000000900461ffff16845260030190915290205473ffffffffffffffffffffffffffffffffffffffff8981169116145b156112bb57808383815181106112a0576112a0613bc2565b6020026020010181815250508160010191508582031561067a575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016111bf565b60008054861061131e576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600086815260046020526040812090600182015474010000000000000000000000000000000000000000900460ff16600281111561135e5761135e6132a8565b14611395576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015461ffff7801000000000000000000000000000000000000000000000000909104166000908152600382016020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016331781556113ff82828787612ebe565b6001828101805461ffff78010000000000000000000000000000000000000000000000008083048216948501909116027fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff821681179092556040519295507f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d926114b5928c9288928d928d928d928d9273ffffffffffffffffffffffffffffffffffffffff908116921691909117903390613cef565b60405180910390a1505095945050505050565b60606000825167ffffffffffffffff8111156114e6576114e6613831565b60405190808252806020026020018201604052801561157c57816020015b61156960408051610120810182526000808252602082018190529181018290529060608201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b8152602001906001900390816115045790505b50905060005b83518110156115d2576115ad8482815181106115a0576115a0613bc2565b6020026020010151610697565b8282815181106115bf576115bf613bc2565b6020908102919091010152600101611582565b5092915050565b6000548510611614576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085815260046020526040902060018082015474010000000000000000000000000000000000000000900460ff166002811115611654576116546132a8565b1461168b576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015473ffffffffffffffffffffffffffffffffffffffff1633146116de576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015460ff7a010000000000000000000000000000000000000000000000000000909104811690861610611740576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff85166000908152600482016020526040812090815460ff16600281111561176b5761176b6132a8565b146117a2576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054859082907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156117de576117de6132a8565b021790555060018560028111156117f7576117f76132a8565b03611d7e5760018201547501000000000000000000000000000000000000000000900461ffff1660009081526003830160205260408120903384546000808052600287016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff8082168352740100000000000000000000000000000000000000009091046bffffffffffffffffffffffff1692820192909252865494955068010000000000000000909304169290919060ff750100000000000000000000000000000000000000000090910416825b8160ff168160ff161015611b3b5760ff81811660009081526001890160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff9081169282019290925275010000000000000000000000000000000000000000009093046affffffffffffffffffffff1683830181905286518b5493517fbeabacc800000000000000000000000000000000000000000000000000000000815290831660048201529282166024840152604483015287169063beabacc890606401600060405180830381600087803b1580156119b957600080fd5b505af11580156119cd573d6000803e3d6000fd5b5050505060408101516020850180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805115611b325760208401516bffffffffffffffffffffffff1615611ac457835160208501516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b158015611aab57600080fd5b505af1158015611abf573d6000803e3d6000fd5b505050505b60ff6001909501948516600090815260028b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff74010000000000000000000000000000000000000000909104169082015293505b506001016118cc565b50600188015477010000000000000000000000000000000000000000000000900460ff165b8060ff168460ff161015611c8757825160208401516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015288831660248201526bffffffffffffffffffffffff90911660448201529086169063beabacc890606401600060405180830381600087803b158015611bfc57600080fd5b505af1158015611c10573d6000803e3d6000fd5b50505060ff6001909501948516600090815260028b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff7401000000000000000000000000000000000000000090910416908201529350611b609050565b600189018054600291907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008302179055506002600081546001900391905081905550600360008154600101919050819055507f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d968e878960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611d6e9392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b60405180910390a1505050505050505b7f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a930387878787873360018901547501000000000000000000000000000000000000000000900461ffff16600090815260038a01602052604090819020549051611e029796959493929173ffffffffffffffffffffffffffffffffffffffff1690613d5c565b60405180910390a150505050505050565b6000548310611e4e576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260046020526040902060018082015474010000000000000000000000000000000000000000900460ff166002811115611e8e57611e8e6132a8565b14611ec5576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836002811115611ed957611ed96132a8565b14612052576001836002811115611ef257611ef26132a8565b1461205257600181015460ff7b01000000000000000000000000000000000000000000000000000000909104811690831610611f5a576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff808316600090815260058301602052604090208054909116611faa576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610100900460ff1615611feb576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611ff482612c65565b6040518581527fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed69060200160405180910390a180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b7f3f1722530d4b0ba29ec0e7f297712913e80dcb0ab48844fd9ef7bd42663d4ce4848484336040516120879493929190613dbf565b60405180910390a150505050565b600080546001808201835581835260046020526040832080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8b1617815590810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8a16021790556005549192909161214c9073ffffffffffffffffffffffffffffffffffffffff166130fe565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561219657600080fd5b505af11580156121aa573d6000803e3d6000fd5b505083547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff85160217845550600090505b60ff811688111561236f5788888260ff1681811061221b5761221b613bc2565b6122319260206040909202019081019150613e03565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff1681811061226357612263613bc2565b905060400201602001602081019061227b9190613e3a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015612302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123269190613e57565b5088888260ff1681811061233c5761233c613bc2565b60ff84166000908152600287016020526040908190209102929092019190506123658282613e74565b50506001016121fb565b50600182810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89161790558054810190558315612504576001820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff81168511156125025761ffff811660008181526003850160205260409020908790879081811061244257612442613bc2565b90506020028101906124549190613ed9565b612462906020810190613e03565b81547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617740100000000000000000000000000000000000000001781556124f98482898961ffff87168181106124d4576124d4613bc2565b90506020028101906124e69190613ed9565b6124f4906020810190613f17565b612ebe565b5060010161240d565b505b7fd2d2cd619dd6aa2c2e812eeab185d133d2dafbc312cc04664111893c3abfd531838c8c8c8c8c8c8c8c60405161254399989796959493929190614097565b60405180910390a1505098975050505050505050565b600080548410612595576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084815260046020526040902060018082015474010000000000000000000000000000000000000000900460ff1660028111156125d5576125d56132a8565b1461260c576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015461ffff750100000000000000000000000000000000000000000090910416600090815260038201602052604090205473ffffffffffffffffffffffffffffffffffffffff16331461268e576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001818101805460ff7a0100000000000000000000000000000000000000000000000000008083048216948501909116027fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff821681179092556040519294507febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d1287129261273e92899287928a928a9273ffffffffffffffffffffffffffffffffffffffff918216911617903390614175565b60405180910390a1509392505050565b6000548210612789576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260046020526040812090600182015474010000000000000000000000000000000000000000900460ff1660028111156127c9576127c96132a8565b14612800576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015461ffff7801000000000000000000000000000000000000000000000000909104811690831610612861576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff821660009081526003820160205260409020805473ffffffffffffffffffffffffffffffffffffffff1633146128c6576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805474010000000000000000000000000000000000000000900460ff16612919576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001828101805461ffff8616750100000000000000000000000000000000000000000081027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff909216919091177401000000000000000000000000000000000000000017825582547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018355600280549093019092555460408051878152602081019390935273ffffffffffffffffffffffffffffffffffffffff909116908201523360608201527f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de190608001612087565b600080548410612a69576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600181015473ffffffffffffffffffffffffffffffffffffffff163314612aca576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600182015474010000000000000000000000000000000000000000900460ff166002811115612afd57612afd6132a8565b03612b34576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600182015474010000000000000000000000000000000000000000900460ff166002811115612b6757612b676132a8565b1480612b815750805467ffffffffffffffff428116911611155b15612bcb57612b8f81612c65565b6040518581527fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed69060200160405180910390a160ff9150612c5d565b6001808201805460ff7b010000000000000000000000000000000000000000000000000000008083048216948501909116027fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790556040519092507f0eaaab3b90d3aa41f4590ad97f9680c4c2983633330f5731ff2b4a765fcb853c9061273e9087908590889088906141c8565b509392505050565b6001810154815460ff770100000000000000000000000000000000000000000000008304169173ffffffffffffffffffffffffffffffffffffffff908116916801000000000000000090041660005b8360ff168160ff161015612db35760ff8116600090815260028601602090815260409182902082518084018452905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905293517fbeabacc80000000000000000000000000000000000000000000000000000000081526004810191909152868416602482015260448101929092529184169063beabacc890606401600060405180830381600087803b158015612d8f57600080fd5b505af1158015612da3573d6000803e3d6000fd5b5050505081600101915050612cb4565b506000600185015474010000000000000000000000000000000000000000900460ff166002811115612de757612de76132a8565b03612e1957600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055612e79565b60018085015474010000000000000000000000000000000000000000900460ff166002811115612e4b57612e4b6132a8565b03612e7957600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b50505060010180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b82547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8316021783556000808052600285016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff80861690821610156130f45785858260ff16818110612f8957612f89613bc2565b9050606002016040016020810190612fa191906141eb565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613008576040517f6e52358c00000000000000000000000000000000000000000000000000000000815260ff821660048201526024015b60405180910390fd5b85858260ff1681811061301d5761301d613bc2565b60ff8416600090815260018b01602052604090206060909102929092019190506130478282614208565b90505085858260ff1681811061305f5761305f613bc2565b61307592602060609092020190810191506142b9565b156130ec5760ff60019094019384166000908152600289016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101612f66565b5050505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff81166131c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c6564000000000000000000006044820152606401612fff565b919050565b600381106131d357600080fd5b50565b803560ff811681146131c157600080fd5b80151581146131d357600080fd5b6000806000806080858703121561320b57600080fd5b84359350602085013561321d816131c6565b925061322b604086016131d6565b9150606085013561323b816131e7565b939692955090935050565b73ffffffffffffffffffffffffffffffffffffffff811681146131d357600080fd5b80356131c181613246565b60008060006060848603121561328857600080fd5b833561329381613246565b95602085013595506040909401359392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106131d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b613317816132d7565b9052565b600081518084526020808501945080840160005b8381101561337a578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff16838801526040909601959082019060010161332f565b509495945050505050565b600082825180855260208086019550808260051b8401018186016000805b8581101561347a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878503018a528251606080860173ffffffffffffffffffffffffffffffffffffffff80845116885288840151151589890152604080850151945083818a015282855180855260808b0191508b870196508894505b808510156134625786518051151583528c81015185168d8401528301516affffffffffffffffffffff1683830152958b01956001949094019390850190613420565b509e8a019e98505050948701945050506001016133a3565b509198975050505050505050565b600081518084526020808501945080840160005b8381101561337a578151516134b0816132d7565b8752958201959082019060010161349c565b600081518084526020808501945080840160005b8381101561337a578151805115158852830151151583880152604090960195908201906001016134d6565b805167ffffffffffffffff16825260006101206020830151613529602086018261ffff169052565b506040830151613551604086018273ffffffffffffffffffffffffffffffffffffffff169052565b506060830151613564606086018261330e565b50608083015161358c608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08301518160a08601526135a48286018261331b565b91505060c083015184820360c08601526135be8282613385565b91505060e083015184820360e08601526135d88282613488565b91505061010080840151858303828701526135f383826134c2565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613670577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261365e858351613501565b94509285019290850190600101613624565b5092979650505050505050565b60006020828403121561368f57600080fd5b5035919050565b6020815260006136a96020830184613501565b9392505050565b60008083601f8401126136c257600080fd5b50813567ffffffffffffffff8111156136da57600080fd5b6020830191508360208260051b85010111156136f557600080fd5b9250929050565b60008060006040848603121561371157600080fd5b83359250602084013567ffffffffffffffff81111561372f57600080fd5b61373b868287016136b0565b9497909650939450505050565b60008083601f84011261375a57600080fd5b50813567ffffffffffffffff81111561377257600080fd5b6020830191508360208285010111156136f557600080fd5b6000806000806000606086880312156137a257600080fd5b85359450602086013567ffffffffffffffff808211156137c157600080fd5b6137cd89838a01613748565b909650945060408801359150808211156137e657600080fd5b818801915088601f8301126137fa57600080fd5b81358181111561380957600080fd5b89602060608302850101111561381e57600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561387357600080fd5b823567ffffffffffffffff8082111561388b57600080fd5b818501915085601f83011261389f57600080fd5b8135818111156138b1576138b1613831565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156138f4576138f4613831565b60405291825284820192508381018501918883111561391257600080fd5b938501935b8285101561393057843584529385019392850192613917565b98975050505050505050565b60008060008060006080868803121561395457600080fd5b85359450613964602087016131d6565b93506040860135613974816131c6565b9250606086013567ffffffffffffffff81111561399057600080fd5b61399c88828901613748565b969995985093965092949392505050565b6000806000606084860312156139c257600080fd5b8335925060208401356139d4816131c6565b91506139e2604085016131d6565b90509250925092565b60008060008060008060008060a0898b031215613a0757600080fd5b883567ffffffffffffffff80821115613a1f57600080fd5b613a2b8c838d01613748565b909a50985060208b013591508082168214613a4557600080fd5b90965060408a01359080821115613a5b57600080fd5b818b0191508b601f830112613a6f57600080fd5b813581811115613a7e57600080fd5b8c60208260061b8501011115613a9357600080fd5b6020830197509550613aa760608c01613268565b945060808b0135915080821115613abd57600080fd5b50613aca8b828c016136b0565b999c989b5096995094979396929594505050565b600080600060408486031215613af357600080fd5b83359250602084013567ffffffffffffffff811115613b1157600080fd5b61373b86828701613748565b803561ffff811681146131c157600080fd5b60008060408385031215613b4257600080fd5b82359150613b5260208401613b1d565b90509250929050565b83815260608101613b6b846132d7565b83602083015260ff83166040830152949350505050565b81810381811115613bbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215613c0357600080fd5b6136a982613b1d565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6affffffffffffffffffffff811681146131d357600080fd5b8183526000602080850194508260005b8581101561337a578135613c91816131e7565b1515875281830135613ca281613246565b73ffffffffffffffffffffffffffffffffffffffff1687840152604082810135613ccb81613c55565b6affffffffffffffffffffff16908801526060968701969190910190600101613c7e565b88815261ffff8816602082015260c060408201526000613d1360c08301888a613c0c565b8281036060840152613d26818789613c6e565b91505073ffffffffffffffffffffffffffffffffffffffff808516608084015280841660a0840152509998505050505050505050565b87815260ff87166020820152613d71866132d7565b85604082015260c060608201526000613d8e60c083018688613c0c565b73ffffffffffffffffffffffffffffffffffffffff94851660808401529290931660a0909101529695505050505050565b84815260808101613dcf856132d7565b84602083015260ff8416604083015273ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b600060208284031215613e1557600080fd5b81356136a981613246565b6bffffffffffffffffffffffff811681146131d357600080fd5b600060208284031215613e4c57600080fd5b81356136a981613e20565b600060208284031215613e6957600080fd5b81516136a9816131e7565b8135613e7f81613246565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff000000000000000000000000000000000000000081818454161783556020840135613ecf81613e20565b60a01b1617905550565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613f0d57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613f4c57600080fd5b83018035915067ffffffffffffffff821115613f6757600080fd5b60200191506060810236038213156136f557600080fd5b81835260006020808501808196508560051b810191508460005b8781101561408a57828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1883603018112613fd757600080fd5b870160408135613fe681613246565b73ffffffffffffffffffffffffffffffffffffffff16865281870135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe101811261403357600080fd5b90910186810191903567ffffffffffffffff81111561405157600080fd5b60608102360383131561406357600080fd5b81888801526140758288018285613c6e565b9b88019b965050509185019150600101613f98565b5091979650505050505050565b8981526000602060c0818401526140b260c084018b8d613c0c565b67ffffffffffffffff8a1660408581019190915284820360608601528882528991830160005b8a8110156141325783356140eb81613246565b73ffffffffffffffffffffffffffffffffffffffff1682528385013561411081613e20565b6bffffffffffffffffffffffff168286015292820192908201906001016140d8565b5073ffffffffffffffffffffffffffffffffffffffff8916608087015285810360a087015261416281888a613f7e565b9f9e505050505050505050505050505050565b86815260ff8616602082015260a06040820152600061419860a083018688613c0c565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b84815260ff841660208201526060604082015260006135f3606083018486613c0c565b6000602082840312156141fd57600080fd5b81356136a981613c55565b8135614213816131e7565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff169182178355602084013561425181613246565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff000000000000000000000000000000000000000000818482851617178555604086013592506142a883613c55565b921760a89190911b90911617905550565b6000602082840312156142cb57600080fd5b81356136a9816131e756fea2646970667358221220607eee5bda1173107e6942cd652f8051a0136343be408684e5d846fe5510625b64736f6c63430008110033608060405234801561001057600080fd5b50610289806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806365b145fb1461003b578063beabacc814610045575b600080fd5b610043610058565b005b6100436100533660046101e9565b6100d4565b60005473ffffffffffffffffffffffffffffffffffffffff16156100a8576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610125576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061022a565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101e657600080fd5b50565b6000806000606084860312156101fe57600080fd5b8335610209816101c4565b92506020840135610219816101c4565b929592945050506040919091013590565b60006020828403121561023c57600080fd5b8151801515811461024c57600080fd5b939250505056fea26469706673582212201d2e0260bc1b668deed1ce5be0dd2fdd10d67c1761b87d684b7f290e81ab5fc364736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applications": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "params": {
          "_execute": "If the request should also be executed in this transaction.",
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_manager": "Who will manage the task (become the proposer).",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "executeRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "params": {
          "_executor": "The executor to fetch tasks of.",
          "_fromTaskId": "What taskId to start from.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getProposingTasks(address,uint256,uint256)": {
        "params": {
          "_fromTaskId": "What taskId to start from.",
          "_max": "The maximum amount of tasks to return. 0 for no max.",
          "_proposer": "The proposer to fetch tasks of."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submission": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_application": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "notice": "Create a new task."
      },
      "executeRequest(uint256,uint8,uint8)": {
        "notice": "Exectued an accepted request, allows anyone to pay for the gas costs of the execution."
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of an executor. Most recent ones first."
      },
      "getProposingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of a proposer. Most recent ones first."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "taskStatistics()": {
        "notice": "Retrieves the current statistics of created tasks."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26103,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 26106,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "openTasks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 26108,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "takenTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 26110,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "successfulTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26116,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Task)25884_storage)"
      },
      {
        "astId": 26119,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "escrowImplementation",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)25566": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)19668": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)25796": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)25843": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)25776_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)25776_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)25884_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)25884_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)25839_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)25839_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)25757_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)25757_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)25764_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)25764_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)25800_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)25800_storage"
      },
      "t_struct(Application)25776_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 25766,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25768,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25770,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 25775,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint8,t_struct(Reward)25764_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CancelTaskRequest)25839_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 25836,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25838,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ERC20Transfer)25757_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 25754,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)19668"
          },
          {
            "astId": 25756,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)25764_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 25759,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25761,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25763,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)25800_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 25799,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SubmissionJudgement)25796"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Task)25884_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 25845,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 25848,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 8,
            "slot": "0",
            "type": "t_contract(Escrow)25566"
          },
          {
            "astId": 25850,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25853,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(TaskState)25843"
          },
          {
            "astId": 25855,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 21,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 25857,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 23,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25859,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 24,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 25861,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 26,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25863,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 27,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25868,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)25757_storage)"
          },
          {
            "astId": 25873,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint16,t_struct(Application)25776_storage)"
          },
          {
            "astId": 25878,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint8,t_struct(Submission)25800_storage)"
          },
          {
            "astId": 25883,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)25839_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}