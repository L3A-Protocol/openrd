{
  "address": "0x44653769398b4f5d0af8c45415f6cc8fff43ecb8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_disabler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_disputeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Disabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectAmountOfNativeCurrencyAttached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "JudgementNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManualBudgetIncreaseNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabler",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisputeManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PartialRewardAboveFullReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PointlessOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDoesntEndWithNextToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "name": "ApplicationAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.NativeReward[]",
          "name": "nativeReward",
          "type": "tuple[]"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "BudgetChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newDeadline",
          "type": "uint64"
        }
      ],
      "name": "DeadlineChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        }
      ],
      "name": "MetadataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "disputeManager",
          "type": "address"
        }
      ],
      "name": "NewDisputeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "NewManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint88[]",
          "name": "partialReward",
          "type": "uint88[]"
        },
        {
          "indexed": false,
          "internalType": "uint96[]",
          "name": "partialNativeReward",
          "type": "uint96[]"
        }
      ],
      "name": "PartialPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        }
      ],
      "name": "RequestExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.TaskCompletion",
          "name": "source",
          "type": "uint8"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "nativeBudget",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applicationIds",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.NativeReward[]",
          "name": "_nativeReward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint88[]",
          "name": "_partialReward",
          "type": "uint88[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_partialNativeReward",
          "type": "uint96[]"
        }
      ],
      "name": "completeByDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.NativeReward[]",
              "name": "nativeReward",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "_preapprove",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newMetadata",
          "type": "string"
        }
      ],
      "name": "editMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_extension",
          "type": "uint64"
        }
      ],
      "name": "extendDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "nativeBudget",
              "type": "uint96"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint96",
                      "name": "amount",
                      "type": "uint96"
                    }
                  ],
                  "internalType": "struct ITasks.NativeReward[]",
                  "name": "nativeReward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "nativeBudget",
              "type": "uint96"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint96",
                      "name": "amount",
                      "type": "uint96"
                    }
                  ],
                  "internalType": "struct ITasks.NativeReward[]",
                  "name": "nativeReward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_increase",
          "type": "uint96[]"
        }
      ],
      "name": "increaseBudget",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint88[]",
          "name": "_partialReward",
          "type": "uint88[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_partialNativeReward",
          "type": "uint96[]"
        }
      ],
      "name": "partialPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submissionId",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_applicationId",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "transferDisputeManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newManager",
          "type": "address"
        }
      ],
      "name": "transferManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d807745e8e2f7c9e05810a6802f31f22dd969ee20cf4388d0f9d96b7f313a86",
  "receipt": {
    "to": null,
    "from": "0x6568322a7d8212236ea784ba0c7c2dea1e6eab0f",
    "contractAddress": "0x44653769398b4f5d0af8c45415f6cc8fff43ecb8",
    "transactionIndex": "0x5",
    "gasUsed": "0x494da6",
    "logsBloom": "0x
    "blockHash": "0xb67e269a3b54edbeeeb542ee7232c71bcae636f6ea035319f340647a3c3b4337",
    "transactionHash": "0x4c5355f8c648890f610496060b4db471d8204b4a71d263fd93d1196001161e34",
    "logs": [
      {
        "address": "0x44653769398b4f5d0af8c45415f6cc8fff43ecb8",
        "topics": [
          "0x4eacce997f647e7c0e888069a6f0612021dd57b279c3f686887f1ae9f665e0ba"
        ],
        "data": "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
        "blockNumber": "0x26f9369",
        "transactionHash": "0x4c5355f8c648890f610496060b4db471d8204b4a71d263fd93d1196001161e34",
        "transactionIndex": "0x5",
        "blockHash": "0xb67e269a3b54edbeeeb542ee7232c71bcae636f6ea035319f340647a3c3b4337",
        "logIndex": "0xb",
        "removed": false
      },
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001999d3b6fac7a600000000000000000000000000000000000000000000000078f1fdb5a5b0adeb0000000000000000000000000000000000000000000002554ab947a509451fd500000000000000000000000000000000000000000000000078d863e1eeb5e6450000000000000000000000000000000000000000000002554ad2e178c03fe77b",
        "blockNumber": "0x26f9369",
        "transactionHash": "0x4c5355f8c648890f610496060b4db471d8204b4a71d263fd93d1196001161e34",
        "transactionIndex": "0x5",
        "blockHash": "0xb67e269a3b54edbeeeb542ee7232c71bcae636f6ea035319f340647a3c3b4337",
        "logIndex": "0xc",
        "removed": false
      }
    ],
    "blockNumber": "0x26f9369",
    "cumulativeGasUsed": "0x552251",
    "status": "0x1"
  },
  "args": [
    "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F"
  ],
  "numDeployments": 1,
  "solcInputHash": "2e71b4f5a4f54915fa586ca0c6f426c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_disabler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_disputeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Disabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAmountOfNativeCurrencyAttached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"JudgementNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManualBudgetIncreaseNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisputeManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartialRewardAboveFullReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PointlessOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDoesntEndWithNextToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"name\":\"ApplicationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.NativeReward[]\",\"name\":\"nativeReward\",\"type\":\"tuple[]\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"BudgetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newDeadline\",\"type\":\"uint64\"}],\"name\":\"DeadlineChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputeManager\",\"type\":\"address\"}],\"name\":\"NewDisputeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"NewManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint88[]\",\"name\":\"partialReward\",\"type\":\"uint88[]\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"partialNativeReward\",\"type\":\"uint96[]\"}],\"name\":\"PartialPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.TaskCompletion\",\"name\":\"source\",\"type\":\"uint8\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"nativeBudget\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applicationIds\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.NativeReward[]\",\"name\":\"_nativeReward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint88[]\",\"name\":\"_partialReward\",\"type\":\"uint88[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_partialNativeReward\",\"type\":\"uint96[]\"}],\"name\":\"completeByDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.NativeReward[]\",\"name\":\"nativeReward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"_preapprove\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newMetadata\",\"type\":\"string\"}],\"name\":\"editMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_extension\",\"type\":\"uint64\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nativeBudget\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.NativeReward[]\",\"name\":\"nativeReward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nativeBudget\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.NativeReward[]\",\"name\":\"nativeReward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_increase\",\"type\":\"uint96[]\"}],\"name\":\"increaseBudget\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint88[]\",\"name\":\"_partialReward\",\"type\":\"uint88[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_partialNativeReward\",\"type\":\"uint96[]\"}],\"name\":\"partialPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submissionId\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_applicationId\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferDisputeManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applicationIds\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"params\":{\"_execute\":\"If the request should also be executed in this transaction.\",\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[],(address,uint96)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_nativeReward\":\"Wanted native currency for completing the task.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"},\"returns\":{\"applicationId\":\"Id of the newly created application.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"},\"returns\":{\"cancelTaskRequestId\":\"Id of the newly created request for task cancellation.\"}},\"completeByDispute(uint256,uint88[],uint96[])\":{\"params\":{\"_partialNativeReward\":\"How much of each native reward should be paid out.\",\"_partialReward\":\"How much of each ERC20 reward should be paid out.\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"},\"returns\":{\"submissionId\":\"Id of the newly created submission.\"}},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[],(address,uint96)[])[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_manager\":\"Who will manage the task (become the manager).\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"editMetadata(uint256,string)\":{\"details\":\"This metadata update might change the task completely. Show a warning to people who applied before the change.\",\"params\":{\"_newMetadata\":\"New metadata of the task.\",\"_taskId\":\"Id of the task.\"}},\"executeRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"extendDeadline(uint256,uint64)\":{\"params\":{\"_extension\":\"How much to extend the deadline by.\",\"_taskId\":\"Id of the task.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"increaseBudget(uint256,uint96[])\":{\"details\":\"Any attached native reward will also be used to increase the budget.\",\"params\":{\"_increase\":\"How much to increase each tokens amount by.\",\"_taskId\":\"Id of the task.\"}},\"partialPayment(uint256,uint88[],uint96[])\":{\"details\":\"Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to increase the budget.\",\"params\":{\"_partialNativeReward\":\"How much of each native reward should be paid out.\",\"_partialReward\":\"How much of each ERC20 reward should be paid out.\",\"_taskId\":\"Id of the task.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submissionId\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_applicationId\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}},\"transferDisputeManagement(address)\":{\"params\":{\"_newManager\":\"The new dispute manager.\"}},\"transferManagement(uint256,address)\":{\"params\":{\"_newManager\":\"What address should become the manager.\",\"_taskId\":\"Id of the task.\"}}},\"stateVariables\":{\"disputeManager\":{\"details\":\"This should be a smart contract obviously.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[],(address,uint96)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"completeByDispute(uint256,uint88[],uint96[])\":{\"notice\":\"Completes the task through dispute resolution.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[],(address,uint96)[])[])\":{\"notice\":\"Create a new task.\"},\"disputeManager()\":{\"notice\":\"This address has the power to handle disputes. It can complete any taken task without permission of the manager.\"},\"editMetadata(uint256,string)\":{\"notice\":\"Edit the metadata of a task.\"},\"escrowImplementation()\":{\"notice\":\"The base escrow contract that will be cloned for every task.\"},\"executeRequest(uint256,uint8,uint8)\":{\"notice\":\"Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\"},\"extendDeadline(uint256,uint64)\":{\"notice\":\"Extend the deadline of a task.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"increaseBudget(uint256,uint96[])\":{\"notice\":\"Increase the budget of the task.\"},\"partialPayment(uint256,uint88[],uint96[])\":{\"notice\":\"Releases a part of the reward to the executor without marking the task as complete.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"transferDisputeManagement(address)\":{\"notice\":\"Allows the dispute manager to appoint a new dispute manager.\"},\"transferManagement(uint256,address)\":{\"notice\":\"Transfers the manager role to a different address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\\r\\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\\r\\n    function __Escrow_init() external payable {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\\r\\n    /// @param token The ERC20 contract address.\\r\\n    /// @param to The address to recieve the tokens.\\r\\n    /// @param amount The amount of ERC20 token to receive.\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers a certain amount of native currency to a given address. Can only be called by the owner.\\r\\n    /// @param to The address to recieve the currency.\\r\\n    /// @param amount The amount of native currency to receive.\\r\\n    function transferNative(address payable to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        to.transfer(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x233ae9f23c9e55f5de562d63e9cb0b8c74e297bdc4aeaeb1958b0054a119424d\",\"license\":\"MIT\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Escrow} from \\\"../Escrow.sol\\\";\\r\\n\\r\\ninterface ITasks {\\r\\n    error InvalidTimestamp();\\r\\n    error InvalidAddress();\\r\\n    error PointlessOperation();\\r\\n\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotManager();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget();\\r\\n    error RewardDoesntEndWithNextToken();\\r\\n    error IncorrectAmountOfNativeCurrencyAttached();\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n    error JudgementNone();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n    error RequestNotAccepted();\\r\\n    error RequestAlreadyExecuted();\\r\\n\\r\\n    error Overflow();\\r\\n    error ManualBudgetIncreaseNeeded();\\r\\n    error PartialRewardAboveFullReward();\\r\\n    error NativeTransferFailed();\\r\\n    error ERC1167FailedCreateClone();\\r\\n\\r\\n    event TaskCreated(\\r\\n        uint256 indexed taskId,\\r\\n        string metadata,\\r\\n        uint64 deadline,\\r\\n        ERC20Transfer[] budget,\\r\\n        uint96 nativeBudget,\\r\\n        address creator,\\r\\n        address manager\\r\\n    );\\r\\n    event ApplicationCreated(\\r\\n        uint256 indexed taskId,\\r\\n        uint16 applicationId,\\r\\n        string metadata,\\r\\n        Reward[] reward,\\r\\n        NativeReward[] nativeReward\\r\\n    );\\r\\n    event ApplicationAccepted(uint256 indexed taskId, uint16 applicationId);\\r\\n    event TaskTaken(uint256 indexed taskId, uint16 applicationId);\\r\\n    event SubmissionCreated(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 submissionId,\\r\\n        string metadata\\r\\n    );\\r\\n    event SubmissionReviewed(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 submissionId,\\r\\n        SubmissionJudgement judgement,\\r\\n        string feedback\\r\\n    );\\r\\n    event TaskCompleted(uint256 indexed taskId, TaskCompletion source);\\r\\n\\r\\n    event CancelTaskRequested(\\r\\n        uint256 indexed taskId,\\r\\n        uint8 requestId,\\r\\n        string explanation\\r\\n    );\\r\\n    event TaskCancelled(uint256 indexed taskId);\\r\\n    event RequestAccepted(\\r\\n        uint256 indexed taskId,\\r\\n        RequestType requestType,\\r\\n        uint8 requestId\\r\\n    );\\r\\n    event RequestExecuted(\\r\\n        uint256 indexed taskId,\\r\\n        RequestType requestType,\\r\\n        uint8 requestId,\\r\\n        address by\\r\\n    );\\r\\n\\r\\n    event DeadlineChanged(uint256 indexed taskId, uint64 newDeadline);\\r\\n    event BudgetChanged(uint256 indexed taskId); // Quite expensive to transfer budget into a datastructure to emit\\r\\n    event MetadataChanged(uint256 indexed taskId, string newMetadata);\\r\\n    event PartialPayment(\\r\\n        uint256 indexed taskId,\\r\\n        uint88[] partialReward,\\r\\n        uint96[] partialNativeReward\\r\\n    );\\r\\n    event NewManager(uint256 indexed taskId, address manager);\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @notice nextToken should always be true for the last entry\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to;\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a native reward payout.\\r\\n    /// @param to Whom the native reward should be transfered to.\\r\\n    /// @param amount How much native reward should be transfered.\\r\\n    struct NativeReward {\\r\\n        address to;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param metadata Metadata of the application. (IPFS hash)\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the manager.\\r\\n    /// @param reward How much rewards the applicant wants for completion.\\r\\n    /// @param nativeReward How much native currency the applicant wants for completion.\\r\\n    struct Application {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        uint8 nativeRewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n        mapping(uint8 => NativeReward) nativeReward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n        NativeReward[] nativeReward;\\r\\n    }\\r\\n\\r\\n    /// @notice For approving people on task creation (they are not required to make an application)\\r\\n    struct PreapprovedApplication {\\r\\n        address applicant;\\r\\n        Reward[] reward;\\r\\n        NativeReward[] nativeReward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement {\\r\\n        None,\\r\\n        Accepted,\\r\\n        Rejected\\r\\n    }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    /// @param feedback A response from the manager. (IPFS hash)\\r\\n    struct Submission {\\r\\n        string metadata;\\r\\n        string feedback;\\r\\n        SubmissionJudgement judgement;\\r\\n    }\\r\\n\\r\\n    enum RequestType {\\r\\n        CancelTask\\r\\n    }\\r\\n\\r\\n    /// @notice A container for shared request information.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct Request {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param request Request information.\\r\\n    /// @param explanation Why the task should be cancelled.\\r\\n    struct CancelTaskRequest {\\r\\n        Request request;\\r\\n        string explanation;\\r\\n    }\\r\\n\\r\\n    enum TaskState {\\r\\n        Open,\\r\\n        Taken,\\r\\n        Closed\\r\\n    }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param nativeBudget Maximum native currency reward that can be earned by completing the task.\\r\\n    /// @param creator Who has created the task.\\r\\n    /// @param manager Who has the permission to manage the task.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    struct Task {\\r\\n        string metadata;\\r\\n        // Storage block seperator\\r\\n        uint64 deadline;\\r\\n        Escrow escrow;\\r\\n        // Storage block seperator\\r\\n        uint96 nativeBudget;\\r\\n        address creator;\\r\\n        // Storage block seperator\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n        // Storage block seperator\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        uint16 executorApplication;\\r\\n        address creator;\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        Escrow escrow;\\r\\n        uint96 nativeBudget;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    enum TaskCompletion {\\r\\n        SubmissionAccepted,\\r\\n        Dispute\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n\\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param _manager Who will manage the task (become the manager).\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external payable returns (uint256 taskId);\\r\\n\\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    /// @param _nativeReward Wanted native currency for completing the task.\\r\\n    /// @return applicationId Id of the newly created application.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward,\\r\\n        NativeReward[] calldata _nativeReward\\r\\n    ) external returns (uint16 applicationId);\\r\\n\\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationIds Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationId Index of application you made that has been accepted.\\r\\n    function takeTask(uint256 _taskId, uint16 _applicationId) external;\\r\\n\\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @return submissionId Id of the newly created submission.\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n\\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submissionId Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    /// @return cancelTaskRequestId Id of the newly created request for task cancellation.\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    /// @param _execute If the request should also be executed in this transaction.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Extend the deadline of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _extension How much to extend the deadline by.\\r\\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\\r\\n\\r\\n    /// @notice Increase the budget of the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _increase How much to increase each tokens amount by.\\r\\n    /// @dev Any attached native reward will also be used to increase the budget.\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Edit the metadata of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New metadata of the task.\\r\\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Completes the task through dispute resolution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\\r\\n    /// @param _partialNativeReward How much of each native reward should be paid out.\\r\\n    function completeByDispute(\\r\\n        uint256 _taskId,\\r\\n        uint88[] calldata _partialReward,\\r\\n        uint96[] calldata _partialNativeReward\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Allows the dispute manager to appoint a new dispute manager.\\r\\n    /// @param _newManager The new dispute manager.\\r\\n    function transferDisputeManagement(address _newManager) external;\\r\\n\\r\\n    /// @notice Releases a part of the reward to the executor without marking the task as complete.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\\r\\n    /// @param _partialNativeReward How much of each native reward should be paid out.\\r\\n    /// @dev Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to increase the budget.\\r\\n    function partialPayment(\\r\\n        uint256 _taskId,\\r\\n        uint88[] calldata _partialReward,\\r\\n        uint96[] calldata _partialNativeReward\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Transfers the manager role to a different address.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newManager What address should become the manager.\\r\\n    function transferManagement(uint256 _taskId, address _newManager) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9ae0b81c2f92624bb2c51592c0c8c4b34954dbfdc5212de51749ce3b7f3214b3\",\"license\":\"MIT\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, IERC20, Escrow} from \\\"./ITasks.sol\\\";\\r\\nimport {TasksUtils} from \\\"./TasksUtils.sol\\\";\\r\\n\\r\\ncontract Tasks is TasksUtils {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address public immutable escrowImplementation;\\r\\n\\r\\n    /// @notice This address has the power to disable the contract, in case an exploit is discovered.\\r\\n    address private disabler;\\r\\n    error Disabled();\\r\\n    error NotDisabled();\\r\\n    error NotDisabler();\\r\\n\\r\\n    /// @notice This address has the power to handle disputes. It can complete any taken task without permission of the manager.\\r\\n    /// @dev This should be a smart contract obviously.\\r\\n    address public disputeManager;\\r\\n    error NotDisputeManager();\\r\\n    event NewDisputeManager(address disputeManager);\\r\\n\\r\\n    constructor(address _disabler, address _disputeManager) {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n        disabler = _disabler;\\r\\n        disputeManager = _disputeManager;\\r\\n        emit NewDisputeManager(_disputeManager);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        offchainTask = _toOffchainTask(task);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](\\r\\n            _taskIds.length\\r\\n        );\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external payable returns (uint256 taskId) {\\r\\n        _ensureValidTimestamp(_deadline);\\r\\n        _ensureValidAddress(_manager);\\r\\n\\r\\n        _ensureNotDisabled();\\r\\n        taskId = taskCounter++;\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.metadata = _metadata;\\r\\n        task.deadline = _deadline;\\r\\n        Escrow escrow = Escrow(payable(clone(escrowImplementation)));\\r\\n        escrow.__Escrow_init{value: msg.value}();\\r\\n        task.escrow = escrow;\\r\\n        // Gas optimization\\r\\n        if (msg.value != 0) {\\r\\n            task.nativeBudget = _toUint96(msg.value);\\r\\n        }\\r\\n        task.budgetCount = _toUint8(_budget.length);\\r\\n        for (uint8 i; i < uint8(_budget.length); ) {\\r\\n            _budget[i].tokenContract.transferFrom(\\r\\n                msg.sender,\\r\\n                address(escrow),\\r\\n                _budget[i].amount\\r\\n            );\\r\\n            // use balanceOf in case there is a fee asoosiated with the transfer\\r\\n            task.budget[i] = ERC20Transfer(\\r\\n                _budget[i].tokenContract,\\r\\n                _toUint96(_budget[i].tokenContract.balanceOf(address(escrow)))\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.manager = _manager;\\r\\n        task.creator = msg.sender;\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n\\r\\n        emit TaskCreated(\\r\\n            taskId,\\r\\n            _metadata,\\r\\n            _deadline,\\r\\n            _budget,\\r\\n            _toUint96(msg.value),\\r\\n            msg.sender,\\r\\n            _manager\\r\\n        );\\r\\n\\r\\n        // Gas optimization\\r\\n        if (_preapprove.length > 0) {\\r\\n            task.applicationCount = _toUint16(_preapprove.length);\\r\\n            for (uint16 i; i < uint16(_preapprove.length); ) {\\r\\n                Application storage application = task.applications[i];\\r\\n                application.applicant = _preapprove[i].applicant;\\r\\n                application.accepted = true;\\r\\n                _ensureRewardEndsWithNextToken(_preapprove[i].reward);\\r\\n                _setRewardBellowBudget(\\r\\n                    task,\\r\\n                    application,\\r\\n                    _preapprove[i].reward,\\r\\n                    _preapprove[i].nativeReward\\r\\n                );\\r\\n\\r\\n                emit ApplicationCreated(\\r\\n                    taskId,\\r\\n                    i,\\r\\n                    \\\"\\\",\\r\\n                    _preapprove[i].reward,\\r\\n                    _preapprove[i].nativeReward\\r\\n                );\\r\\n\\r\\n                emit ApplicationAccepted(taskId, i);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward,\\r\\n        NativeReward[] calldata _nativeReward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureRewardEndsWithNextToken(_reward);\\r\\n\\r\\n        Application storage application = task.applications[\\r\\n            task.applicationCount\\r\\n        ];\\r\\n        application.metadata = _metadata;\\r\\n        application.applicant = msg.sender;\\r\\n\\r\\n        // Gas optimization\\r\\n        if (_reward.length != 0) {\\r\\n            application.rewardCount = _toUint8(_reward.length);\\r\\n            for (uint8 i; i < uint8(_reward.length); ) {\\r\\n                application.reward[i] = _reward[i];\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Gas optimization\\r\\n        if (_nativeReward.length != 0) {\\r\\n            application.nativeRewardCount = _toUint8(_nativeReward.length);\\r\\n            for (uint8 i; i < uint8(_nativeReward.length); ) {\\r\\n                application.nativeReward[i] = _nativeReward[i];\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        applicationId = task.applicationCount++;\\r\\n\\r\\n        emit ApplicationCreated(\\r\\n            _taskId,\\r\\n            applicationId,\\r\\n            _metadata,\\r\\n            _reward,\\r\\n            _nativeReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external payable {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        for (uint i; i < _applicationIds.length; ) {\\r\\n            _ensureApplicationExists(task, _applicationIds[i]);\\r\\n\\r\\n            Application storage application = task.applications[\\r\\n                _applicationIds[i]\\r\\n            ];\\r\\n            application.accepted = true;\\r\\n            bool budgetIncreased = _increaseBudgetToReward(\\r\\n                task,\\r\\n                application.rewardCount,\\r\\n                application.reward,\\r\\n                application.nativeRewardCount,\\r\\n                application.nativeReward\\r\\n            );\\r\\n            if (budgetIncreased) {\\r\\n                emit BudgetChanged(_taskId);\\r\\n            }\\r\\n            emit ApplicationAccepted(_taskId, _applicationIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(uint256 _taskId, uint16 _applicationId) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureApplicationExists(task, _applicationId);\\r\\n\\r\\n        Application storage application = task.applications[_applicationId];\\r\\n        _ensureSenderIsApplicant(application);\\r\\n        _ensureApplicationIsAccepted(application);\\r\\n\\r\\n        task.executorApplication = _applicationId;\\r\\n        task.state = TaskState.Taken;\\r\\n\\r\\n        emit TaskTaken(_taskId, _applicationId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        Submission storage submission = task.submissions[task.submissionCount];\\r\\n        submission.metadata = _metadata;\\r\\n        submissionId = task.submissionCount++;\\r\\n\\r\\n        emit SubmissionCreated(_taskId, submissionId, _metadata);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n        _ensureSubmissionExists(task, _submissionId);\\r\\n\\r\\n        Submission storage submission = task.submissions[_submissionId];\\r\\n        _ensureSubmissionNotJudged(submission);\\r\\n        _ensureJudgementNotNone(_judgement);\\r\\n        submission.judgement = _judgement;\\r\\n        submission.feedback = _feedback;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            _payoutTask(task);\\r\\n            emit TaskCompleted(_taskId, TaskCompletion.SubmissionAccepted);\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(_taskId, _submissionId, _judgement, _feedback);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        if (\\r\\n            task.state == TaskState.Open ||\\r\\n            task.deadline <= uint64(block.timestamp)\\r\\n        ) {\\r\\n            // Task is open or deadline past\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(_taskId);\\r\\n\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        } else {\\r\\n            // Task is taken and deadline has not past\\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[\\r\\n                task.cancelTaskRequestCount\\r\\n            ];\\r\\n            request.explanation = _explanation;\\r\\n            cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n\\r\\n            emit CancelTaskRequested(\\r\\n                _taskId,\\r\\n                cancelTaskRequestId,\\r\\n                _explanation\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n\\r\\n            CancelTaskRequest storage cancelTaskRequest = task\\r\\n                .cancelTaskRequests[_requestId];\\r\\n            _ensureRequestNotAccepted(cancelTaskRequest.request);\\r\\n\\r\\n            if (_execute) {\\r\\n                // use executeRequest in the body instead? (more gas due to all the checks, but less code duplication)\\r\\n                _refundCreator(task);\\r\\n                emit TaskCancelled(_taskId);\\r\\n\\r\\n                cancelTaskRequest.request.executed = true;\\r\\n            }\\r\\n\\r\\n            cancelTaskRequest.request.accepted = true;\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(_taskId, _requestType, _requestId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n\\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n\\r\\n            CancelTaskRequest storage cancelTaskRequest = task\\r\\n                .cancelTaskRequests[_requestId];\\r\\n            _ensureRequestAccepted(cancelTaskRequest.request);\\r\\n            _ensureRequestNotExecuted(cancelTaskRequest.request);\\r\\n\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(_taskId);\\r\\n            cancelTaskRequest.request.executed = true;\\r\\n        }\\r\\n\\r\\n        emit RequestExecuted(_taskId, _requestType, _requestId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function extendDeadline(uint256 _taskId, uint64 _extension) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        if (_extension == 0) {\\r\\n            revert PointlessOperation();\\r\\n        }\\r\\n        task.deadline += _extension;\\r\\n\\r\\n        emit DeadlineChanged(_taskId, task.deadline);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external payable {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        for (uint8 i; i < uint8(_increase.length); ) {\\r\\n            ERC20Transfer storage transfer = task.budget[i];\\r\\n            transfer.tokenContract.transferFrom(\\r\\n                msg.sender,\\r\\n                address(task.escrow),\\r\\n                _increase[i]\\r\\n            );\\r\\n            // Use balanceOf as there could be a fee in transferFrom\\r\\n\\r\\n            transfer.amount = _toUint96(\\r\\n                transfer.tokenContract.balanceOf(address(task.escrow))\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Gas optimization\\r\\n        if (msg.value != 0) {\\r\\n            task.nativeBudget = _toUint96(task.nativeBudget + msg.value);\\r\\n        }\\r\\n\\r\\n        emit BudgetChanged(_taskId);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        if (equal(task.metadata, _newMetadata)) {\\r\\n            revert PointlessOperation();\\r\\n        }\\r\\n        task.metadata = _newMetadata;\\r\\n        emit MetadataChanged(_taskId, _newMetadata);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function completeByDispute(\\r\\n        uint256 _taskId,\\r\\n        uint88[] calldata _partialReward,\\r\\n        uint96[] calldata _partialNativeReward\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsDisputeManager();\\r\\n\\r\\n        _ensureTaskIsTaken(task);\\r\\n\\r\\n        _payoutTaskPartially(task, _partialReward, _partialNativeReward);\\r\\n        _refundCreator(task);\\r\\n\\r\\n        emit PartialPayment(_taskId, _partialReward, _partialNativeReward);\\r\\n        emit TaskCompleted(_taskId, TaskCompletion.Dispute);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function transferDisputeManagement(address _newManager) external {\\r\\n        _ensureSenderIsDisputeManager();\\r\\n        disputeManager = _newManager;\\r\\n        emit NewDisputeManager(_newManager);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function partialPayment(\\r\\n        uint256 _taskId,\\r\\n        uint88[] calldata _partialReward,\\r\\n        uint96[] calldata _partialNativeReward\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsTaken(task);\\r\\n\\r\\n        _payoutTaskPartially(task, _partialReward, _partialNativeReward);\\r\\n        emit BudgetChanged(_taskId);\\r\\n        emit PartialPayment(_taskId, _partialReward, _partialNativeReward);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function transferManagement(uint256 _taskId, address _newManager) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        task.manager = _newManager;\\r\\n        emit NewManager(_taskId, _newManager);\\r\\n    }\\r\\n\\r\\n    function disable() external {\\r\\n        _ensureSenderIsDisabler();\\r\\n        disabler = address(0);\\r\\n    }\\r\\n\\r\\n    // Ideally you are able to transfer it to the new contract, but that requires addition to the escrow contract\\r\\n    // I prefer this, so the escrow contract keeps being basic (both for security and clone costs)\\r\\n    function refund(uint256 _taskId) external {\\r\\n        _ensureDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskNotClosed(task);\\r\\n        _refundCreator(task);\\r\\n    }\\r\\n\\r\\n    function _getTask(\\r\\n        uint256 _taskId\\r\\n    ) internal view returns (Task storage task) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        task = tasks[_taskId];\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsDisputeManager() internal view {\\r\\n        if (msg.sender != disputeManager) {\\r\\n            revert NotDisputeManager();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureNotDisabled() internal view {\\r\\n        if (disabler == address(0)) {\\r\\n            revert Disabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabled() internal view {\\r\\n        if (disabler != address(0)) {\\r\\n            revert NotDisabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsDisabler() internal view {\\r\\n        if (msg.sender != disabler) {\\r\\n            revert NotDisabler();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x98fc7736244e6c02f744252d8fbccde5caef3e44d551f9f82ec743cc979c9625\",\"license\":\"MIT\"},\"contracts/Tasks/TasksEnsure.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {ITasks, Escrow} from \\\"./ITasks.sol\\\";\\r\\n\\r\\n/*\\r\\n  Functions to ensure a certain precondition is met.\\r\\n*/\\r\\nabstract contract TasksEnsure is ITasks {\\r\\n    function _ensureTaskIsOpen(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskIsTaken(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskNotClosed(Task storage task) internal view {\\r\\n        if (task.state == TaskState.Closed) {\\r\\n            revert TaskClosed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsManager(Task storage task) internal view {\\r\\n        if (task.manager != msg.sender) {\\r\\n            revert NotManager();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev Should only be called is the task is not open!\\r\\n    function _ensureSenderIsExecutor(Task storage task) internal view {\\r\\n        if (\\r\\n            task.applications[task.executorApplication].applicant != msg.sender\\r\\n        ) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRewardEndsWithNextToken(\\r\\n        Reward[] memory reward\\r\\n    ) internal pure {\\r\\n        unchecked {\\r\\n            if (reward.length != 0 && !reward[reward.length - 1].nextToken) {\\r\\n                revert RewardDoesntEndWithNextToken();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationExists(\\r\\n        Task storage task,\\r\\n        uint16 _applicationId\\r\\n    ) internal view {\\r\\n        if (_applicationId >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsApplicant(\\r\\n        Application storage application\\r\\n    ) internal view {\\r\\n        if (application.applicant != msg.sender) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationIsAccepted(\\r\\n        Application storage application\\r\\n    ) internal view {\\r\\n        if (!application.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionExists(\\r\\n        Task storage task,\\r\\n        uint8 _submissionId\\r\\n    ) internal view {\\r\\n        if (_submissionId >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionNotJudged(\\r\\n        Submission storage submission\\r\\n    ) internal view {\\r\\n        if (submission.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureJudgementNotNone(\\r\\n        SubmissionJudgement judgement\\r\\n    ) internal pure {\\r\\n        if (judgement == SubmissionJudgement.None) {\\r\\n            revert JudgementNone();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureCancelTaskRequestExists(\\r\\n        Task storage task,\\r\\n        uint8 _requestId\\r\\n    ) internal view {\\r\\n        if (_requestId >= task.cancelTaskRequestCount) {\\r\\n            revert RequestDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotAccepted(Request storage request) internal view {\\r\\n        if (request.accepted) {\\r\\n            revert RequestAlreadyAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestAccepted(Request storage request) internal view {\\r\\n        if (!request.accepted) {\\r\\n            revert RequestNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotExecuted(Request storage request) internal view {\\r\\n        if (request.executed) {\\r\\n            revert RequestAlreadyExecuted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureValidTimestamp(uint64 timestamp) internal pure {\\r\\n        if (timestamp == 0) {\\r\\n            revert InvalidTimestamp();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureValidAddress(address addr) internal pure {\\r\\n        if (addr == address(0)) {\\r\\n            revert InvalidAddress();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _toUint8(uint256 value) internal pure returns (uint8) {\\r\\n        if (value > type(uint8).max) {\\r\\n            revert Overflow();\\r\\n        }\\r\\n        return uint8(value);\\r\\n    }\\r\\n\\r\\n    function _toUint16(uint256 value) internal pure returns (uint16) {\\r\\n        if (value > type(uint16).max) {\\r\\n            revert Overflow();\\r\\n        }\\r\\n        return uint16(value);\\r\\n    }\\r\\n\\r\\n    function _toUint96(uint256 value) internal pure returns (uint96) {\\r\\n        if (value > type(uint96).max) {\\r\\n            revert Overflow();\\r\\n        }\\r\\n        return uint96(value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x372f26eebcb90d89b6f39962e3a5536a60a2d00d71fed7064187b55059b35689\",\"license\":\"MIT\"},\"contracts/Tasks/TasksUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {Escrow, TasksEnsure} from \\\"./TasksEnsure.sol\\\";\\r\\n\\r\\n/*\\r\\n  Higher level functions to allow the Tasks file to be more readable.\\r\\n*/\\r\\nabstract contract TasksUtils is TasksEnsure {\\r\\n    function _toOffchainTask(\\r\\n        Task storage task\\r\\n    ) internal view returns (OffChainTask memory offchainTask) {\\r\\n        offchainTask.metadata = task.metadata;\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.creator = task.creator;\\r\\n        offchainTask.manager = task.manager;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n        offchainTask.nativeBudget = task.nativeBudget;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.applications = new OffChainApplication[](\\r\\n            task.applicationCount\\r\\n        );\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].metadata = application.metadata;\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n\\r\\n            offchainTask.applications[i].reward = new Reward[](\\r\\n                application.rewardCount\\r\\n            );\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            offchainTask.applications[i].nativeReward = new NativeReward[](\\r\\n                application.nativeRewardCount\\r\\n            );\\r\\n\\r\\n            for (\\r\\n                uint8 j;\\r\\n                j < offchainTask.applications[i].nativeReward.length;\\r\\n\\r\\n            ) {\\r\\n                offchainTask.applications[i].nativeReward[j] = application\\r\\n                    .nativeReward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](\\r\\n            task.cancelTaskRequestCount\\r\\n        );\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _increaseBudgetToReward(\\r\\n        Task storage task,\\r\\n        uint8 _length,\\r\\n        mapping(uint8 => Reward) storage _reward,\\r\\n        uint8 _nativeLength,\\r\\n        mapping(uint8 => NativeReward) storage _nativeReward\\r\\n    ) internal returns (bool increasedBudget) {\\r\\n        // Gas optimzation\\r\\n        if (_length != 0) {\\r\\n            uint8 j;\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n            uint256 needed;\\r\\n            for (uint8 i; i < _length; ) {\\r\\n                unchecked {\\r\\n                    needed += _reward[i].amount;\\r\\n                }\\r\\n\\r\\n                if (_reward[i].nextToken) {\\r\\n                    if (needed > erc20Transfer.amount) {\\r\\n                        // Existing budget in escrow doesnt cover the needed reward\\r\\n                        erc20Transfer.tokenContract.transferFrom(\\r\\n                            msg.sender,\\r\\n                            address(task.escrow),\\r\\n                            needed - erc20Transfer.amount\\r\\n                        );\\r\\n\\r\\n                        uint256 got = erc20Transfer.tokenContract.balanceOf(\\r\\n                            address(task.escrow)\\r\\n                        );\\r\\n\\r\\n                        if (got < needed) {\\r\\n                            // Apparently there is a tax / fee on the token transfer\\r\\n                            revert ManualBudgetIncreaseNeeded();\\r\\n                        }\\r\\n\\r\\n                        task.budget[j].amount = _toUint96(got);\\r\\n                        increasedBudget = true;\\r\\n                    }\\r\\n\\r\\n                    needed = 0;\\r\\n                    unchecked {\\r\\n                        erc20Transfer = task.budget[++j];\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_nativeLength != 0) {\\r\\n            uint256 nativeNeeded;\\r\\n            for (uint8 i; i < _nativeLength; ) {\\r\\n                nativeNeeded += _nativeReward[i].amount;\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (nativeNeeded > task.nativeBudget) {\\r\\n                unchecked {\\r\\n                    if (msg.value != nativeNeeded - task.nativeBudget) {\\r\\n                        revert IncorrectAmountOfNativeCurrencyAttached();\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                (bool success, ) = address(task.escrow).call{value: msg.value}(\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n                if (!success) {\\r\\n                    revert NativeTransferFailed();\\r\\n                }\\r\\n\\r\\n                task.nativeBudget = _toUint96(nativeNeeded);\\r\\n                increasedBudget = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setRewardBellowBudget(\\r\\n        Task storage task,\\r\\n        Application storage application,\\r\\n        Reward[] calldata _reward,\\r\\n        NativeReward[] calldata _nativeReward\\r\\n    ) internal {\\r\\n        // Gas optimzation\\r\\n        if (_reward.length != 0) {\\r\\n            application.rewardCount = _toUint8(_reward.length);\\r\\n\\r\\n            uint8 j;\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n            uint256 alreadyReserved;\\r\\n            for (uint8 i; i < uint8(_reward.length); ) {\\r\\n                unchecked {\\r\\n                    alreadyReserved += _reward[i].amount;\\r\\n                }\\r\\n\\r\\n                application.reward[i] = _reward[i];\\r\\n\\r\\n                if (_reward[i].nextToken) {\\r\\n                    if (alreadyReserved > erc20Transfer.amount) {\\r\\n                        revert RewardAboveBudget();\\r\\n                    }\\r\\n                    alreadyReserved = 0;\\r\\n                    unchecked {\\r\\n                        erc20Transfer = task.budget[++j];\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Gas optimzation\\r\\n        if (_nativeReward.length != 0) {\\r\\n            application.nativeRewardCount = _toUint8(_nativeReward.length);\\r\\n            uint256 nativeReserved;\\r\\n            for (uint8 i; i < uint8(_nativeReward.length); ) {\\r\\n                unchecked {\\r\\n                    nativeReserved += _nativeReward[i].amount;\\r\\n                }\\r\\n\\r\\n                application.nativeReward[i] = _nativeReward[i];\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (nativeReserved > task.nativeBudget) {\\r\\n                revert RewardAboveBudget();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _payoutTask(Task storage task) internal {\\r\\n        Application storage executor = task.applications[\\r\\n            task.executorApplication\\r\\n        ];\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n\\r\\n        // Gas optimzation\\r\\n        uint8 rewardCount = executor.rewardCount;\\r\\n        if (rewardCount != 0) {\\r\\n            uint8 j;\\r\\n            uint8 budgetCount = task.budgetCount;\\r\\n            for (uint8 i; i < budgetCount; ) {\\r\\n                ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n                while (j < rewardCount) {\\r\\n                    Reward memory reward = executor.reward[j];\\r\\n                    escrow.transfer(\\r\\n                        erc20Transfer.tokenContract,\\r\\n                        reward.to,\\r\\n                        reward.amount\\r\\n                    );\\r\\n\\r\\n                    unchecked {\\r\\n                        erc20Transfer.amount -= reward.amount;\\r\\n                        ++j;\\r\\n                    }\\r\\n\\r\\n                    if (reward.nextToken) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                // Gas optimization\\r\\n                if (erc20Transfer.amount != 0) {\\r\\n                    escrow.transfer(\\r\\n                        erc20Transfer.tokenContract,\\r\\n                        creator,\\r\\n                        erc20Transfer.amount\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Gas optimzation\\r\\n        uint8 nativeRewardCount = executor.nativeRewardCount;\\r\\n        if (nativeRewardCount != 0) {\\r\\n            uint96 paidOut;\\r\\n            for (uint8 i; i < nativeRewardCount; ) {\\r\\n                escrow.transferNative(\\r\\n                    payable(executor.nativeReward[i].to),\\r\\n                    executor.nativeReward[i].amount\\r\\n                );\\r\\n                unchecked {\\r\\n                    paidOut += executor.nativeReward[i].amount;\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Gas optimzation\\r\\n            if (paidOut < task.nativeBudget) {\\r\\n                unchecked {\\r\\n                    escrow.transferNative(\\r\\n                        payable(task.creator),\\r\\n                        task.nativeBudget - paidOut\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n\\r\\n    function _refundCreator(Task storage task) internal {\\r\\n        Escrow escrow = task.escrow;\\r\\n        address creator = task.creator;\\r\\n\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        if (budgetCount != 0) {\\r\\n            for (uint8 i; i < budgetCount; ) {\\r\\n                ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n                escrow.transfer(\\r\\n                    erc20Transfer.tokenContract,\\r\\n                    creator,\\r\\n                    erc20Transfer.amount\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Gas optimzation\\r\\n        if (task.nativeBudget != 0) {\\r\\n            escrow.transferNative(payable(creator), task.nativeBudget);\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n\\r\\n    function _payoutTaskPartially(\\r\\n        Task storage task,\\r\\n        uint88[] calldata _partialReward,\\r\\n        uint96[] calldata _partialNativeReward\\r\\n    ) internal {\\r\\n        Application storage executor = task.applications[\\r\\n            task.executorApplication\\r\\n        ];\\r\\n        Escrow escrow = task.escrow;\\r\\n\\r\\n        // Gas optimzation\\r\\n        uint8 rewardCount = executor.rewardCount;\\r\\n        if (rewardCount != 0) {\\r\\n            uint8 j;\\r\\n            uint8 budgetCount = task.budgetCount;\\r\\n            for (uint8 i; i < budgetCount; ) {\\r\\n                ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n                while (j < rewardCount) {\\r\\n                    Reward memory reward = executor.reward[j];\\r\\n                    if (_partialReward[j] > reward.amount) {\\r\\n                        revert PartialRewardAboveFullReward();\\r\\n                    }\\r\\n\\r\\n                    escrow.transfer(\\r\\n                        erc20Transfer.tokenContract,\\r\\n                        reward.to,\\r\\n                        _partialReward[j]\\r\\n                    );\\r\\n\\r\\n                    unchecked {\\r\\n                        executor.reward[j].amount =\\r\\n                            reward.amount -\\r\\n                            _partialReward[j];\\r\\n\\r\\n                        ++j;\\r\\n                    }\\r\\n\\r\\n                    if (reward.nextToken) {\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                task.budget[i].amount = _toUint96(\\r\\n                    erc20Transfer.tokenContract.balanceOf(address(escrow))\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Gas optimzation\\r\\n        uint8 nativeRewardCount = executor.nativeRewardCount;\\r\\n        if (nativeRewardCount != 0) {\\r\\n            for (uint8 i; i < nativeRewardCount; ) {\\r\\n                if (_partialNativeReward[i] > executor.nativeReward[i].amount) {\\r\\n                    revert PartialRewardAboveFullReward();\\r\\n                }\\r\\n\\r\\n                escrow.transferNative(\\r\\n                    payable(executor.nativeReward[i].to),\\r\\n                    _partialNativeReward[i]\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    executor.nativeReward[i].amount -= _partialNativeReward[i];\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                task.nativeBudget = _toUint96(address(escrow).balance);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // From: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\\r\\n    function clone(address implementation) internal returns (address instance) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\r\\n            // of the `implementation` address with the bytecode before the address.\\r\\n            mstore(\\r\\n                0x00,\\r\\n                or(\\r\\n                    shr(0xe8, shl(0x60, implementation)),\\r\\n                    0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000\\r\\n                )\\r\\n            )\\r\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\r\\n            mstore(\\r\\n                0x20,\\r\\n                or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3)\\r\\n            )\\r\\n            instance := create(0, 0x09, 0x37)\\r\\n        }\\r\\n        if (instance == address(0)) {\\r\\n            revert ERC1167FailedCreateClone();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // From: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol\\r\\n    function equal(\\r\\n        string memory a,\\r\\n        string memory b\\r\\n    ) internal pure returns (bool) {\\r\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe1b670be294dc4f07598b56ea4cc68ef4ef807eb7aefed1abb9a020c76ee2d45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061013f5760003560e01c806383219a8a116100b6578063b6cb58a51161006f578063b6cb58a5146103a2578063c5f9027b146103c1578063c75273bf146103e1578063e2baa57814610414578063ecb8adae14610427578063f544c3a61461044757600080fd5b806383219a8a146102d057806388aa8055146102f057806391a29225146103105780639cfbe95114610330578063a5e99c4e14610350578063b685504b1461038257600080fd5b80633f561a40116101085780633f561a40146101f15780634ca8ff5a1461020457806362ffbb201461025057806376645a931461026357806377b98419146102905780637c101fbf146102b057600080fd5b8062f9467d146101445780631d65e77e14610166578063278ecde11461019c5780632ef21668146101bc5780632f2770db146101dc575b600080fd5b34801561015057600080fd5b5061016461015f366004613e0f565b610467565b005b34801561017257600080fd5b50610186610181366004613e5e565b61054b565b6040516101939190614287565b60405180910390f35b3480156101a857600080fd5b506101646101b7366004613e5e565b610570565b3480156101c857600080fd5b506101646101d73660046142af565b61059b565b3480156101e857600080fd5b5061016461061d565b6101646101ff36600461432a565b610637565b34801561021057600080fd5b506102387f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610193565b61016461025e36600461432a565b6107c6565b34801561026f57600080fd5b5061028361027e3660046143bb565b6109e7565b6040516101939190614460565b34801561029c57600080fd5b506101646102ab366004614503565b610a9a565b3480156102bc57600080fd5b506101646102cb366004614577565b610bcf565b3480156102dc57600080fd5b506101646102eb3660046145df565b610c8a565b3480156102fc57600080fd5b5061016461030b366004614577565b610de8565b34801561031c57600080fd5b5061016461032b36600461461d565b610e7d565b34801561033c57600080fd5b5061016461034b366004614659565b610f42565b34801561035c57600080fd5b5061037061036b3660046145df565b610f9e565b60405160ff9091168152602001610193565b34801561038e57600080fd5b5061016461039d366004614688565b61106e565b3480156103ae57600080fd5b506000545b604051908152602001610193565b3480156103cd57600080fd5b506101646103dc3660046146cb565b61111f565b3480156103ed57600080fd5b506104016103fc366004614732565b6111e9565b60405161ffff9091168152602001610193565b6103b3610422366004614806565b61143c565b34801561043357600080fd5b506103706104423660046145df565b611a9f565b34801561045357600080fd5b50600354610238906001600160a01b031681565b61046f611be9565b600061047a85611c14565b905061048581611c49565b61048e81611c8c565b6104988184611cd9565b60ff8316600090815260078201602052604090206104b581611d0b565b82156104fd576104c482611d2e565b60405186907fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed690600090a2805461ff0019166101001781555b805460ff1916600117905560405185907ff8b7f8bb91b1d7e729d781b5a50d92293ee708dddedd69a888aaa707c6be09239061053c90879087906148d7565b60405180910390a25050505050565b610553613d6e565b600061055e83611c14565b905061056981611ec2565b9392505050565b6105786129a8565b600061058382611c14565b905061058e816129d2565b61059781611d2e565b5050565b6105a3611be9565b60006105ae83611c14565b90506105b981612a12565b6105c2816129d2565b6003810180546001600160a01b0319166001600160a01b03841690811790915560405190815283907f786df766d13289a8b9fdab500dfc6c7999ffe8b572f33ab0675c6d39b815e38a906020015b60405180910390a2505050565b610625612a3f565b600280546001600160a01b0319169055565b61063f611be9565b600061064a84611c14565b905061065581612a6a565b61065e81612a12565b60005b828110156107bf576106998285858481811061067f5761067f6148f5565b9050602002016020810190610694919061490b565b612aaa565b60008260050160008686858181106106b3576106b36148f5565b90506020020160208101906106c8919061490b565b61ffff1681526020810191909152604001600090812060018101805460ff60a01b1916600160a01b1790819055909250610722908590600160a81b810460ff908116916002870191600160b01b9091041660038701612add565b905080156107565760405187907f84e250d57229c1f1dd3b83f1904f537a8774c3e3d10860e555559e63707d9aec90600090a25b867fcea267c21cd955c6dd32ece69f8134d59db3396009f0c701079a806ac852cd6787878681811061078a5761078a6148f5565b905060200201602081019061079f919061490b565b60405161ffff909116815260200160405180910390a25050600101610661565b5050505050565b6107ce611be9565b60006107d984611c14565b90506107e481612a12565b6107ed81612a6a565b60005b60ff808416908216101561096f5760ff8116600081815260048401602052604090208054600185015491926001600160a01b03918216926323b872dd923392600160401b90920416908990899081811061084c5761084c6148f5565b9050602002016020810190610861919061493b565b6040518463ffffffff1660e01b815260040161087f93929190614958565b6020604051808303816000875af115801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c29190614984565b50805460018401546040516370a0823160e01b8152600160401b9091046001600160a01b0390811660048301526109459216906370a08231906024015b602060405180830381865afa15801561091c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094091906149a1565b612ecc565b81546001600160601b0391909116600160a01b026001600160a01b039091161790556001016107f0565b5034156109b6576002810154610993906109409034906001600160601b03166149d0565b6002820180546001600160601b0319166001600160601b03929092169190911790555b60405184907f84e250d57229c1f1dd3b83f1904f537a8774c3e3d10860e555559e63707d9aec90600090a250505050565b6060600082516001600160401b03811115610a0457610a04614375565b604051908082528060200260200182016040528015610a3d57816020015b610a2a613d6e565b815260200190600190039081610a225790505b50905060005b8351811015610a9357610a6e848281518110610a6157610a616148f5565b602002602001015161054b565b828281518110610a8057610a806148f5565b6020908102919091010152600101610a43565b5092915050565b610aa2611be9565b6000610aad86611c14565b9050610ab881611c49565b610ac181612a12565b610acb8186612efa565b60ff851660009081526006820160205260409020610ae881612f2c565b610af185612f65565b848160020160006101000a81548160ff02191690836002811115610b1757610b17613ebd565b021790555060018101610b2b848683614a62565b506001856002811115610b4057610b40613ebd565b03610b8857610b4e82612f97565b867f944480a60440c7b960153dc1a7e9dd67c1e706789279cdc0b1d6a2dbd5e4b2c36000604051610b7f9190614b21565b60405180910390a25b867f66cc74e22c9d06bad9e628a29613b95b60fd993ab0dcf3366f9882ec6f68a55c87878787604051610bbe9493929190614b64565b60405180910390a250505050505050565b610bd7611be9565b6000610be286611c14565b9050610bec613379565b610bf581611c49565b610c0281868686866133a4565b610c0b81611d2e565b857fd8ab738b40dbfcf56d4129df8f69bb0ae6e5593768202c0a3d473097fa06076486868686604051610c419493929190614ba5565b60405180910390a2857f944480a60440c7b960153dc1a7e9dd67c1e706789279cdc0b1d6a2dbd5e4b2c36001604051610c7a9190614b21565b60405180910390a2505050505050565b610c92611be9565b6000610c9d84611c14565b9050610ca881612a12565b610cb181612a6a565b610d7d816000018054610cc3906149e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610cef906149e3565b8015610d3c5780601f10610d1157610100808354040283529160200191610d3c565b820191906000526020600020905b815481529060010190602001808311610d1f57829003601f168201915b505050505084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138a792505050565b15610d9b576040516323cb696160e01b815260040160405180910390fd5b80610da7838583614a62565b50837f2822080855c1a796047f86db6703ee05ff65e9ab90092ca4114af8f017f2047e8484604051610dda929190614c3c565b60405180910390a250505050565b610df0611be9565b6000610dfb86611c14565b9050610e0681612a12565b610e0f81611c49565b610e1c81868686866133a4565b60405186907f84e250d57229c1f1dd3b83f1904f537a8774c3e3d10860e555559e63707d9aec90600090a2857fd8ab738b40dbfcf56d4129df8f69bb0ae6e5593768202c0a3d473097fa06076486868686604051610c7a9493929190614ba5565b610e85611be9565b6000610e9084611c14565b9050610e9b81611c49565b610ea58183611cd9565b60ff821660009081526007820160205260409020610ec2816138c3565b610ecb816138e5565b610ed482611d2e565b60405185907fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed690600090a2805461ff00191661010017905560405184907f3f1722530d4b0ba29ec0e7f297712913e80dcb0ab48844fd9ef7bd42663d4ce490610dda90869086903390614c58565b610f4a613379565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f4eacce997f647e7c0e888069a6f0612021dd57b279c3f686887f1ae9f665e0ba9060200160405180910390a150565b6000610fa8611be9565b6000610fb385611c14565b9050610fbe81611c49565b610fc781611c8c565b6003810154600160d01b900460ff166000908152600682016020526040902080610ff2858783614a62565b50600382018054600160d01b900460ff1690601a61100f83614c88565b91906101000a81548160ff021916908360ff1602179055509250857ff1132e0d82f456be7014af612ddec39659b80aecc96361df4a035aae2d41670584878760405161105d93929190614ca7565b60405180910390a250509392505050565b611076611be9565b600061108183611c14565b905061108c81612a6a565b6110968183612aaa565b61ffff8216600090815260058201602052604090206110b48161390d565b6110bd8161393a565b60038201805462ffffff60a01b1916600160a81b61ffff861690810260ff60a01b191691909117600160a01b1790915560405190815284907fa66b18686e4b88309be99d4afcc394a9a651fcb1a952423cb3188c07bcbacf5b90602001610dda565b611127611be9565b600061113283611c14565b905061113d81612a12565b611146816129d2565b816001600160401b0316600003611170576040516323cb696160e01b815260040160405180910390fd5b6001810180548391906000906111909084906001600160401b0316614cc4565b82546101009290920a6001600160401b038181021990931691831602179091556001830154604051911681528491507f0505a8ac14d4ae7475f30620cb3ea7dfc54a29d97ecbe67b52ba923fa09ebe8a90602001610610565b60006111f3611be9565b60006111fe89611c14565b905061120981612a6a565b6112648686808060200260200160405190810160405280939291908181526020016000905b8282101561125a5761124b60608302860136819003810190614ce4565b8152602001906001019061122e565b5050505050613966565b6003810154600160c01b900461ffff166000908152600582016020526040902080611290898b83614a62565b506001810180546001600160a01b03191633179055851561132c576112b4866139b3565b8160010160156101000a81548160ff021916908360ff16021790555060005b60ff808816908216101561132a5787878260ff168181106112f6576112f66148f5565b60ff8416600090815260028601602052604090206060909102929092019190506113208282614d55565b50506001016112d3565b505b83156113b25761133b846139b3565b8160010160166101000a81548160ff021916908360ff16021790555060005b60ff80861690821610156113b05785858260ff1681811061137d5761137d6148f5565b60ff84166000908152600386016020526040908190209102929092019190506113a68282614dc2565b505060010161135a565b505b600382018054600160c01b900461ffff169060186113cf83614e04565b91906101000a81548161ffff021916908361ffff1602179055509250897fda19b3cc753c341bab9ea356e6a1d6daf4566a45fb02781896767539849c651a848b8b8b8b8b8b6040516114279796959493929190614ef0565b60405180910390a25050979650505050505050565b6000611447876139d7565b61145084613a01565b611458611be9565b60008054908061146783614f44565b909155506000818152600160205260409020909150806114888a8c83614a62565b5060018101805467ffffffffffffffff19166001600160401b038a1617905560006114d27f0000000000000000000000000000000000000000000000000000000000000000613a28565b9050806001600160a01b03166365b145fb346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b5050505060018301805468010000000000000000600160e01b031916600160401b6001600160a01b038516021790555034156115855761156234612ecc565b6002830180546001600160601b0319166001600160601b03929092169190911790555b61158e876139b3565b8260030160176101000a81548160ff021916908360ff16021790555060005b60ff80891690821610156117755788888260ff168181106115d0576115d06148f5565b6115e69260206040909202019081019150614659565b6001600160a01b03166323b872dd33848c8c8660ff1681811061160b5761160b6148f5565b9050604002016020016020810190611623919061493b565b6040518463ffffffff1660e01b815260040161164193929190614958565b6020604051808303816000875af1158015611660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116849190614984565b5060405180604001604052808a8a8460ff168181106116a5576116a56148f5565b6116bb9260206040909202019081019150614659565b6001600160a01b031681526020016117278b8b8560ff168181106116e1576116e16148f5565b6116f79260206040909202019081019150614659565b6040516370a0823160e01b81526001600160a01b03878116600483015291909116906370a08231906024016108ff565b6001600160601b0390811690915260ff83166000908152600486016020908152604090912083519390910151909116600160a01b026001600160a01b039092169190911790556001016115ad565b506003820180546001600160a01b0319166001600160a01b0388161790556002820180546001600160601b031633600160601b02179055827f61a6eda1b84bb3acf4071fe4ad387f688cb6ee3e1aa7de1afd600980b09e97d68c8c8c8c8c6117dc34612ecc565b338e6040516117f2989796959493929190614f5d565b60405180910390a28315611a915761180984613a9a565b8260030160186101000a81548161ffff021916908361ffff16021790555060005b61ffff8086169082161015611a8f5761ffff8116600081815260058501602052604090209087908790818110611862576118626148f5565b90506020028101906118749190615027565b611882906020810190614659565b6001820180546001600160a81b0319166001600160a01b039290921691909117600160a01b17905561192f878761ffff85168181106118c3576118c36148f5565b90506020028101906118d59190615027565b6118e3906020810190615047565b808060200260200160405190810160405280939291908181526020016000905b8282101561125a5761192060608302860136819003810190614ce4565b81526020019060010190611903565b6119a5848289898661ffff1681811061194a5761194a6148f5565b905060200281019061195c9190615027565b61196a906020810190615047565b8b8b8861ffff16818110611980576119806148f5565b90506020028101906119929190615027565b6119a090604081019061508f565b613abf565b847fda19b3cc753c341bab9ea356e6a1d6daf4566a45fb02781896767539849c651a8389898661ffff168181106119de576119de6148f5565b90506020028101906119f09190615027565b6119fe906020810190615047565b8b8b8861ffff16818110611a1457611a146148f5565b9050602002810190611a269190615027565b611a3490604081019061508f565b604051611a459594939291906150d8565b60405180910390a260405161ffff8316815285907fcea267c21cd955c6dd32ece69f8134d59db3396009f0c701079a806ac852cd679060200160405180910390a25060010161182a565b505b505098975050505050505050565b6000611aa9611be9565b6000611ab485611c14565b9050611abf81612a12565b611ac8816129d2565b60006003820154600160a01b900460ff166002811115611aea57611aea613ebd565b1480611b06575060018101546001600160401b03428116911611155b15611b4857611b1481611d2e565b60405185907fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed690600090a260ff9150611be1565b6003810154600160d81b900460ff166000908152600782016020526040902060018101611b76858783614a62565b50600382018054600160d81b900460ff1690601b611b9383614c88565b91906101000a81548160ff021916908360ff1602179055509250857f0eaaab3b90d3aa41f4590ad97f9680c4c2983633330f5731ff2b4a765fcb853c84878760405161105d93929190614ca7565b509392505050565b6002546001600160a01b0316611c1257604051633ac4266d60e11b815260040160405180910390fd5b565b600080548210611c375760405163da319dff60e01b815260040160405180910390fd5b50600090815260016020526040902090565b60016003820154600160a01b900460ff166002811115611c6b57611c6b613ebd565b14611c89576040516324a6478960e01b815260040160405180910390fd5b50565b600381015461ffff600160a81b9091041660009081526005820160205260409020600101546001600160a01b03163314611c89576040516361968ebb60e11b815260040160405180910390fd5b600382015460ff600160d81b90910481169082161061059757604051637037cbb560e11b815260040160405180910390fd5b805460ff1615611c8957604051639f80515760e01b815260040160405180910390fd5b600181015460028201546003830154600160401b9092046001600160a01b0390811692600160601b9092041690600160b81b900460ff168015611e265760005b8160ff168160ff161015611e245760ff81166000908152600486810160209081526040928390208351808501855290546001600160a01b03808216808452600160a01b9092046001600160601b031693830184905294516317d5759960e31b8152919489169363beabacc893611de6938a9201614958565b600060405180830381600087803b158015611e0057600080fd5b505af1158015611e14573d6000803e3d6000fd5b5050505081600101915050611d6e565b505b60028401546001600160601b031615611ea9576002840154604051633e97486160e11b81526001600160a01b03851691637d2e90c291611e769186916001600160601b0390911690600401615117565b600060405180830381600087803b158015611e9057600080fd5b505af1158015611ea4573d6000803e3d6000fd5b505050505b505050600301805460ff60a01b1916600160a11b179055565b611eca613d6e565b81548290611ed7906149e3565b80601f0160208091040260200160405190810160405280929190818152602001828054611f03906149e3565b8015611f505780601f10611f2557610100808354040283529160200191611f50565b820191906000526020600020905b815481529060010190602001808311611f3357829003601f168201915b505050918352505060018201546001600160401b031660208201526003820154600160a81b810461ffff166040830152600280840154600160601b90046001600160a01b0390811660608501528216608084015260a0830191600160a01b900460ff1690811115611fc357611fc3613ebd565b90816002811115611fd657611fd6613ebd565b9052506001820154600160401b90046001600160a01b031660c082015260028201546001600160601b031660e08201526003820154600160b81b900460ff166001600160401b0381111561202c5761202c614375565b60405190808252806020026020018201604052801561207157816020015b604080518082019091526000808252602082015281526020019060019003908161204a5790505b5061010082015260005b816101000151518160ff1610156120fa5760ff811660008181526004850160209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b03169082015261010084015180519192909181106120e7576120e76148f5565b602090810291909101015260010161207b565b506003820154600160c01b900461ffff166001600160401b0381111561212257612122614375565b60405190808252806020026020018201604052801561219057816020015b61217d6040518060a001604052806060815260200160006001600160a01b0316815260200160001515815260200160608152602001606081525090565b8152602001906001900390816121405790505b5061012082015260005b816101200151518160ff1610156125d35760ff811660009081526005840160205260409020805481906121cc906149e3565b80601f01602080910402602001604051908101604052809291908181526020018280546121f8906149e3565b80156122455780601f1061221a57610100808354040283529160200191612245565b820191906000526020600020905b81548152906001019060200180831161222857829003601f168201915b50505050508361012001518360ff1681518110612264576122646148f5565b602090810291909101015152600181015461012084015180516001600160a01b039092169160ff851690811061229c5761229c6148f5565b6020908102919091018101516001600160a01b039092169101526001810154610120840151805160ff600160a01b90930483169285169081106122e1576122e16148f5565b60209081029190910101519015156040909101526001810154600160a81b900460ff166001600160401b0381111561231b5761231b614375565b60405190808252806020026020018201604052801561236657816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816123395790505b508361012001518360ff1681518110612381576123816148f5565b60200260200101516060018190525060005b8361012001518360ff16815181106123ad576123ad6148f5565b602002602001015160600151518160ff16101561246c5760ff8181166000908152600284016020908152604091829020825160608101845290548085161515825261010081046001600160a01b031692820192909252600160a81b9091046001600160581b031691810191909152610120860151805191929091908616908110612439576124396148f5565b6020026020010151606001518260ff1681518110612459576124596148f5565b6020908102919091010152600101612393565b506001810154600160b01b900460ff166001600160401b0381111561249357612493614375565b6040519080825280602002602001820160405280156124d857816020015b60408051808201909152600080825260208201528152602001906001900390816124b15790505b508361012001518360ff16815181106124f3576124f36148f5565b60200260200101516080018190525060005b8361012001518360ff168151811061251f5761251f6148f5565b602002602001015160800151518160ff1610156125c95760ff81811660009081526003840160209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b031690820152610120860151805191929091908616908110612596576125966148f5565b6020026020010151608001518260ff16815181106125b6576125b66148f5565b6020908102919091010152600101612505565b505060010161219a565b506003820154600160d01b900460ff166001600160401b038111156125fa576125fa614375565b60405190808252806020026020018201604052801561264b57816020015b612638604080516060808201835280825260208201529081016000905290565b8152602001906001900390816126185790505b5061014082015260005b816101400151518160ff1610156128085760ff8116600090815260068401602052604090819020815160608101909252805482908290612694906149e3565b80601f01602080910402602001604051908101604052809291908181526020018280546126c0906149e3565b801561270d5780601f106126e25761010080835404028352916020019161270d565b820191906000526020600020905b8154815290600101906020018083116126f057829003601f168201915b50505050508152602001600182018054612726906149e3565b80601f0160208091040260200160405190810160405280929190818152602001828054612752906149e3565b801561279f5780601f106127745761010080835404028352916020019161279f565b820191906000526020600020905b81548152906001019060200180831161278257829003601f168201915b505050918352505060028281015460209092019160ff16908111156127c6576127c6613ebd565b60028111156127d7576127d7613ebd565b815250508261014001518260ff16815181106127f5576127f56148f5565b6020908102919091010152600101612655565b506003820154600160d81b900460ff166001600160401b0381111561282f5761282f614375565b60405190808252806020026020018201604052801561288557816020015b6040805160808101825260009181018281526060808301939093528152602081019190915281526020019060019003908161284d5790505b5061016082015260005b816101600151518160ff1610156129a25760ff8082166000908152600785016020908152604091829020825160808101845281548086161515948201948552610100900490941615156060850152918352600182018054918401916128f3906149e3565b80601f016020809104026020016040519081016040528092919081815260200182805461291f906149e3565b801561296c5780601f106129415761010080835404028352916020019161296c565b820191906000526020600020905b81548152906001019060200180831161294f57829003601f168201915b5050505050815250508261016001518260ff168151811061298f5761298f6148f5565b602090810291909101015260010161288f565b50919050565b6002546001600160a01b031615611c1257604051635b3d539f60e01b815260040160405180910390fd5b60026003820154600160a01b900460ff1660028111156129f4576129f4613ebd565b03611c8957604051630e75c2f960e21b815260040160405180910390fd5b60038101546001600160a01b03163314611c895760405163607e454560e11b815260040160405180910390fd5b6002546001600160a01b03163314611c125760405163039782d760e21b815260040160405180910390fd5b60006003820154600160a01b900460ff166002811115612a8c57612a8c613ebd565b14611c895760405163fe89421760e01b815260040160405180910390fd5b600382015461ffff600160c01b9091048116908216106105975760405163362a281160e01b815260040160405180910390fd5b600060ff851615612d7c57600080805260048701602090815260408083208151808301909252546001600160a01b0381168252600160a01b90046001600160601b03169181019190915281805b8860ff168160ff161015612d775760ff808216600090815260208a905260409020546001600160581b03600160a81b82041693909301921615612d6f5782602001516001600160601b0316821115612d205782600001516001600160a01b03166323b872dd338c60010160089054906101000a90046001600160a01b031686602001516001600160601b031686612bc19190615139565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015612c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c399190614984565b50825160018b01546040516370a0823160e01b8152600160401b9091046001600160a01b03908116600483015260009216906370a0823190602401602060405180830381865afa158015612c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb591906149a1565b905082811015612cd85760405163dfa5f09560e01b815260040160405180910390fd5b612ce181612ecc565b60ff8616600090815260048d016020526040902080546001600160601b0392909216600160a01b026001600160a01b0390921691909117905550600194505b60ff6001909401938416600090815260048b01602090815260408083208151808301909252546001600160a01b03811682526001600160601b03600160a01b9091041691810191909152935091505b600101612b2a565b505050505b60ff831615612ec3576000805b8460ff168160ff161015612dce5760ff8116600090815260208590526040902054612dc490600160a01b90046001600160601b0316836149d0565b9150600101612d89565b5060028701546001600160601b0316811115612ec15760028701546001600160601b031681033414612e1357604051632c27ff0960e01b815260040160405180910390fd5b6001870154604051600091600160401b90046001600160a01b03169034908381818185875af1925050503d8060008114612e69576040519150601f19603f3d011682016040523d82523d6000602084013e612e6e565b606091505b5050905080612e9057604051633d2cec6f60e21b815260040160405180910390fd5b612e9982612ecc565b6002890180546001600160601b0319166001600160601b039290921691909117905550600191505b505b95945050505050565b60006001600160601b03821115612ef657604051631a93c68960e11b815260040160405180910390fd5b5090565b600382015460ff600160d01b90910481169082161061059757604051632802fcef60e11b815260040160405180910390fd5b600060028083015460ff1690811115612f4757612f47613ebd565b14611c89576040516330512bf360e21b815260040160405180910390fd5b6000816002811115612f7957612f79613ebd565b03611c895760405163386b121160e21b815260040160405180910390fd5b6003810154600160a81b9081900461ffff16600090815260058301602052604090206002830154600180850154908301549293600160601b9092046001600160a01b0390811693600160401b9092041691900460ff1680156131e6576003850154600090600160b81b900460ff16815b8160ff168160ff1610156131e25760ff811660009081526004890160209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b0316908201525b8460ff168460ff16101561315f5760ff848116600090815260028a016020908152604091829020825160608101845290549384161515815261010084046001600160a01b03908116928201839052600160a81b9094046001600160581b0316818401819052855193516317d5759960e31b81529385166004850152602484019290925260448301919091529188169063beabacc890606401600060405180830381600087803b15801561310957600080fd5b505af115801561311d573d6000803e3d6000fd5b5050505060408101516020830180516001600160581b039092169091036001600160601b0316905280516001959095019415613159575061315f565b50613057565b60208101516001600160601b0316156131d957805160208201516040516317d5759960e31b81526001600160a01b0389169263beabacc8926131a6928c9190600401614958565b600060405180830381600087803b1580156131c057600080fd5b505af11580156131d4573d6000803e3d6000fd5b505050505b50600101613007565b5050505b6001840154600160b01b900460ff16801561335b576000805b8260ff168160ff1610156132c65760ff8116600090815260038801602052604090819020549051633e97486160e11b81526001600160a01b0387811692637d2e90c29261326292821691600160a01b90046001600160601b031690600401615117565b600060405180830381600087803b15801561327c57600080fd5b505af1158015613290573d6000803e3d6000fd5b5050505060ff81166000908152600388016020526040902054600160a01b90046001600160601b031691909101906001016131ff565b5060028701546001600160601b039081169082161015613359576002870154604051633e97486160e11b81526001600160a01b0380871692637d2e90c29261332692600160601b830416916001600160601b031686900390600401615117565b600060405180830381600087803b15801561334057600080fd5b505af1158015613354573d6000803e3d6000fd5b505050505b505b50505050600391909101805460ff60a01b1916600160a11b17905550565b6003546001600160a01b03163314611c1257604051630e2a1e3760e31b815260040160405180910390fd5b6003850154600160a81b9081900461ffff1660009081526005870160205260409020600180880154908201549192600160401b9091046001600160a01b0316910460ff1680156136b4576003880154600090600160b81b900460ff16815b8160ff168160ff1610156136b05760ff8116600090815260048c0160209081526040918290208251808401909352546001600160a01b0381168352600160a01b90046001600160601b0316908201525b8460ff168460ff16101561363b5760ff848116600081815260028a016020908152604091829020825160608101845290549485161515815261010085046001600160a01b031691810191909152600160a81b9093046001600160581b0316908301819052908d908d908181106134ca576134ca6148f5565b90506020020160208101906134df919061514c565b6001600160581b03161115613507576040516303ea25dd60e61b815260040160405180910390fd5b866001600160a01b031663beabacc8836000015183602001518f8f8a60ff16818110613535576135356148f5565b905060200201602081019061354a919061514c565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526001600160581b03166044820152606401600060405180830381600087803b1580156135a257600080fd5b505af11580156135b6573d6000803e3d6000fd5b505050508b8b8660ff168181106135cf576135cf6148f5565b90506020020160208101906135e4919061514c565b60408281015160ff8816600090815260028c016020529190912080546001600160a81b0316600160a81b939092036001600160581b031692909202179055805160019095019415613635575061363b565b50613452565b80516040516370a0823160e01b81526001600160a01b03888116600483015261366e9216906370a08231906024016108ff565b60ff8316600090815260048e016020526040902080546001600160601b0392909216600160a01b026001600160a01b0390921691909117905550600101613402565b5050505b6001830154600160b01b900460ff16801561389c5760005b8160ff168160ff1610156138655760ff81166000818152600387016020526040902054600160a01b90046001600160601b03169088908890818110613713576137136148f5565b9050602002016020810190613728919061493b565b6001600160601b03161115613750576040516303ea25dd60e61b815260040160405180910390fd5b60ff811660008181526003870160205260409020546001600160a01b0380871692637d2e90c292909116908a908a9081811061378e5761378e6148f5565b90506020020160208101906137a3919061493b565b6040518363ffffffff1660e01b81526004016137c0929190615117565b600060405180830381600087803b1580156137da57600080fd5b505af11580156137ee573d6000803e3d6000fd5b5050505086868260ff16818110613807576138076148f5565b905060200201602081019061381c919061493b565b60ff82166000908152600387016020526040902080546001600160601b03600160a01b808304821694909403169092026001600160a01b039092169190911790556001016136cc565b50613879836001600160a01b031631612ecc565b60028a0180546001600160601b0319166001600160601b03929092169190911790555b505050505050505050565b6000818051906020012083805190602001201490505b92915050565b805460ff16611c895760405163f34ca27f60e01b815260040160405180910390fd5b8054610100900460ff1615611c8957604051636b78fca360e11b815260040160405180910390fd5b60018101546001600160a01b03163314611c8957604051632dfb00a160e21b815260040160405180910390fd5b6001810154600160a01b900460ff16611c8957604051635e7fdeef60e11b815260040160405180910390fd5b805115801590613995575080600182510381518110613987576139876148f5565b602002602001015160000151155b15611c8957604051631006c52360e01b815260040160405180910390fd5b600060ff821115612ef657604051631a93c68960e11b815260040160405180910390fd5b806001600160401b0316600003611c895760405163b7d0949760e01b815260040160405180910390fd5b6001600160a01b038116611c895760405163e6c4247b60e01b815260040160405180910390fd5b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116613a95576040516330be1a3d60e21b815260040160405180910390fd5b919050565b600061ffff821115612ef657604051631a93c68960e11b815260040160405180910390fd5b8215613c7657613ace836139b3565b60018601805460ff92909216600160a81b0260ff60a81b19909216919091179055600080805260048701602090815260408083208151808301909252546001600160a01b03811682526001600160601b03600160a01b909104169181019190915281805b60ff8088169082161015613c715787878260ff16818110613b5557613b556148f5565b9050606002016040016020810190613b6d919061514c565b6001600160581b03168201915087878260ff16818110613b8f57613b8f6148f5565b60ff8416600090815260028d0160205260409020606090910292909201919050613bb98282614d55565b90505087878260ff16818110613bd157613bd16148f5565b613be79260206060909202019081019150615169565b15613c695782602001516001600160601b0316821115613c1a5760405163b8f6ba5360e01b815260040160405180910390fd5b60ff6001909401938416600090815260048b01602090815260408083208151808301909252546001600160a01b03811682526001600160601b03600160a01b9091041691810191909152935091505b600101613b32565b505050505b8015613d6657613c85816139b3565b8560010160166101000a81548160ff021916908360ff1602179055506000805b60ff8084169082161015613d355783838260ff16818110613cc857613cc86148f5565b9050604002016020016020810190613ce0919061493b565b6001600160601b03168201915083838260ff16818110613d0257613d026148f5565b60ff8416600090815260038b01602052604090819020910292909201919050613d2b8282614dc2565b5050600101613ca5565b5060028701546001600160601b0316811115613d645760405163b8f6ba5360e01b815260040160405180910390fd5b505b505050505050565b604080516101808101825260608082526000602083018190529282018390528101829052608081018290529060a0820190815260200160006001600160a01b0316815260200160006001600160601b03168152602001606081526020016060815260200160608152602001606081525090565b803560018110613a9557600080fd5b803560ff81168114613a9557600080fd5b8015158114611c8957600080fd5b60008060008060808587031215613e2557600080fd5b84359350613e3560208601613de1565b9250613e4360408601613df0565b91506060850135613e5381613e01565b939692955090935050565b600060208284031215613e7057600080fd5b5035919050565b6000815180845260005b81811015613e9d57602081850181015186830182015201613e81565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60038110611c8957611c89613ebd565b613eec81613ed3565b9052565b600081518084526020808501945080840160005b83811015613f3d57815180516001600160a01b031688528301516001600160601b03168388015260409096019590820190600101613f04565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015614042578385038a52825160a08151818852613f8982890182613e77565b838a01516001600160a01b039081168a8c01526040808601511515818c01526060808701518c8503828e01528051808652908e01965091945091928891908d01905b808310156140095786518051151583528e81015186168f8401528601516001600160581b031686830152958d01956001929092019190830190613fcb565b506080968701518c82038d8901529695506140248188613ef0565b9b50505050505050508583019250858a019950600181019050613f67565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156140d157828403895281516060815181875261409082880182613e77565b91505086820151868203888801526140a88282613e77565b91505060408083015192506140bc83613ed3565b9590950152978401979084019060010161406e565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156140d15782840389528151805180511515865286015115158686015285015160606040860181905261413481870183613e77565b9a87019a95505050908401906001016140fc565b6000610180825181855261415e82860182613e77565b915050602083015161417b60208601826001600160401b03169052565b506040830151614191604086018261ffff169052565b5060608301516141ac60608601826001600160a01b03169052565b5060808301516141c760808601826001600160a01b03169052565b5060a08301516141da60a0860182613ee3565b5060c08301516141f560c08601826001600160a01b03169052565b5060e083015161421060e08601826001600160601b03169052565b5061010080840151858303828701526142298382613ef0565b9250505061012080840151858303828701526142458382613f48565b9250505061014080840151858303828701526142618382614050565b92505050610160808401518583038287015261427d83826140de565b9695505050505050565b6020815260006105696020830184614148565b6001600160a01b0381168114611c8957600080fd5b600080604083850312156142c257600080fd5b8235915060208301356142d48161429a565b809150509250929050565b60008083601f8401126142f157600080fd5b5081356001600160401b0381111561430857600080fd5b6020830191508360208260051b850101111561432357600080fd5b9250929050565b60008060006040848603121561433f57600080fd5b8335925060208401356001600160401b0381111561435c57600080fd5b614368868287016142df565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156143b3576143b3614375565b604052919050565b600060208083850312156143ce57600080fd5b82356001600160401b03808211156143e557600080fd5b818501915085601f8301126143f957600080fd5b81358181111561440b5761440b614375565b8060051b915061441c84830161438b565b818152918301840191848101908884111561443657600080fd5b938501935b838510156144545784358252938501939085019061443b565b98975050505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156144b557603f198886030184526144a3858351614148565b94509285019290850190600101614487565b5092979650505050505050565b60008083601f8401126144d457600080fd5b5081356001600160401b038111156144eb57600080fd5b60208301915083602082850101111561432357600080fd5b60008060008060006080868803121561451b57600080fd5b8535945061452b60208701613df0565b935060408601356003811061453f57600080fd5b925060608601356001600160401b0381111561455a57600080fd5b614566888289016144c2565b969995985093965092949392505050565b60008060008060006060868803121561458f57600080fd5b8535945060208601356001600160401b03808211156145ad57600080fd5b6145b989838a016142df565b909650945060408801359150808211156145d257600080fd5b50614566888289016142df565b6000806000604084860312156145f457600080fd5b8335925060208401356001600160401b0381111561461157600080fd5b614368868287016144c2565b60008060006060848603121561463257600080fd5b8335925061464260208501613de1565b915061465060408501613df0565b90509250925092565b60006020828403121561466b57600080fd5b81356105698161429a565b803561ffff81168114613a9557600080fd5b6000806040838503121561469b57600080fd5b823591506146ab60208401614676565b90509250929050565b80356001600160401b0381168114613a9557600080fd5b600080604083850312156146de57600080fd5b823591506146ab602084016146b4565b60008083601f84011261470057600080fd5b5081356001600160401b0381111561471757600080fd5b6020830191508360208260061b850101111561432357600080fd5b60008060008060008060006080888a03121561474d57600080fd5b8735965060208801356001600160401b038082111561476b57600080fd5b6147778b838c016144c2565b909850965060408a013591508082111561479057600080fd5b818a0191508a601f8301126147a457600080fd5b8135818111156147b357600080fd5b8b60206060830285010111156147c857600080fd5b6020830196508095505060608a01359150808211156147e657600080fd5b506147f38a828b016146ee565b989b979a50959850939692959293505050565b60008060008060008060008060a0898b03121561482257600080fd5b88356001600160401b038082111561483957600080fd5b6148458c838d016144c2565b909a50985088915061485960208c016146b4565b975060408b013591508082111561486f57600080fd5b61487b8c838d016146ee565b909750955060608b013591506148908261429a565b90935060808a013590808211156148a657600080fd5b506148b38b828c016142df565b999c989b5096995094979396929594505050565b60018110613eec57613eec613ebd565b604081016148e582856148c7565b60ff831660208301529392505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561491d57600080fd5b61056982614676565b6001600160601b0381168114611c8957600080fd5b60006020828403121561494d57600080fd5b813561056981614926565b6001600160a01b0393841681529190921660208201526001600160601b03909116604082015260600190565b60006020828403121561499657600080fd5b815161056981613e01565b6000602082840312156149b357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156138bd576138bd6149ba565b600181811c908216806149f757607f821691505b6020821081036129a257634e487b7160e01b600052602260045260246000fd5b601f821115614a5d57600081815260208120601f850160051c81016020861015614a3e5750805b601f850160051c820191505b81811015613d6657828155600101614a4a565b505050565b6001600160401b03831115614a7957614a79614375565b614a8d83614a8783546149e3565b83614a17565b6000601f841160018114614ac15760008515614aa95750838201355b600019600387901b1c1916600186901b1783556107bf565b600083815260209020601f19861690835b82811015614af25786850135825560209485019460019092019101614ad2565b5086821015614b0f5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b6020810160028310614b3557614b35613ebd565b91905290565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff85168152614b7384613ed3565b83602082015260606040820152600061427d606083018486614b3b565b6001600160581b0381168114611c8957600080fd5b6040808252810184905260008560608301825b87811015614be8578235614bcb81614b90565b6001600160581b0316825260209283019290910190600101614bb8565b5083810360208581019190915285825291508590820160005b86811015614c2f578235614c1481614926565b6001600160601b031682529183019190830190600101614c01565b5098975050505050505050565b602081526000614c50602083018486614b3b565b949350505050565b60608101614c6682866148c7565b60ff9390931660208201526001600160a01b0391909116604090910152919050565b600060ff821660ff8103614c9e57614c9e6149ba565b60010192915050565b60ff84168152604060208201526000612ec3604083018486614b3b565b6001600160401b03818116838216019080821115610a9357610a936149ba565b600060608284031215614cf657600080fd5b604051606081018181106001600160401b0382111715614d1857614d18614375565b6040528235614d2681613e01565b81526020830135614d368161429a565b60208201526040830135614d4981614b90565b60408201529392505050565b8135614d6081613e01565b815460ff19811691151560ff1691821783556020840135614d808161429a565b610100600160a81b0360089190911b166001600160a81b0319918216831781178455604085013591614db183614b90565b921760a89190911b90911617905550565b8135614dcd8161429a565b81546001600160a01b03199081166001600160a01b039290921691821783556020840135614dfa81614926565b60a01b1617905550565b600061ffff808316818103614e1b57614e1b6149ba565b6001019392505050565b8183526000602080850194508260005b85811015613f3d578135614e4881613e01565b1515875281830135614e598161429a565b6001600160a01b031687840152604082810135614e7581614b90565b6001600160581b0316908801526060968701969190910190600101614e35565b8183526000602080850194508260005b85811015613f3d578135614eb88161429a565b6001600160a01b0316875281830135614ed081614926565b6001600160601b0316878401526040968701969190910190600101614ea5565b61ffff88168152608060208201526000614f0e60808301888a614b3b565b8281036040840152614f21818789614e25565b90508281036060840152614f36818587614e95565b9a9950505050505050505050565b600060018201614f5657614f566149ba565b5060010190565b60c081526000614f7160c083018a8c614b3b565b60206001600160401b038a16818501526040848303818601528289845282840190508a935060005b8a811015614fe1578435614fac8161429a565b6001600160a01b0316825284840135614fc481614926565b6001600160601b0316828501529382019390820190600101614f99565b506001600160601b03891660608701529350614ffc92505050565b6001600160a01b03841660808301526001600160a01b03831660a08301529998505050505050505050565b60008235605e1983360301811261503d57600080fd5b9190910192915050565b6000808335601e1984360301811261505e57600080fd5b8301803591506001600160401b0382111561507857600080fd5b602001915060608102360382131561432357600080fd5b6000808335601e198436030181126150a657600080fd5b8301803591506001600160401b038211156150c057600080fd5b6020019150600681901b360382131561432357600080fd5b61ffff86168152608060208201526000608082015260a06040820152600061510460a083018688614e25565b8281036060840152614454818587614e95565b6001600160a01b039290921682526001600160601b0316602082015260400190565b818103818111156138bd576138bd6149ba565b60006020828403121561515e57600080fd5b813561056981614b90565b60006020828403121561517b57600080fd5b813561056981613e0156fea2646970667358221220fd3f858a6910723ec2c51ea15739ba2913a3bb59e7d4fb6f12b7b2996a626c2d64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applicationIds": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "params": {
          "_execute": "If the request should also be executed in this transaction.",
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[],(address,uint96)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_nativeReward": "Wanted native currency for completing the task.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        },
        "returns": {
          "applicationId": "Id of the newly created application."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        },
        "returns": {
          "cancelTaskRequestId": "Id of the newly created request for task cancellation."
        }
      },
      "completeByDispute(uint256,uint88[],uint96[])": {
        "params": {
          "_partialNativeReward": "How much of each native reward should be paid out.",
          "_partialReward": "How much of each ERC20 reward should be paid out.",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        },
        "returns": {
          "submissionId": "Id of the newly created submission."
        }
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[],(address,uint96)[])[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_manager": "Who will manage the task (become the manager).",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "editMetadata(uint256,string)": {
        "details": "This metadata update might change the task completely. Show a warning to people who applied before the change.",
        "params": {
          "_newMetadata": "New metadata of the task.",
          "_taskId": "Id of the task."
        }
      },
      "executeRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "extendDeadline(uint256,uint64)": {
        "params": {
          "_extension": "How much to extend the deadline by.",
          "_taskId": "Id of the task."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "increaseBudget(uint256,uint96[])": {
        "details": "Any attached native reward will also be used to increase the budget.",
        "params": {
          "_increase": "How much to increase each tokens amount by.",
          "_taskId": "Id of the task."
        }
      },
      "partialPayment(uint256,uint88[],uint96[])": {
        "details": "Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to increase the budget.",
        "params": {
          "_partialNativeReward": "How much of each native reward should be paid out.",
          "_partialReward": "How much of each ERC20 reward should be paid out.",
          "_taskId": "Id of the task."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submissionId": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_applicationId": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      },
      "transferDisputeManagement(address)": {
        "params": {
          "_newManager": "The new dispute manager."
        }
      },
      "transferManagement(uint256,address)": {
        "params": {
          "_newManager": "What address should become the manager.",
          "_taskId": "Id of the task."
        }
      }
    },
    "stateVariables": {
      "disputeManager": {
        "details": "This should be a smart contract obviously."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[],(address,uint96)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "completeByDispute(uint256,uint88[],uint96[])": {
        "notice": "Completes the task through dispute resolution."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[],(address,uint96)[])[])": {
        "notice": "Create a new task."
      },
      "disputeManager()": {
        "notice": "This address has the power to handle disputes. It can complete any taken task without permission of the manager."
      },
      "editMetadata(uint256,string)": {
        "notice": "Edit the metadata of a task."
      },
      "escrowImplementation()": {
        "notice": "The base escrow contract that will be cloned for every task."
      },
      "executeRequest(uint256,uint8,uint8)": {
        "notice": "Exectued an accepted request, allows anyone to pay for the gas costs of the execution."
      },
      "extendDeadline(uint256,uint64)": {
        "notice": "Extend the deadline of a task."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "increaseBudget(uint256,uint96[])": {
        "notice": "Increase the budget of the task."
      },
      "partialPayment(uint256,uint88[],uint96[])": {
        "notice": "Releases a part of the reward to the executor without marking the task as complete."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "transferDisputeManagement(address)": {
        "notice": "Allows the dispute manager to appoint a new dispute manager."
      },
      "transferManagement(uint256,address)": {
        "notice": "Transfers the manager role to a different address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37023,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 37029,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Task)36770_storage)"
      },
      {
        "astId": 37035,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "disabler",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 37044,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "disputeManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)34949": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)19280": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)36694": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)36722": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)36663_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)36663_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)36770_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)36770_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)36718_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)36718_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)36627_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)36627_storage"
      },
      "t_mapping(t_uint8,t_struct(NativeReward)36641_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.NativeReward)",
        "numberOfBytes": "32",
        "value": "t_struct(NativeReward)36641_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)36635_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)36635_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)36703_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)36703_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)36663_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 36644,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 36646,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 36648,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 36650,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 36652,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nativeRewardCount",
            "offset": 22,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 36657,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)36635_storage)"
          },
          {
            "astId": 36662,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nativeReward",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint8,t_struct(NativeReward)36641_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CancelTaskRequest)36718_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 36715,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "request",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Request)36711_storage"
          },
          {
            "astId": 36717,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC20Transfer)36627_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 36624,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)19280"
          },
          {
            "astId": 36626,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NativeReward)36641_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.NativeReward",
        "members": [
          {
            "astId": 36638,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36640,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)36711_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Request",
        "members": [
          {
            "astId": 36708,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 36710,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)36635_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 36630,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 36632,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36634,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)36703_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 36697,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 36699,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "feedback",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 36702,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(SubmissionJudgement)36694"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Task)36770_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 36725,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 36727,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 36730,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 8,
            "slot": "1",
            "type": "t_contract(Escrow)34949"
          },
          {
            "astId": 36732,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nativeBudget",
            "offset": 0,
            "slot": "2",
            "type": "t_uint96"
          },
          {
            "astId": 36734,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "creator",
            "offset": 12,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 36736,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "manager",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 36739,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(TaskState)36722"
          },
          {
            "astId": 36741,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 21,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 36743,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 23,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 36745,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 24,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 36747,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 26,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 36749,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 27,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 36754,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)36627_storage)"
          },
          {
            "astId": 36759,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint16,t_struct(Application)36663_storage)"
          },
          {
            "astId": 36764,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint8,t_struct(Submission)36703_storage)"
          },
          {
            "astId": 36769,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)36718_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}