{
  "address": "0x0154c71812F6318ea3615E31F999b8E2337DC3dd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProposer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "applications",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "ApplicationsAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        }
      ],
      "name": "ChangeScopeRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        }
      ],
      "name": "DropExecutorRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applications",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newMetadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_newDeadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_newReward",
          "type": "tuple[]"
        }
      ],
      "name": "changeScope",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "changeTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "dropExecutor",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "dropExecutorRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getExecutingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "creationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "executorConfirmationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "changed",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "judgementTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainChangeScopeRequest[]",
              "name": "changeScopeRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.DropExecutorRequest[]",
              "name": "dropExecutorRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getProposingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "creationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "executorConfirmationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "changed",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "judgementTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainChangeScopeRequest[]",
              "name": "changeScopeRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.DropExecutorRequest[]",
              "name": "dropExecutorRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "creationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "executorConfirmationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "changed",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "judgementTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainChangeScopeRequest[]",
              "name": "changeScopeRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.DropExecutorRequest[]",
              "name": "dropExecutorRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "creationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "executorConfirmationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "changed",
              "type": "bool"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "uint64",
                  "name": "judgementTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "deadline",
                  "type": "uint64"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainChangeScopeRequest[]",
              "name": "changeScopeRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.DropExecutorRequest[]",
              "name": "dropExecutorRequests",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "uint64",
                  "name": "timestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "accepted",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submission",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_application",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "open",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successful",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc1b857540088ca23368f1d68070b48ee40c211036230a22e6d4f6018b0308bf1",
  "receipt": {
    "to": null,
    "from": "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "contractAddress": "0x0154c71812F6318ea3615E31F999b8E2337DC3dd",
    "transactionIndex": 7,
    "gasUsed": "5273238",
    "logsBloom": "0x
    "blockHash": "0xd100d3f1df842ad47bd47bba74cb3026ad5b6055fc6f0ec9c11c991757c11403",
    "transactionHash": "0xc1b857540088ca23368f1d68070b48ee40c211036230a22e6d4f6018b0308bf1",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 38144696,
        "transactionHash": "0xc1b857540088ca23368f1d68070b48ee40c211036230a22e6d4f6018b0308bf1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001ee95eceb1c1960000000000000000000000000000000000000000000000000f7150a226ca6824000000000000000000000000000000000000000000003326504ee187915a02360000000000000000000000000000000000000000000000000f5267435818a68e000000000000000000000000000000000000000000003326506dcae6600bc3cc",
        "logIndex": 17,
        "blockHash": "0xd100d3f1df842ad47bd47bba74cb3026ad5b6055fc6f0ec9c11c991757c11403"
      }
    ],
    "blockNumber": 38144696,
    "cumulativeGasUsed": "5970415",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "cf060990810db1d0f63c212da473051a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"applications\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ApplicationsAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"name\":\"ChangeScopeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"name\":\"DropExecutorRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applications\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newMetadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_newDeadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_newReward\",\"type\":\"tuple[]\"}],\"name\":\"changeScope\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"changeTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"dropExecutor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"dropExecutorRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getExecutingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executorConfirmationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"changed\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"judgementTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainChangeScopeRequest[]\",\"name\":\"changeScopeRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.DropExecutorRequest[]\",\"name\":\"dropExecutorRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getProposingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executorConfirmationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"changed\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"judgementTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainChangeScopeRequest[]\",\"name\":\"changeScopeRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.DropExecutorRequest[]\",\"name\":\"dropExecutorRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executorConfirmationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"changed\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"judgementTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainChangeScopeRequest[]\",\"name\":\"changeScopeRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.DropExecutorRequest[]\",\"name\":\"dropExecutorRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"creationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executorConfirmationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"changed\",\"type\":\"bool\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"judgementTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainChangeScopeRequest[]\",\"name\":\"changeScopeRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.DropExecutorRequest[]\",\"name\":\"dropExecutorRequests\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accepted\",\"type\":\"uint64\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submission\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_application\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successful\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applications\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"changeScope(uint256,string,uint64,(bool,address,uint88)[])\":{\"params\":{\"_newDeadline\":\"New deadline of the task.\",\"_newMetadata\":\"New description of the task. (IPFS hash)\",\"_newReward\":\"New reward of the task.\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createTask(string,uint64,(address,uint96)[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"dropExecutor(uint256,string)\":{\"params\":{\"_explanation\":\"Why the executor should be dropped.\",\"_taskId\":\"Id of the task.\"}},\"getExecutingTasks(address,uint256,uint256)\":{\"params\":{\"_executor\":\"The executor to fetch tasks of.\",\"_fromTaskId\":\"What taskId to start from.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getProposingTasks(address,uint256,uint256)\":{\"params\":{\"_fromTaskId\":\"What taskId to start from.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\",\"_proposer\":\"The proposer to fetch tasks of.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submission\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_application\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"changeScope(uint256,string,uint64,(bool,address,uint88)[])\":{\"notice\":\"Creates a request to change the scope.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[])\":{\"notice\":\"Create a new task.\"},\"dropExecutor(uint256,string)\":{\"notice\":\"Drops the current executor of the task\"},\"getExecutingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of an executor. Most recent ones first.\"},\"getProposingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of a proposer. Most recent ones first.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"taskStatistics()\":{\"notice\":\"Retrieves the current statistics of created tasks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Tasks/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    function __Escrow_init() external {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n        \\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbb063bd120ec52c90c612d4cef86ca5da1c4d2d8ae8e3983d431b7cf611eb42a\",\"license\":\"None\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Escrow } from \\\"./Escrow.sol\\\";\\r\\n\\r\\ninterface ITasks {\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotProposer();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget(uint8 index);\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n\\r\\n    event TaskCreated(uint256 taskId, address proposer, string metadata, uint64 deadline, ERC20Transfer[] budget);\\r\\n    event ApplicationCreated(uint256 taskId, uint16 applicationId, address applicant, string metadata, Reward[] reward);\\r\\n    event ApplicationsAccepted(uint256 taskId, uint16[] applications, address proposer);\\r\\n    event TaskTaken(uint256 taskId, uint16 applicationId, address applicant);\\r\\n    event SubmissionCreated(uint256 taskId, uint8 submissionId, address executor, string metadata);\\r\\n    event SubmissionReviewed(uint256 taskId, uint8 submissionId, address proposer, SubmissionJudgement judgement, string feedback);\\r\\n    event TaskCompleted(uint256 taskId);\\r\\n\\r\\n    event ChangeScopeRequested(uint256 taskId, uint8 requestId, address proposer, string metadata, uint64 deadline, Reward[] reward);\\r\\n    event DropExecutorRequested(uint256 taskId, uint8 requestId, address proposer, string explanation);\\r\\n    event CancelTaskRequested(uint256 taskId, uint8 requestId, address proposer, string explanation);\\r\\n    event RequestAccepted(uint256 taskId, RequestType requestType, uint8 requestId, address executor);\\r\\n    event TaskCancelled(uint256 taskId);\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to; // Might change this to index instead of address array, will do some gas testing\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param metadata Metadata of the application. (IPFS hash)\\r\\n    /// @param timestamp When the application has been made.\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the proposer.\\r\\n    /// @param reward How much rewards the applicant want for completion.\\r\\n    struct Application {\\r\\n        string metadata;\\r\\n        uint64 timestamp;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        string metadata;\\r\\n        uint64 timestamp;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement { None, Accepted, Rejected }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @param timestamp When the submission has been made.\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    /// @param judgementTimestamp When the judgement has been made.\\r\\n    /// @param feedback A response from the proposer. (IPFS hash)\\r\\n    struct Submission {\\r\\n        string metadata;\\r\\n        uint64 timestamp;\\r\\n        SubmissionJudgement judgement;\\r\\n        uint64 judgementTimestamp;\\r\\n        string feedback;\\r\\n    }\\r\\n\\r\\n    enum RequestType { ChangeScope, DropExecutor, CancelTask }\\r\\n\\r\\n    /// @notice A container for a request to change the scope of a task.\\r\\n    /// @param accepted When the request was accepted (0 = not accepted)\\r\\n    /// @param metadata New task metadata. (IPFS hash)\\r\\n    /// @param timestamp When the request was made.\\r\\n    /// @param deadline New deadline for the task.\\r\\n    /// @param reward New reward for the executor of the task.\\r\\n    struct ChangeScopeRequest {\\r\\n        string metadata;\\r\\n        uint64 timestamp;\\r\\n        uint64 accepted;\\r\\n        uint64 deadline;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainChangeScopeRequest {\\r\\n        string metadata;\\r\\n        uint64 timestamp;\\r\\n        uint64 accepted;\\r\\n        uint64 deadline;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to drop the executor of a task.\\r\\n    /// @param accepted When the request was accepted (0 = not accepted)\\r\\n    /// @param explanation Why the executor should be dropped.\\r\\n    /// @param timestamp When the request was made.\\r\\n    struct DropExecutorRequest {\\r\\n        string explanation;\\r\\n        uint64 timestamp;\\r\\n        uint64 accepted;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param accepted When the request was accepted (0 = not accepted)\\r\\n    /// @param explanation Why the task should be cancelled.\\r\\n    /// @param timestamp When the request was made.\\r\\n    struct CancelTaskRequest {\\r\\n        string explanation;\\r\\n        uint64 timestamp;\\r\\n        uint64 accepted;\\r\\n    }\\r\\n\\r\\n    enum TaskState { Open, Taken, Closed }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param proposer Who has created the task.\\r\\n    /// @param creationTimestamp When the task has been created.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param executorConfirmationTimestamp When the executor has confirmed to take the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    struct Task {\\r\\n        string metadata;\\r\\n\\r\\n        uint64 creationTimestamp;\\r\\n        uint64 executorConfirmationTimestamp;\\r\\n        uint64 deadline;\\r\\n\\r\\n        Escrow escrow;\\r\\n\\r\\n        address proposer;\\r\\n        TaskState state;\\r\\n        bool changed;\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        uint8 changeScopeRequestCount;\\r\\n        uint8 dropExecutorRequestCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        mapping(uint8 => ChangeScopeRequest) changeScopeRequests;\\r\\n        mapping(uint8 => DropExecutorRequest) dropExecutorRequests;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        uint64 creationTimestamp;\\r\\n        uint64 executorConfirmationTimestamp;\\r\\n        uint16 executorApplication;\\r\\n        address proposer;\\r\\n        TaskState state;\\r\\n        bool changed;\\r\\n        Escrow escrow;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        OffChainChangeScopeRequest[] changeScopeRequests;\\r\\n        DropExecutorRequest[] dropExecutorRequests;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n    \\r\\n    /// @notice Retrieves the current statistics of created tasks.\\r\\n    function taskStatistics() external view returns (uint256 openTasks, uint256 takenTasks, uint256 successfulTasks);\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n    \\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of a proposer. Most recent ones first.\\r\\n    /// @param _proposer The proposer to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getProposingTasks(\\r\\n        address _proposer,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\\r\\n    /// @param _executor The executor to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget\\r\\n    ) external returns (uint256 taskId);\\r\\n    \\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId);\\r\\n    \\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applications Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applications\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _application Index of application you made that has been accepted.\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _application\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n    \\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submission Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submission,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Creates a request to change the scope.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New description of the task. (IPFS hash)\\r\\n    /// @param _newDeadline New deadline of the task.\\r\\n    /// @param _newReward New reward of the task.\\r\\n    function changeScope(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata,\\r\\n        uint64 _newDeadline,\\r\\n        Reward[] calldata _newReward\\r\\n    ) external returns (uint8 changeTaskRequestId);\\r\\n\\r\\n    /// @notice Drops the current executor of the task\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the executor should be dropped.\\r\\n    function dropExecutor(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 dropExecutorRequestId);\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xbba20068aeb1ce842939ea14dc93872b1a3b8526f4d2526cd22f9637b5be236d\",\"license\":\"None\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITasks, IERC20, Escrow } from \\\"./ITasks.sol\\\";\\r\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ncontract Tasks is ITasks {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice Various statistics about total tasks.\\r\\n    uint256 private openTasks;\\r\\n    uint256 private takenTasks;\\r\\n    uint256 private successfulTasks;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address private escrowImplementation;\\r\\n\\r\\n    constructor() {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function taskStatistics() external view returns (uint256 open, uint256 taken, uint256 successful) {\\r\\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        offchainTask.metadata = task.metadata;\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.creationTimestamp = task.creationTimestamp;\\r\\n        offchainTask.executorConfirmationTimestamp = task.executorConfirmationTimestamp;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.proposer = task.proposer;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        offchainTask.applications = new OffChainApplication[](task.applicationCount);\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].metadata = application.metadata;\\r\\n            offchainTask.applications[i].timestamp = application.timestamp;\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n            offchainTask.applications[i].reward = new Reward[](application.rewardCount);\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.changeScopeRequests = new OffChainChangeScopeRequest[](task.changeScopeRequestCount);\\r\\n        for (uint8 i; i < offchainTask.changeScopeRequests.length; ) {\\r\\n            offchainTask.changeScopeRequests[i].metadata = task.changeScopeRequests[i].metadata;\\r\\n            offchainTask.changeScopeRequests[i].accepted = task.changeScopeRequests[i].accepted;\\r\\n            offchainTask.changeScopeRequests[i].deadline = task.changeScopeRequests[i].deadline;\\r\\n            offchainTask.changeScopeRequests[i].reward = new Reward[](task.changeScopeRequests[i].rewardCount);\\r\\n            for (uint8 j; j < offchainTask.changeScopeRequests[i].reward.length; ) {\\r\\n                offchainTask.changeScopeRequests[i].reward[j] = task.changeScopeRequests[i].reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.dropExecutorRequests = new DropExecutorRequest[](task.dropExecutorRequestCount);\\r\\n        for (uint8 i; i < offchainTask.dropExecutorRequests.length; ) {\\r\\n            offchainTask.dropExecutorRequests[i] = task.dropExecutorRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](task.cancelTaskRequestCount);\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](_taskIds.length);\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getProposingTasks(\\r\\n        address _proposer,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 proposerTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\\r\\n            if (tasks[i].proposer == _proposer) {\\r\\n                taskIndexes[proposerTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++proposerTasksCount;\\r\\n                }\\r\\n                if (proposerTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, proposerTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 executorTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\\r\\n            if (tasks[i].state != TaskState.Open && tasks[i].applications[tasks[i].executorApplication].applicant == _executor) {\\r\\n                taskIndexes[executorTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++executorTasksCount;\\r\\n                }\\r\\n                if (executorTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget\\r\\n    ) external returns (uint256 taskId) {\\r\\n        unchecked {\\r\\n            taskId = taskCounter++;\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.metadata = _metadata;\\r\\n        task.deadline = _deadline;\\r\\n        task.budgetCount = uint8(_budget.length);\\r\\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\\r\\n        escrow.__Escrow_init();\\r\\n        task.escrow = escrow;\\r\\n        for (uint8 i; i < _budget.length; ) {\\r\\n            _budget[i].tokenContract.transferFrom(msg.sender, address(escrow), _budget[i].amount);\\r\\n            task.budget[i] = _budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        task.creationTimestamp = uint64(block.timestamp);\\r\\n        task.proposer = msg.sender;\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n        unchecked {\\r\\n            ++openTasks;\\r\\n        }\\r\\n\\r\\n        emit TaskCreated(taskId, msg.sender, _metadata, _deadline, _budget);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n\\r\\n        Application storage application = task.applications[task.applicationCount];\\r\\n        unchecked {\\r\\n            applicationId = task.applicationCount++;\\r\\n        }\\r\\n        application.metadata = _metadata;\\r\\n        application.timestamp = uint64(block.timestamp);\\r\\n        application.applicant = msg.sender;\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 alreadyReserved;\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\\r\\n            unchecked {\\r\\n                alreadyReserved += _reward[i].amount;\\r\\n            }\\r\\n            if (alreadyReserved > erc20Transfer.amount) {\\r\\n                revert RewardAboveBudget(i);\\r\\n            }\\r\\n\\r\\n            application.reward[i] = _reward[i];\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                alreadyReserved = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ApplicationCreated(_taskId, applicationId, msg.sender, _metadata, _reward);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applications\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n        if (task.proposer != msg.sender) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        for (uint i; i < _applications.length; ) {\\r\\n            if (_applications[i] >= task.applicationCount) {\\r\\n                revert ApplicationDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            task.applications[_applications[i]].accepted = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ApplicationsAccepted(_taskId, _applications, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _application\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n        if (_application >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Application storage application_ = task.applications[_application];\\r\\n        if (application_.applicant != msg.sender) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n        if (!application_.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n\\r\\n        task.executorApplication = _application;\\r\\n        task.executorConfirmationTimestamp = uint64(block.timestamp);\\r\\n\\r\\n        task.state = TaskState.Taken;\\r\\n        unchecked {\\r\\n            --openTasks;\\r\\n            ++takenTasks;\\r\\n        }\\r\\n\\r\\n        emit TaskTaken(_taskId, _application, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.applications[task.executorApplication].applicant != msg.sender) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n\\r\\n        Submission storage submission = task.submissions[task.submissionCount];\\r\\n        unchecked { \\r\\n            submissionId = task.submissionCount++;\\r\\n        }\\r\\n        submission.metadata = _metadata;\\r\\n        submission.timestamp = uint64(block.timestamp);\\r\\n\\r\\n        emit SubmissionCreated(_taskId, submissionId, msg.sender, _metadata);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submission,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.proposer != msg.sender) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n        if (_submission >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Submission storage submission_ = task.submissions[_submission];\\r\\n        if (submission_.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n        // You can judge with judgement None, to give feedback without any judgement yet\\r\\n        // You can then call this function again to overwrite the feedback (kinda like a draft)\\r\\n        submission_.judgement = _judgement;\\r\\n        submission_.judgementTimestamp = uint64(block.timestamp);\\r\\n        submission_.feedback = _feedback;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            Application storage executor = task.applications[task.executorApplication];\\r\\n            address proposer = task.proposer;\\r\\n            Escrow escrow = task.escrow;\\r\\n\\r\\n            uint8 j;\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n            uint8 rewardCount = executor.rewardCount;\\r\\n            for (uint8 i; i < rewardCount; ) {\\r\\n                Reward memory reward = executor.reward[i];\\r\\n                escrow.transfer(erc20Transfer.tokenContract, executor.applicant, reward.amount);\\r\\n                unchecked {\\r\\n                    erc20Transfer.amount -= reward.amount;\\r\\n                }\\r\\n\\r\\n                if (reward.nextToken) {\\r\\n                    if (erc20Transfer.amount > 0) {\\r\\n                        escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n                    }\\r\\n\\r\\n                    unchecked {\\r\\n                        erc20Transfer = task.budget[++j];\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            uint8 budgetCount = task.budgetCount;\\r\\n            while (j < budgetCount) {\\r\\n                escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n                \\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            task.state = TaskState.Closed;\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++successfulTasks;\\r\\n            }\\r\\n\\r\\n            emit TaskCompleted(_taskId);\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(_taskId, _submission, msg.sender, _judgement, _feedback);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function changeScope(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata,\\r\\n        uint64 _newDeadline,\\r\\n        Reward[] calldata _newReward\\r\\n    ) external returns (uint8 changeTaskRequestId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.proposer != msg.sender) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        ChangeScopeRequest storage request = task.changeScopeRequests[task.changeScopeRequestCount];\\r\\n        request.metadata = _newMetadata;\\r\\n        request.timestamp = uint64(block.timestamp);\\r\\n        request.deadline = _newDeadline;\\r\\n        request.rewardCount = uint8(_newReward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 needed;\\r\\n        for (uint8 i; i < uint8(_newReward.length); ) {\\r\\n            unchecked {\\r\\n                needed += _newReward[i].amount;\\r\\n            }\\r\\n\\r\\n            request.reward[i] = _newReward[i];\\r\\n\\r\\n            if (_newReward[i].nextToken) {\\r\\n                if (needed > erc20Transfer.amount) {\\r\\n                    // Excisting budget in escrow doesnt cover the new reward\\r\\n                    erc20Transfer.tokenContract.transferFrom(msg.sender, address(task.escrow), needed - erc20Transfer.amount);\\r\\n                }\\r\\n\\r\\n                needed = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            changeTaskRequestId = task.changeScopeRequestCount++;\\r\\n        }\\r\\n        \\r\\n        emit ChangeScopeRequested(_taskId, changeTaskRequestId, msg.sender, _newMetadata, _newDeadline, _newReward);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function dropExecutor(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 dropExecutorRequestId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.proposer != msg.sender) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        DropExecutorRequest storage request = task.dropExecutorRequests[task.dropExecutorRequestCount];\\r\\n        request.explanation = _explanation;\\r\\n        request.timestamp = uint64(block.timestamp);\\r\\n        unchecked {\\r\\n            dropExecutorRequestId = task.dropExecutorRequestCount++;\\r\\n        }\\r\\n\\r\\n        emit DropExecutorRequested(_taskId, dropExecutorRequestId, msg.sender, _explanation);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.proposer != msg.sender) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Taken) {\\r\\n            if (task.deadline > uint64(block.timestamp)) {\\r\\n                // Deadline has not passed yet\\r\\n                CancelTaskRequest storage request = task.cancelTaskRequests[task.cancelTaskRequestCount];\\r\\n                request.explanation = _explanation;\\r\\n                request.timestamp = uint64(block.timestamp);\\r\\n                unchecked {\\r\\n                    cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n                }\\r\\n\\r\\n                emit CancelTaskRequested(_taskId, cancelTaskRequestId, msg.sender, _explanation);\\r\\n            }\\r\\n        }\\r\\n        else if (task.state == TaskState.Open) {\\r\\n            _refundProposer(task);\\r\\n            emit TaskCancelled(_taskId);\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        }\\r\\n        else revert TaskClosed();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.applications[task.executorApplication].applicant != msg.sender) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n        \\r\\n        if (_requestType == RequestType.ChangeScope) {\\r\\n            if (_requestId >= task.changeScopeRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n\\r\\n            ChangeScopeRequest storage request = task.changeScopeRequests[_requestId];\\r\\n            if (request.accepted != 0) {\\r\\n                revert RequestAlreadyAccepted();\\r\\n            }\\r\\n\\r\\n            task.metadata = request.metadata;\\r\\n            task.deadline = request.deadline;\\r\\n            task.changed = true;\\r\\n            Application storage executor = task.applications[task.executorApplication];\\r\\n            uint8 rewardCount = request.rewardCount;\\r\\n            executor.rewardCount = rewardCount;\\r\\n            for (uint8 i; i < rewardCount; ) {\\r\\n                executor.reward[i] = request.reward[i];\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            request.accepted = uint64(block.timestamp);\\r\\n        } else if (_requestType == RequestType.DropExecutor) {\\r\\n            if (_requestId >= task.dropExecutorRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            DropExecutorRequest storage request = task.dropExecutorRequests[_requestId];\\r\\n            if (request.accepted != 0) {\\r\\n                revert RequestAlreadyAccepted();\\r\\n            }\\r\\n\\r\\n            task.submissionCount = 0;\\r\\n            if (task.changed) {\\r\\n                task.applicationCount = 0;\\r\\n                task.changed = false; // hmm maybe questionable, would be better in case the new executor is dropped again and the task is not changed again, but does not make sense ux wise\\r\\n            }\\r\\n\\r\\n            task.state = TaskState.Open;\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++openTasks;\\r\\n            }\\r\\n\\r\\n            request.accepted = uint64(block.timestamp);\\r\\n        } else { // if (_requestType == RequestType.CancelTask) {\\r\\n            if (_requestId >= task.cancelTaskRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[_requestId];\\r\\n            if (request.accepted != 0) {\\r\\n                revert RequestAlreadyAccepted();\\r\\n            }\\r\\n\\r\\n            _refundProposer(task);\\r\\n            emit TaskCancelled(_taskId);\\r\\n\\r\\n            request.accepted = uint64(block.timestamp);\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(_taskId, _requestType, _requestId, msg.sender);\\r\\n    }\\r\\n    \\r\\n    function _refundProposer(Task storage task) internal {\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        address proposer = task.proposer;\\r\\n        Escrow escrow = task.escrow;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Open) {\\r\\n            unchecked {\\r\\n                --openTasks;\\r\\n            }\\r\\n        } else if (task.state == TaskState.Taken) {\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n            }\\r\\n        }\\r\\n        task.state = TaskState.Closed;\\r\\n\\r\\n        // Possibly could do some assembly trickery here to get the index of the task and emit TaskCancelled\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbf6fc29a3384c417ddb9f151f56c0dd5cb7bd8c684721ecb00d192036fd218e9\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620000209062000064565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b039290921691909117905562000072565b6102a98062005c2683390190565b615ba480620000826000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806376645a9311610097578063b685504b11610066578063b685504b14610252578063b6cb58a514610265578063e3ee50d41461026d578063ecb8adae1461028057600080fd5b806376645a93146101f857806377b984191461020b578063a11484121461021e578063a5e99c4e1461023f57600080fd5b80633f74d41d116100d35780633f74d41d1461017657806352a63d49146101895780635ac1d773146101af57806362b65da9146101d357600080fd5b80630353ce60146101055780631d65e77e1461012e5780633a05f7541461014e5780633f561a4014610163575b600080fd5b610118610113366004614696565b610293565b6040516101259190614c93565b60405180910390f35b61014161013c366004614d13565b6103c3565b6040516101259190614d2c565b61016161015c366004614d64565b61167e565b005b610161610171366004614da2565b611ee0565b610118610184366004614696565b61214b565b61019c610197366004614eaf565b6122e4565b60405161ffff9091168152602001610125565b60015460025460035460408051938452602084019290925290820152606001610125565b6101e66101e1366004614f41565b6126e4565b60405160ff9091168152602001610125565b610118610206366004614ffd565b612bf1565b6101616102193660046150d9565b612d2e565b61023161022c366004615139565b61354e565b604051908152602001610125565b6101e661024d3660046151ea565b613902565b610161610260366004615248565b613b44565b600054610231565b6101e661027b3660046151ea565b613e63565b6101e661028e3660046151ea565b61407d565b600080546060918167ffffffffffffffff8111156102b3576102b3614fce565b6040519080825280602002602001820160405280156102dc578160200160208202803683370190505b5090506000856000036102f7576102f4600184615274565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103a65760008181526004602052604090206003015473ffffffffffffffffffffffffffffffffffffffff808a1691160361037f5780838381518110610364576103646152b4565b602002602001018181525050816001019150858203156103a6575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016102f9565b5080830382510382526103b882612bf1565b979650505050505050565b610454604080516101e081018252606080825260006020830181905292820183905281018290526080810182905260a081018290529060c08201908152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b600054821061048f576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600460205260409020805481906104aa906152e3565b80601f01602080910402602001604051908101604052809291908181526020018280546104d6906152e3565b80156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b5050509184525050600181015467ffffffffffffffff700100000000000000000000000000000000820481166020850152808216604085015268010000000000000000909104166060830152600381015461ffff760100000000000000000000000000000000000000000000820416608084015273ffffffffffffffffffffffffffffffffffffffff811660a084015260c083019060ff740100000000000000000000000000000000000000009091041660028111156105e5576105e561472f565b908160028111156105f8576105f861472f565b905250600281015473ffffffffffffffffffffffffffffffffffffffff1661010083015260038101547801000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561065857610658614fce565b60405190808252806020026020018201604052801561069d57816020015b60408051808201909152600080825260208201528152602001906001900390816106765790505b5061012083015260005b826101200151518160ff1610156107495760ff8116600081815260048401602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16908201526101208501518051919290918110610736576107366152b4565b60209081029190910101526001016106a7565b506003810154790100000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff81111561078857610788614fce565b60405190808252806020026020018201604052801561080d57816020015b6107fa6040518060a0016040528060608152602001600067ffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b8152602001906001900390816107a65790505b5061014083015260005b826101400151518160ff161015610bdd5760ff81166000908152600583016020526040902080548190610849906152e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610875906152e3565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b50505050508461014001518360ff16815181106108e1576108e16152b4565b6020908102919091010151526001810154610140850151805167ffffffffffffffff9092169160ff851690811061091a5761091a6152b4565b60200260200101516020019067ffffffffffffffff16908167ffffffffffffffff16815250508060010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461014001518360ff168151811061097f5761097f6152b4565b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff9091166040909101526001810154610140850151805160ff7c010000000000000000000000000000000000000000000000000000000090930483169285169081106109ec576109ec6152b4565b602090810291909101015190151560609091015260018101547d010000000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610a4157610a41614fce565b604051908082528060200260200182016040528015610aaa57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610a5f5790505b508461014001518360ff1681518110610ac557610ac56152b4565b60200260200101516080018190525060005b8461014001518360ff1681518110610af157610af16152b4565b602002602001015160800151518160ff161015610bd35760ff81811660009081526002840160209081526040918290208251606081018452905480851615158252610100810473ffffffffffffffffffffffffffffffffffffffff169282019290925275010000000000000000000000000000000000000000009091046affffffffffffffffffffff1691810191909152610140870151805191929091908616908110610ba057610ba06152b4565b6020026020010151608001518260ff1681518110610bc057610bc06152b4565b6020908102919091010152600101610ad7565b5050600101610817565b5060038101547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610c1d57610c1d614fce565b604051908082528060200260200182016040528015610c8157816020015b610c6e6040805160a081018252606081526000602082018190529091820190815260006020820152606060409091015290565b815260200190600190039081610c3b5790505b5061016083015260005b826101600151518160ff161015610e7e5760ff8116600090815260068301602052604090819020815160a08101909252805482908290610cca906152e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf6906152e3565b8015610d435780601f10610d1857610100808354040283529160200191610d43565b820191906000526020600020905b815481529060010190602001808311610d2657829003601f168201915b5050509183525050600182015467ffffffffffffffff8116602083015260409091019068010000000000000000900460ff166002811115610d8657610d8661472f565b6002811115610d9757610d9761472f565b815260018201546901000000000000000000900467ffffffffffffffff166020820152600282018054604090920191610dcf906152e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfb906152e3565b8015610e485780601f10610e1d57610100808354040283529160200191610e48565b820191906000526020600020905b815481529060010190602001808311610e2b57829003601f168201915b5050505050815250508361016001518260ff1681518110610e6b57610e6b6152b4565b6020908102919091010152600101610c8b565b5060038101547c0100000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610ebf57610ebf614fce565b604051908082528060200260200182016040528015610f4057816020015b610f2d6040518060a0016040528060608152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001606081525090565b815260200190600190039081610edd5790505b5061018083015260005b826101800151518160ff1610156112d85760ff8116600090815260078301602052604090208054610f7a906152e3565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa6906152e3565b8015610ff35780601f10610fc857610100808354040283529160200191610ff3565b820191906000526020600020905b815481529060010190602001808311610fd657829003601f168201915b50505050508361018001518260ff1681518110611012576110126152b4565b6020026020010151600001819052508160070160008260ff1660ff16815260200190815260200160002060010160089054906101000a900467ffffffffffffffff168361018001518260ff168151811061106e5761106e6152b4565b60209081029190910181015167ffffffffffffffff92831660409182015260ff8416600081815260078701909352912060010154610180860151805170010000000000000000000000000000000090920490931692919081106110d3576110d36152b4565b60209081029190910181015167ffffffffffffffff92831660609091015260ff80841660009081526007860190925260409091206001015478010000000000000000000000000000000000000000000000009004169081111561113857611138614fce565b6040519080825280602002602001820160405280156111a157816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816111565790505b508361018001518260ff16815181106111bc576111bc6152b4565b60200260200101516080018190525060005b8361018001518260ff16815181106111e8576111e86152b4565b602002602001015160800151518160ff1610156112cf5760ff8281166000818152600786016020908152604080832086861684526002018252918290208251606081018452905494851615158152610100850473ffffffffffffffffffffffffffffffffffffffff169181019190915275010000000000000000000000000000000000000000009093046affffffffffffffffffffff16908301526101808601518051909190811061129c5761129c6152b4565b6020026020010151608001518260ff16815181106112bc576112bc6152b4565b60209081029190910101526001016111ce565b50600101610f4a565b5060038101547d010000000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561131a5761131a614fce565b60405190808252806020026020018201604052801561138357816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816113385790505b506101a083015260005b826101a00151518160ff1610156114a75760ff81166000908152600883016020526040908190208151606081019092528054829082906113cc906152e3565b80601f01602080910402602001604051908101604052809291908181526020018280546113f8906152e3565b80156114455780601f1061141a57610100808354040283529160200191611445565b820191906000526020600020905b81548152906001019060200180831161142857829003601f168201915b50505091835250506001919091015467ffffffffffffffff808216602084015268010000000000000000909104166040909101526101a0840151805160ff8416908110611494576114946152b4565b602090810291909101015260010161138d565b5060038101547e01000000000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156114ea576114ea614fce565b60405190808252806020026020018201604052801561155357816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816115085790505b506101c083015260005b826101c00151518160ff1610156116775760ff811660009081526009830160205260409081902081516060810190925280548290829061159c906152e3565b80601f01602080910402602001604051908101604052809291908181526020018280546115c8906152e3565b80156116155780601f106115ea57610100808354040283529160200191611615565b820191906000526020600020905b8154815290600101906020018083116115f857829003601f168201915b50505091835250506001919091015467ffffffffffffffff808216602084015268010000000000000000909104166040909101526101c0840151805160ff8416908110611664576116646152b4565b602090810291909101015260010161155d565b5050919050565b60005483106116b9576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526004602052604090206001600382015474010000000000000000000000000000000000000000900460ff1660028111156116fa576116fa61472f565b14611731576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015461ffff76010000000000000000000000000000000000000000000090910416600090815260058201602052604090206001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1633146117c3576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008360028111156117d7576117d761472f565b03611b5b57600381015460ff7c0100000000000000000000000000000000000000000000000000000000909104811690831610611840576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff821660009081526007820160205260409020600181015468010000000000000000900467ffffffffffffffff16156118a6576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816118b18282615385565b5060018082018054848301805467ffffffffffffffff70010000000000000000000000000000000093849004169092027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff9092169190911790556003840180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000179081905561ffff7601000000000000000000000000000000000000000000009091041660009081526005850160205260408120915492820180547d010000000000000000000000000000000000000000000000000000000000780100000000000000000000000000000000000000000000000090950460ff169485027fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790559091905b8160ff168160ff161015611b135760ff808216600090815260028087016020908152604080842092880190915290912081548154931615157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00841681178255825473ffffffffffffffffffffffffffffffffffffffff6101009182900416027fffffffffffffffffffffff0000000000000000000000000000000000000000ff9091167fffffffffffffffffffffff000000000000000000000000000000000000000000909416939093179290921780835590546affffffffffffffffffffff750100000000000000000000000000000000000000000091829004160274ffffffffffffffffffffffffffffffffffffffffff9091161790556001016119f2565b50505060010180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004267ffffffffffffffff1602179055611e9d565b6001836002811115611b6f57611b6f61472f565b03611d5457600381015460ff7d010000000000000000000000000000000000000000000000000000000000909104811690831610611bd9576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff821660009081526008820160205260409020600181015468010000000000000000900467ffffffffffffffff1615611c3f576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003820180547fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff16908190557501000000000000000000000000000000000000000000900460ff1615611cb7576003820180547fffffffffff0000ffffff00ffffffffffffffffffffffffffffffffffffffffff1690555b6003820180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905560018054810181550180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004267ffffffffffffffff1602179055611e9d565b600381015460ff7e01000000000000000000000000000000000000000000000000000000000000909104811690831610611dba576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff821660009081526009820160205260409020600181015468010000000000000000900467ffffffffffffffff1615611e20576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611e298261435a565b6040518581527fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed69060200160405180910390a160010180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004267ffffffffffffffff16021790555b7fce2f94343016cc2d72dc2166003de5be2e784e7983d609563fb696998b72117784848433604051611ed294939291906154c0565b60405180910390a150505050565b6000548310611f1b576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083815260046020526040812090600382015474010000000000000000000000000000000000000000900460ff166002811115611f5b57611f5b61472f565b14611f92576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff163314611fe5576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82811015612115576003820154790100000000000000000000000000000000000000000000000000900461ffff16848483818110612028576120286152b4565b905060200201602081019061203d9190615504565b61ffff1610612078576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826005016000868685818110612092576120926152b4565b90506020020160208101906120a79190615504565b61ffff1681526020810191909152604001600020600190810180549215157c0100000000000000000000000000000000000000000000000000000000027fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9093169290921790915501611fe8565b507fc1ad33a134f6e7dbb5a91cc377bf5a8e998799046658fbaa2b9ff9e30343b84284848433604051611ed2949392919061551f565b600080546060918167ffffffffffffffff81111561216b5761216b614fce565b604051908082528060200260200182016040528015612194578160200160208202803683370190505b5090506000856000036121af576121ac600184615274565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146103a6576000808281526004602052604090206003015474010000000000000000000000000000000000000000900460ff1660028111156122175761221761472f565b1415801561228a575060008181526004602090815260408083206003810154760100000000000000000000000000000000000000000000900461ffff16845260050190915290206001015473ffffffffffffffffffffffffffffffffffffffff8981166801000000000000000090920416145b156122bd57808383815181106122a2576122a26152b4565b602002602001018181525050816001019150858203156103a6575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016121b1565b600080548610612320576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600086815260046020526040812090600382015474010000000000000000000000000000000000000000900460ff1660028111156123605761236061472f565b14612397576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038101805479010000000000000000000000000000000000000000000000000080820461ffff908116600081815260058701602052604090207fffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffff909416600182019092169092021790925590925080612412878983615590565b506001810180544267ffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090911617336801000000000000000002177fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167d01000000000000000000000000000000000000000000000000000000000060ff8716021790556000808052600483016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff80891690821610156126925788888260ff16818110612527576125276152b4565b905060600201604001602081019061253f91906156c3565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff168211156125a6576040517f6e52358c00000000000000000000000000000000000000000000000000000000815260ff821660048201526024015b60405180910390fd5b88888260ff168181106125bb576125bb6152b4565b60ff8416600090815260028901602052604090206060909102929092019190506125e582826156ee565b90505088888260ff168181106125fd576125fd6152b4565b612613926020606090920201908101915061579f565b1561268a5760ff60019094019384166000908152600487016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101612504565b507fa11d0b61a08c8de555085ed30826dbf0e2497415c6b6521961c6f3634638423f8b87338d8d8d8d6040516126ce9796959493929190615886565b60405180910390a1505050505095945050505050565b600080548710612720576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008781526004602052604090206001600382015474010000000000000000000000000000000000000000900460ff1660028111156127615761276161472f565b14612798576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff1633146127eb576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038101547c0100000000000000000000000000000000000000000000000000000000900460ff16600090815260078201602052604090208061282f888a83615590565b506001810180544267ffffffffffffffff9081167fffffffffffffffff0000000000000000ffffffffffffffff00000000000000009092169190911770010000000000000000000000000000000091891691909102177fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000060ff8716021790556000808052600483016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8089169082161015612b675788888260ff16818110612951576129516152b4565b905060600201604001602081019061296991906156c3565b6affffffffffffffffffffff168201915088888260ff1681811061298f5761298f6152b4565b60ff8416600090815260028901602052604090206060909102929092019190506129b982826156ee565b90505088888260ff168181106129d1576129d16152b4565b6129e7926020606090920201908101915061579f565b15612b5f5782602001516bffffffffffffffffffffffff16821115612aed5782516002870154602085015173ffffffffffffffffffffffffffffffffffffffff928316926323b872dd923392911690612a4e906bffffffffffffffffffffffff1687615274565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb91906158e7565b505b60ff60019094019384166000908152600487016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b60010161292e565b5084600301601c81819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff16021790555095507f071a066483581655e4b95137227bfdfd90a717d9e1a513d76fb601c71def8b768c87338e8e8e8e8e604051612bda989796959493929190615904565b60405180910390a150505050509695505050505050565b60606000825167ffffffffffffffff811115612c0f57612c0f614fce565b604051908082528060200260200182016040528015612cd157816020015b612cbe604080516101e081018252606080825260006020830181905292820183905281018290526080810182905260a081018290529060c08201908152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081612c2d5790505b50905060005b8351811015612d2757612d02848281518110612cf557612cf56152b4565b60200260200101516103c3565b828281518110612d1457612d146152b4565b6020908102919091010152600101612cd7565b5092915050565b6000548510612d69576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008581526004602052604090206001600382015474010000000000000000000000000000000000000000900460ff166002811115612daa57612daa61472f565b14612de1576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff163314612e34576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015460ff7b01000000000000000000000000000000000000000000000000000000909104811690861610612e97576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff85166000908152600682016020526040812090600182015468010000000000000000900460ff166002811115612ed157612ed161472f565b14612f08576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001810180548691907fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff1668010000000000000000836002811115612f4f57612f4f61472f565b02179055506001810180547fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff1669010000000000000000004267ffffffffffffffff160217905560028101612fa5848683615590565b506001856002811115612fba57612fba61472f565b03613504576003820154760100000000000000000000000000000000000000000000810461ffff1660009081526005840160209081526040808320600287015484805260048801845282852083518085019094525473ffffffffffffffffffffffffffffffffffffffff8082168552740100000000000000000000000000000000000000009091046bffffffffffffffffffffffff169484019490945260018201549195841694931692919060ff7d01000000000000000000000000000000000000000000000000000000000090910416825b8160ff168160ff16101561330b5760ff81811660009081526002890160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff9081169282019290925275010000000000000000000000000000000000000000009093046affffffffffffffffffffff16838301819052865160018c015493517fbeabacc800000000000000000000000000000000000000000000000000000000815290831660048201526801000000000000000090930482166024840152604483015287169063beabacc890606401600060405180830381600087803b15801561318957600080fd5b505af115801561319d573d6000803e3d6000fd5b5050505060408101516020850180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff1690528051156133025760208401516bffffffffffffffffffffffff161561329457835160208501516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b15801561327b57600080fd5b505af115801561328f573d6000803e3d6000fd5b505050505b60ff6001909501948516600090815260048b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff74010000000000000000000000000000000000000000909104169082015293505b5060010161308d565b5060038801547801000000000000000000000000000000000000000000000000900460ff165b8060ff168460ff16101561345857825160208401516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015288831660248201526bffffffffffffffffffffffff90911660448201529086169063beabacc890606401600060405180830381600087803b1580156133cd57600080fd5b505af11580156133e1573d6000803e3d6000fd5b50505060ff6001909501948516600090815260048b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff74010000000000000000000000000000000000000000909104169082015293506133319050565b600389810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905580546001019055604080518f815290517fc1fa7142cfb933d0855114a3bffde296944c30b727f297c14d0db4d553d3a5c79181900360200190a1505050505050505b7f03c517393f135331d7a758c4ef901924ac30ed6a463e5d948f120b43e863812d87873388888860405161353d96959493929190615975565b60405180910390a150505050505050565b600080546001810182558082526004602052604090912080613571878983615590565b506001810180547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000067ffffffffffffffff8816021790556003810180547fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000060ff86160217905560055460009061362a9073ffffffffffffffffffffffffffffffffffffffff166145a9565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561367457600080fd5b505af1158015613688573d6000803e3d6000fd5b505050506002820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905560005b60ff81168511156138455785858260ff168181106136f1576136f16152b4565b61370792602060409092020190810191506159c3565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd338489898660ff16818110613739576137396152b4565b905060400201602001602081019061375191906159fa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af11580156137d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137fc91906158e7565b5085858260ff16818110613812576138126152b4565b60ff841660009081526004870160205260409081902091029290920191905061383b8282615a17565b50506001016136d1565b50600182810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff16179055600383018054337fffffffffffffffffffffffff00000000000000000000000000000000000000009091168117909155815482019091556040517f90e340de55de9dc993bdccfdcd5b64c700be20c8bf9abe06b24c1ce5bc902b55916138ef918691908c908c908c908c908c90615a7c565b60405180910390a1505095945050505050565b60008054841061393e576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526004602052604090206001600382015474010000000000000000000000000000000000000000900460ff16600281111561397f5761397f61472f565b146139b6576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015461ffff76010000000000000000000000000000000000000000000090910416600090815260058201602052604090206001015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163314613a48576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810180547b0100000000000000000000000000000000000000000000000000000080820460ff908116600081815260068701602052604090207fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff909416600182019092169092021790925590925080613ac4858783615590565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff161790556040517fea7224f31e314f15c34c3e2df7261324db1a63035701c2e701c5a64d1b2e1faa90613b33908890869033908a908a90615b2f565b60405180910390a150509392505050565b6000548210613b7f576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082815260046020526040812090600382015474010000000000000000000000000000000000000000900460ff166002811115613bbf57613bbf61472f565b14613bf6576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015461ffff790100000000000000000000000000000000000000000000000000909104811690831610613c58576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff821660009081526005820160205260409020600181015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff163314613ccc576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018101547c0100000000000000000000000000000000000000000000000000000000900460ff16613d2a576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382018054600180850180547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff16680100000000000000004267ffffffffffffffff16021790557fffffffffffffffff0000ff00ffffffffffffffffffffffffffffffffffffffff90911676010000000000000000000000000000000000000000000061ffff87169081027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1691909117740100000000000000000000000000000000000000001790925580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01815560028054909101905560408051868152602081019290925233908201527faf6a7b9d6c1a71672e146c0869b4d6ad101d5f4f93426670cc55cd131670af0990606001611ed2565b600080548410613e9f576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008481526004602052604090206001600382015474010000000000000000000000000000000000000000900460ff166002811115613ee057613ee061472f565b14613f17576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff163314613f6a576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038101547d010000000000000000000000000000000000000000000000000000000000900460ff166000908152600882016020526040902080613faf858783615590565b50600181810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff161790556003830180547fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81167d0100000000000000000000000000000000000000000000000000000000009182900460ff908116948501169091021790556040519093507f47ea7a05ee2655ada235360529579fe768fc62803b827bc36508901b6f18c97390613b33908890869033908a908a90615b2f565b6000805484106140b9576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600381015473ffffffffffffffffffffffffffffffffffffffff16331461411a576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600382015474010000000000000000000000000000000000000000900460ff16600281111561414d5761414d61472f565b036142a357600181015467ffffffffffffffff42811670010000000000000000000000000000000090920416111561429e5760038101547e01000000000000000000000000000000000000000000000000000000000000900460ff1660009081526009820160205260409020806141c5858783615590565b50600181810180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff161790556003830180547fff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81167e010000000000000000000000000000000000000000000000000000000000009182900460ff908116948501169091021790556040519093507fd4e9b03ac35a360fcefedd00aea3c7ca16c89d0b28b061444b789ba7f3e252c190614294908890869033908a908a90615b2f565b60405180910390a1505b614352565b6000600382015474010000000000000000000000000000000000000000900460ff1660028111156142d6576142d661472f565b03614320576142e48161435a565b6040518581527fc6eacc3aa5b2aa77b5a826b832a804ca0b71830ec74f9aa57a15edd978c31ed69060200160405180910390a160ff9150614352565b6040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509392505050565b6003810154600282015460ff78010000000000000000000000000000000000000000000000008304169173ffffffffffffffffffffffffffffffffffffffff908116911660005b8360ff168160ff16101561449d5760ff811660009081526004868101602090815260409283902083518085018552905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905294517fbeabacc800000000000000000000000000000000000000000000000000000000815293840152868416602484015260448301919091529184169063beabacc890606401600060405180830381600087803b15801561447957600080fd5b505af115801561448d573d6000803e3d6000fd5b50505050816001019150506143a1565b506000600385015474010000000000000000000000000000000000000000900460ff1660028111156144d1576144d161472f565b0361450357600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055614564565b6001600385015474010000000000000000000000000000000000000000900460ff1660028111156145365761453661472f565b0361456457600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b50505060030180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661466c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640161259d565b919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461469357600080fd5b50565b6000806000606084860312156146ab57600080fd5b83356146b681614671565b95602085013595506040909401359392505050565b6000815180845260005b818110156146f1576020818501810151868301820152016146d5565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110614693577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b61479e8161475e565b9052565b600081518084526020808501945080840160005b83811015614801578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff1683880152604090960195908201906001016147b6565b509495945050505050565b600081518084526020808501945080840160005b838110156148015781518051151588528381015173ffffffffffffffffffffffffffffffffffffffff16848901526040908101516affffffffffffffffffffff169088015260609096019590820190600101614820565b600081518084526020808501808196508360051b8101915082860160005b85811015614927578284038952815160a081518187526148b7828801826146cb565b8389015167ffffffffffffffff16888a015260408085015173ffffffffffffffffffffffffffffffffffffffff16908901526060808501511515908901526080938401518882039489019490945291506149139050818361480c565b9a87019a9550505090840190600101614895565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614927578284038952815160a08151818752614974828801826146cb565b9150508682015167ffffffffffffffff80821689890152604091508184015161499c8161475e565b9188019190915260608381015190911690870152608091820151868203928701929092526149ca81836146cb565b9a87019a9550505090840190600101614952565b600081518084526020808501808196508360051b8101915082860160005b85811015614927578284038952815160a08151818752614a1e828801826146cb565b8389015167ffffffffffffffff908116898b01526040808601518216908a015260608086015190911690890152608093840151888203948901949094529150614a699050818361480c565b9a87019a95505050908401906001016149fc565b600081518084526020808501808196508360051b8101915082860160005b85811015614927578284038952815160608151818752614abd828801826146cb565b8389015167ffffffffffffffff908116898b015260409485015116939097019290925250509784019790840190600101614a9b565b60006101e08251818552614b08828601826146cb565b9150506020830151614b26602086018267ffffffffffffffff169052565b506040830151614b42604086018267ffffffffffffffff169052565b506060830151614b5e606086018267ffffffffffffffff169052565b506080830151614b74608086018261ffff169052565b5060a0830151614b9c60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0830151614baf60c0860182614795565b5060e0830151614bc360e086018215159052565b506101008381015173ffffffffffffffffffffffffffffffffffffffff16908501526101208084015185830382870152614bfd83826147a2565b925050506101408084015185830382870152614c198382614877565b925050506101608084015185830382870152614c358382614934565b925050506101808084015185830382870152614c5183826149de565b925050506101a08084015185830382870152614c6d8382614a7d565b925050506101c08084015185830382870152614c898382614a7d565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614d06577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614cf4858351614af2565b94509285019290850190600101614cba565b5092979650505050505050565b600060208284031215614d2557600080fd5b5035919050565b602081526000614d3f6020830184614af2565b9392505050565b6003811061469357600080fd5b803560ff8116811461466c57600080fd5b600080600060608486031215614d7957600080fd5b833592506020840135614d8b81614d46565b9150614d9960408501614d53565b90509250925092565b600080600060408486031215614db757600080fd5b83359250602084013567ffffffffffffffff80821115614dd657600080fd5b818601915086601f830112614dea57600080fd5b813581811115614df957600080fd5b8760208260051b8501011115614e0e57600080fd5b6020830194508093505050509250925092565b60008083601f840112614e3357600080fd5b50813567ffffffffffffffff811115614e4b57600080fd5b602083019150836020828501011115614e6357600080fd5b9250929050565b60008083601f840112614e7c57600080fd5b50813567ffffffffffffffff811115614e9457600080fd5b602083019150836020606083028501011115614e6357600080fd5b600080600080600060608688031215614ec757600080fd5b85359450602086013567ffffffffffffffff80821115614ee657600080fd5b614ef289838a01614e21565b90965094506040880135915080821115614f0b57600080fd5b50614f1888828901614e6a565b969995985093965092949392505050565b803567ffffffffffffffff8116811461466c57600080fd5b60008060008060008060808789031215614f5a57600080fd5b86359550602087013567ffffffffffffffff80821115614f7957600080fd5b614f858a838b01614e21565b9097509550859150614f9960408a01614f29565b94506060890135915080821115614faf57600080fd5b50614fbc89828a01614e6a565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561501057600080fd5b823567ffffffffffffffff8082111561502857600080fd5b818501915085601f83011261503c57600080fd5b81358181111561504e5761504e614fce565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561509157615091614fce565b6040529182528482019250838101850191888311156150af57600080fd5b938501935b828510156150cd578435845293850193928501926150b4565b98975050505050505050565b6000806000806000608086880312156150f157600080fd5b8535945061510160208701614d53565b9350604086013561511181614d46565b9250606086013567ffffffffffffffff81111561512d57600080fd5b614f1888828901614e21565b60008060008060006060868803121561515157600080fd5b853567ffffffffffffffff8082111561516957600080fd5b61517589838a01614e21565b909750955085915061518960208901614f29565b9450604088013591508082111561519f57600080fd5b818801915088601f8301126151b357600080fd5b8135818111156151c257600080fd5b8960208260061b85010111156151d757600080fd5b9699959850939650602001949392505050565b6000806000604084860312156151ff57600080fd5b83359250602084013567ffffffffffffffff81111561521d57600080fd5b61522986828701614e21565b9497909650939450505050565b803561ffff8116811461466c57600080fd5b6000806040838503121561525b57600080fd5b8235915061526b60208401615236565b90509250929050565b818103818111156152ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c908216806152f757607f821691505b602082108103615330577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561538057600081815260208120601f850160051c8101602086101561535d5750805b601f850160051c820191505b8181101561537c57828155600101615369565b5050505b505050565b818103615390575050565b61539a82546152e3565b67ffffffffffffffff8111156153b2576153b2614fce565b6153c6816153c084546152e3565b84615336565b6000601f82116001811461541857600083156153e25750848201545b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556154b9565b6000858152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841690600086815260209020845b838110156154705782860154825560019586019590910190602001615450565b50858310156154ac57818501547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b848152608081016154d08561475e565b84602083015260ff8416604083015273ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b60006020828403121561551657600080fd5b614d3f82615236565b84815260606020808301829052908201849052600090859060808401835b878110156155645761ffff61555185615236565b168252928201929082019060010161553d565b5080935050505073ffffffffffffffffffffffffffffffffffffffff8316604083015295945050505050565b67ffffffffffffffff8311156155a8576155a8614fce565b6155bc836155b683546152e3565b83615336565b6000601f84116001811461560e57600085156155d85750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556154b9565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561565d578685013582556020948501946001909201910161563d565b5086821015615698577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b6affffffffffffffffffffff8116811461469357600080fd5b6000602082840312156156d557600080fd5b8135614d3f816156aa565b801515811461469357600080fd5b81356156f9816156e0565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff169182178355602084013561573781614671565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff0000000000000000000000000000000000000000008184828516171785556040860135925061578e836156aa565b921760a89190911b90911617905550565b6000602082840312156157b157600080fd5b8135614d3f816156e0565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015614801578135615828816156e0565b151587528183013561583981614671565b73ffffffffffffffffffffffffffffffffffffffff1687840152604082810135615862816156aa565b6affffffffffffffffffffff16908801526060968701969190910190600101615815565b87815261ffff8716602082015273ffffffffffffffffffffffffffffffffffffffff8616604082015260a0606082015260006158c660a0830186886157bc565b82810360808401526158d9818587615805565b9a9950505050505050505050565b6000602082840312156158f957600080fd5b8151614d3f816156e0565b88815260ff8816602082015273ffffffffffffffffffffffffffffffffffffffff8716604082015260c06060820152600061594360c0830187896157bc565b67ffffffffffffffff8616608084015282810360a0840152615966818587615805565b9b9a5050505050505050505050565b86815260ff8616602082015273ffffffffffffffffffffffffffffffffffffffff851660408201526159a68461475e565b83606082015260a0608082015260006150cd60a0830184866157bc565b6000602082840312156159d557600080fd5b8135614d3f81614671565b6bffffffffffffffffffffffff8116811461469357600080fd5b600060208284031215615a0c57600080fd5b8135614d3f816159e0565b8135615a2281614671565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff000000000000000000000000000000000000000081818454161783556020840135615a72816159e0565b60a01b1617905550565b8781526000602073ffffffffffffffffffffffffffffffffffffffff808a1682850152604060a081860152615ab560a086018a8c6157bc565b67ffffffffffffffff8916606087015285810360808701528681528790840160005b88811015615b1d578235615aea81614671565b8516825282860135615afb816159e0565b6bffffffffffffffffffffffff16828701529183019190830190600101615ad7565b509d9c50505050505050505050505050565b85815260ff8516602082015273ffffffffffffffffffffffffffffffffffffffff841660408201526080606082015260006103b86080830184866157bc56fea2646970667358221220e3bc7c72b5890cd406f43a375dd2ef9a058016fb140ee5bf86aade8f23af1b2764736f6c63430008110033608060405234801561001057600080fd5b50610289806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806365b145fb1461003b578063beabacc814610045575b600080fd5b610043610058565b005b6100436100533660046101e9565b6100d4565b60005473ffffffffffffffffffffffffffffffffffffffff16156100a8576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610125576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061022a565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101e657600080fd5b50565b6000806000606084860312156101fe57600080fd5b8335610209816101c4565b92506020840135610219816101c4565b929592945050506040919091013590565b60006020828403121561023c57600080fd5b8151801515811461024c57600080fd5b939250505056fea26469706673582212203115239dae1705926445b43b7a38b0bddd18a852e8332bf348d94e63aeeab95764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applications": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "changeScope(uint256,string,uint64,(bool,address,uint88)[])": {
        "params": {
          "_newDeadline": "New deadline of the task.",
          "_newMetadata": "New description of the task. (IPFS hash)",
          "_newReward": "New reward of the task.",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createTask(string,uint64,(address,uint96)[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "dropExecutor(uint256,string)": {
        "params": {
          "_explanation": "Why the executor should be dropped.",
          "_taskId": "Id of the task."
        }
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "params": {
          "_executor": "The executor to fetch tasks of.",
          "_fromTaskId": "What taskId to start from.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getProposingTasks(address,uint256,uint256)": {
        "params": {
          "_fromTaskId": "What taskId to start from.",
          "_max": "The maximum amount of tasks to return. 0 for no max.",
          "_proposer": "The proposer to fetch tasks of."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submission": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_application": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "changeScope(uint256,string,uint64,(bool,address,uint88)[])": {
        "notice": "Creates a request to change the scope."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[])": {
        "notice": "Create a new task."
      },
      "dropExecutor(uint256,string)": {
        "notice": "Drops the current executor of the task"
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of an executor. Most recent ones first."
      },
      "getProposingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of a proposer. Most recent ones first."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "taskStatistics()": {
        "notice": "Retrieves the current statistics of created tasks."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25530,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 25533,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "openTasks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 25535,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "takenTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25537,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "successfulTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 25543,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Task)25292_storage)"
      },
      {
        "astId": 25546,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "escrowImplementation",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)24959": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)19668": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)25166": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)25229": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)25149_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)25149_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)25292_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)25292_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)25225_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)25225_storage"
      },
      "t_mapping(t_uint8,t_struct(ChangeScopeRequest)25198_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ChangeScopeRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ChangeScopeRequest)25198_storage"
      },
      "t_mapping(t_uint8,t_struct(DropExecutorRequest)25218_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.DropExecutorRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(DropExecutorRequest)25218_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)25126_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)25126_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)25133_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)25133_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)25178_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)25178_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)25149_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 25135,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25137,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25139,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 8,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 25141,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 28,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 25143,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 29,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25148,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)25133_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(CancelTaskRequest)25225_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 25220,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25222,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25224,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ChangeScopeRequest)25198_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ChangeScopeRequest",
        "members": [
          {
            "astId": 25184,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25186,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25188,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25190,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25192,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 24,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 25197,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)25133_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DropExecutorRequest)25218_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.DropExecutorRequest",
        "members": [
          {
            "astId": 25213,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25215,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25217,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC20Transfer)25126_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 25123,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)19668"
          },
          {
            "astId": 25125,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)25133_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 25128,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 25130,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 25132,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)25178_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 25168,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25170,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25173,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 8,
            "slot": "1",
            "type": "t_enum(SubmissionJudgement)25166"
          },
          {
            "astId": 25175,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgementTimestamp",
            "offset": 9,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25177,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "feedback",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Task)25292_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 25231,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 25233,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25235,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorConfirmationTimestamp",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25237,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 25240,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(Escrow)24959"
          },
          {
            "astId": 25242,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "proposer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 25245,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(TaskState)25229"
          },
          {
            "astId": 25247,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "changed",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 25249,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 22,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 25251,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 24,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25253,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 25,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 25255,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 27,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25257,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "changeScopeRequestCount",
            "offset": 28,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25259,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "dropExecutorRequestCount",
            "offset": 29,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25261,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 30,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 25266,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)25126_storage)"
          },
          {
            "astId": 25271,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint16,t_struct(Application)25149_storage)"
          },
          {
            "astId": 25276,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint8,t_struct(Submission)25178_storage)"
          },
          {
            "astId": 25281,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "changeScopeRequests",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint8,t_struct(ChangeScopeRequest)25198_storage)"
          },
          {
            "astId": 25286,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "dropExecutorRequests",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint8,t_struct(DropExecutorRequest)25218_storage)"
          },
          {
            "astId": 25291,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)25225_storage)"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}