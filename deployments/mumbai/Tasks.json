{
  "address": "0x52Eb52C0723C35145608B46879Ad84Fe2bf84239",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotProposer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestNotAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "application",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "preapproved",
          "type": "tuple[]"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applications",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "_preapprove",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getExecutingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getProposingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "executed",
                  "type": "bool"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submission",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_application",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "open",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successful",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x38b0a7b19bafce29ff9d8c9b626a42f9e6deea2020f81806c7529c7a05966716",
  "receipt": {
    "to": null,
    "from": "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "contractAddress": "0x52Eb52C0723C35145608B46879Ad84Fe2bf84239",
    "transactionIndex": 29,
    "gasUsed": "4582086",
    "logsBloom": "0x
    "blockHash": "0xfbab2165c3f481e8fa95d7e53a16894338af0a0602fd86711b4271e7d45bddbc",
    "transactionHash": "0x38b0a7b19bafce29ff9d8c9b626a42f9e6deea2020f81806c7529c7a05966716",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 38325417,
        "transactionHash": "0x38b0a7b19bafce29ff9d8c9b626a42f9e6deea2020f81806c7529c7a05966716",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000186b130c8a5a000000000000000000000000000000000000000000000000000d211a5f2bae66a60000000000000000000000000000000000000000000033757bdd3f10b273a2f50000000000000000000000000000000000000000000000000d08af4c1f240ca60000000000000000000000000000000000000000000033757bf5aa23befdfcf5",
        "logIndex": 156,
        "blockHash": "0xfbab2165c3f481e8fa95d7e53a16894338af0a0602fd86711b4271e7d45bddbc"
      }
    ],
    "blockNumber": 38325417,
    "cumulativeGasUsed": "11759390",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b39d4aac6e475af7f079d92c605749e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"application\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"preapproved\",\"type\":\"tuple[]\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applications\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"_preapprove\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getExecutingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getProposingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submission\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_application\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successful\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applications\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"params\":{\"_execute\":\"If the request should also be executed in this transaction.\",\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_manager\":\"Who will manage the task (become the proposer).\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"executeRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"getExecutingTasks(address,uint256,uint256)\":{\"params\":{\"_executor\":\"The executor to fetch tasks of.\",\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getProposingTasks(address,uint256,uint256)\":{\"params\":{\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\",\"_proposer\":\"The proposer to fetch tasks of.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submission\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_application\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"notice\":\"Create a new task.\"},\"executeRequest(uint256,uint8,uint8)\":{\"notice\":\"Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\"},\"getExecutingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of an executor. Most recent ones first.\"},\"getProposingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of a proposer. Most recent ones first.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"taskStatistics()\":{\"notice\":\"Retrieves the current statistics of created tasks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Tasks/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    function __Escrow_init() external {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n        \\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x460a4d880edb618af736b39cfc0dd7064d47afdf312f77d9cf6240d938c52a70\",\"license\":\"None\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Escrow } from \\\"./Escrow.sol\\\";\\r\\n\\r\\ninterface ITasks {\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotProposer();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget(uint8 index);\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n    error RequestNotAccepted();\\r\\n    error RequestAlreadyExecuted();\\r\\n\\r\\n    event TaskCreated(uint256 taskId, string metadata, uint64 deadline, ERC20Transfer[] budget, address manager, PreapprovedApplication[] preapproved);\\r\\n    event ApplicationCreated(uint256 taskId, uint16 applicationId, string metadata, Reward[] reward, address proposer, address applicant);\\r\\n    event ApplicationAccepted(uint256 taskId, uint16 application, address proposer, address applicant);\\r\\n    event TaskTaken(uint256 taskId, uint16 applicationId, address proposer, address executor);\\r\\n    event SubmissionCreated(uint256 taskId, uint8 submissionId, string metadata, address proposer, address executor);\\r\\n    event SubmissionReviewed(uint256 taskId, uint8 submissionId, SubmissionJudgement judgement, string feedback, address proposer, address executor);\\r\\n    event TaskCompleted(uint256 taskId, address proposer, address executor);\\r\\n\\r\\n    // event ChangeScopeRequested(uint256 taskId, uint8 requestId, string metadata, uint64 deadline, Reward[] reward);\\r\\n    // event DropExecutorRequested(uint256 taskId, uint8 requestId, string explanation);\\r\\n    event CancelTaskRequested(uint256 taskId, uint8 requestId, string explanation, address proposer, address executor);\\r\\n    event RequestAccepted(uint256 taskId, RequestType requestType, uint8 requestId, address proposer, address executor);\\r\\n    event RequestExecuted(uint256 taskId, RequestType requestType, uint8 requestId, address by, address proposer, address executor);\\r\\n    event TaskCancelled(uint256 taskId, address proposer, address executor);\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to;\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param metadata Metadata of the application. (IPFS hash)\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the proposer.\\r\\n    /// @param reward How much rewards the applicant wants for completion.\\r\\n    struct Application {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice For approving people on task creation (they are not required to make an application)\\r\\n    struct PreapprovedApplication {\\r\\n        address applicant;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement { None, Accepted, Rejected }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    /// @param feedback A response from the proposer. (IPFS hash)\\r\\n    struct Submission {\\r\\n        string metadata;\\r\\n        SubmissionJudgement judgement;\\r\\n        string feedback;\\r\\n    }\\r\\n\\r\\n    enum RequestType { ChangeScope, DropExecutor, CancelTask }\\r\\n\\r\\n    /// @notice A container for a request to change the scope of a task.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    /// @param deadline New deadline for the task.\\r\\n    /// @param reward New reward for the executor of the task.\\r\\n    struct ChangeScopeRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n        uint64 deadline;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainChangeScopeRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n        uint64 deadline;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to drop the executor of a task.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct DropExecutorRequest {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param explanation Why the task should be cancelled.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct CancelTaskRequest {\\r\\n        string explanation;\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    enum TaskState { Open, Taken, Closed }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param proposer Who has created the task.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    struct Task {\\r\\n        string metadata;\\r\\n\\r\\n        uint64 deadline;\\r\\n        Escrow escrow;\\r\\n\\r\\n        address proposer;\\r\\n        TaskState state;\\r\\n        // bool changed;\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        // uint8 changeScopeRequestCount;\\r\\n        // uint8 dropExecutorRequestCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        // mapping(uint8 => ChangeScopeRequest) changeScopeRequests;\\r\\n        // mapping(uint8 => DropExecutorRequest) dropExecutorRequests;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        uint16 executorApplication;\\r\\n        address proposer;\\r\\n        TaskState state;\\r\\n        Escrow escrow;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        // OffChainChangeScopeRequest[] changeScopeRequests;\\r\\n        // DropExecutorRequest[] dropExecutorRequests;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n    \\r\\n    /// @notice Retrieves the current statistics of created tasks.\\r\\n    function taskStatistics() external view returns (uint256 openTasks, uint256 takenTasks, uint256 successfulTasks);\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n    \\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of a proposer. Most recent ones first.\\r\\n    /// @param _proposer The proposer to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getProposingTasks(\\r\\n        address _proposer,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\\r\\n    /// @param _executor The executor to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param _manager Who will manage the task (become the proposer).\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId);\\r\\n    \\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId);\\r\\n    \\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applications Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applications\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _application Index of application you made that has been accepted.\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _application\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n    \\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submission Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submission,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Creates a request to change the scope.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New description of the task. (IPFS hash)\\r\\n    /// @param _newDeadline New deadline of the task.\\r\\n    /// @param _newReward New reward of the task.\\r\\n    // function changeScope(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _newMetadata,\\r\\n    //     uint64 _newDeadline,\\r\\n    //     Reward[] calldata _newReward\\r\\n    // ) external returns (uint8 changeTaskRequestId);\\r\\n\\r\\n    /// @notice Drops the current executor of the task\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the executor should be dropped.\\r\\n    // function dropExecutor(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _explanation\\r\\n    // ) external returns (uint8 dropExecutorRequestId);\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    /// @param _execute If the request should also be executed in this transaction.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0xb03917f1f17fe7dfb486349c9711171d2756728e44fb6af24abb99373795fa90\",\"license\":\"None\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITasks, IERC20, Escrow } from \\\"./ITasks.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ncontract Tasks is Context, ITasks {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice Various statistics about total tasks.\\r\\n    uint256 private openTasks;\\r\\n    uint256 private takenTasks;\\r\\n    uint256 private successfulTasks;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address private escrowImplementation;\\r\\n\\r\\n    constructor() {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function taskStatistics() external view returns (uint256 open, uint256 taken, uint256 successful) {\\r\\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        offchainTask.metadata = task.metadata;\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.proposer = task.proposer;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        offchainTask.applications = new OffChainApplication[](task.applicationCount);\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].metadata = application.metadata;\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n            offchainTask.applications[i].reward = new Reward[](application.rewardCount);\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // offchainTask.changeScopeRequests = new OffChainChangeScopeRequest[](task.changeScopeRequestCount);\\r\\n        // for (uint8 i; i < offchainTask.changeScopeRequests.length; ) {\\r\\n        //     offchainTask.changeScopeRequests[i].metadata = task.changeScopeRequests[i].metadata;\\r\\n        //     offchainTask.changeScopeRequests[i].accepted = task.changeScopeRequests[i].accepted;\\r\\n        //     offchainTask.changeScopeRequests[i].deadline = task.changeScopeRequests[i].deadline;\\r\\n        //     offchainTask.changeScopeRequests[i].reward = new Reward[](task.changeScopeRequests[i].rewardCount);\\r\\n        //     for (uint8 j; j < offchainTask.changeScopeRequests[i].reward.length; ) {\\r\\n        //         offchainTask.changeScopeRequests[i].reward[j] = task.changeScopeRequests[i].reward[j];\\r\\n        //         unchecked {\\r\\n        //             ++j;\\r\\n        //         }\\r\\n        //     }\\r\\n        //     unchecked {\\r\\n        //         ++i;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        // offchainTask.dropExecutorRequests = new DropExecutorRequest[](task.dropExecutorRequestCount);\\r\\n        // for (uint8 i; i < offchainTask.dropExecutorRequests.length; ) {\\r\\n        //     offchainTask.dropExecutorRequests[i] = task.dropExecutorRequests[i];\\r\\n        //     unchecked {\\r\\n        //         ++i;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](task.cancelTaskRequestCount);\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](_taskIds.length);\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getProposingTasks(\\r\\n        address _proposer,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 proposerTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\\r\\n            if (tasks[i].proposer == _proposer) {\\r\\n                taskIndexes[proposerTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++proposerTasksCount;\\r\\n                }\\r\\n                if (proposerTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, proposerTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 executorTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\\r\\n            if (tasks[i].state != TaskState.Open && tasks[i].applications[tasks[i].executorApplication].applicant == _executor) {\\r\\n                taskIndexes[executorTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++executorTasksCount;\\r\\n                }\\r\\n                if (executorTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId) {\\r\\n        unchecked {\\r\\n            taskId = taskCounter++;\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.metadata = _metadata;\\r\\n        task.deadline = _deadline;\\r\\n        task.budgetCount = uint8(_budget.length);\\r\\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\\r\\n        escrow.__Escrow_init();\\r\\n        task.escrow = escrow;\\r\\n        for (uint8 i; i < _budget.length; ) {\\r\\n            _budget[i].tokenContract.transferFrom(_msgSender(), address(escrow), _budget[i].amount);\\r\\n            task.budget[i] = _budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        task.proposer = _manager;\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n        unchecked {\\r\\n            ++openTasks;\\r\\n        }\\r\\n\\r\\n        if (_preapprove.length > 0) {\\r\\n            task.applicationCount = uint16(_preapprove.length);\\r\\n            for (uint16 i; i < _preapprove.length; ) {\\r\\n                Application storage application = task.applications[i];\\r\\n                application.applicant = _preapprove[i].applicant;\\r\\n                application.accepted = true;\\r\\n                _setRewardBellowBudget(task, application, _preapprove[i].reward);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TaskCreated(taskId, _metadata, _deadline, _budget, _manager, _preapprove);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n\\r\\n        Application storage application = task.applications[task.applicationCount];\\r\\n        application.metadata = _metadata;\\r\\n        application.applicant = _msgSender();\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            application.reward[i] = _reward[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            applicationId = task.applicationCount++;\\r\\n        }\\r\\n\\r\\n        emit ApplicationCreated(_taskId, applicationId, _metadata, _reward, task.proposer, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applications\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n        if (task.proposer != _msgSender()) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        for (uint i; i < _applications.length; ) {\\r\\n            if (_applications[i] >= task.applicationCount) {\\r\\n                revert ApplicationDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            Application storage application_ = task.applications[_applications[i]];\\r\\n            application_.accepted = true;\\r\\n            _increaseBudgetToReward(task, application_.rewardCount, application_.reward);\\r\\n            emit ApplicationAccepted(_taskId, uint16(i), _msgSender(), application_.applicant);\\r\\n            \\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _application\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n        if (_application >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Application storage application_ = task.applications[_application];\\r\\n        if (application_.applicant != _msgSender()) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n        if (!application_.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n\\r\\n        task.executorApplication = _application;\\r\\n\\r\\n        task.state = TaskState.Taken;\\r\\n        unchecked {\\r\\n            --openTasks;\\r\\n            ++takenTasks;\\r\\n        }\\r\\n\\r\\n        emit TaskTaken(_taskId, _application, task.proposer, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.applications[task.executorApplication].applicant != _msgSender()) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n\\r\\n        Submission storage submission_ = task.submissions[task.submissionCount];\\r\\n        submission_.metadata = _metadata;\\r\\n        unchecked { \\r\\n            submissionId = task.submissionCount++;\\r\\n        }\\r\\n\\r\\n        emit SubmissionCreated(_taskId, submissionId, _metadata, task.proposer, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submission,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n        \\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.proposer != _msgSender()) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n        if (_submission >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Submission storage submission_ = task.submissions[_submission];\\r\\n        if (submission_.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n        submission_.judgement = _judgement;\\r\\n        submission_.feedback = _feedback;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            Application storage executor = task.applications[task.executorApplication];\\r\\n            address proposer = _msgSender(); // task.proposer;\\r\\n            Escrow escrow = task.escrow;\\r\\n\\r\\n            uint8 j;\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n            uint8 rewardCount = executor.rewardCount;\\r\\n            for (uint8 i; i < rewardCount; ) {\\r\\n                Reward memory reward = executor.reward[i];\\r\\n                escrow.transfer(erc20Transfer.tokenContract, executor.applicant, reward.amount);\\r\\n                unchecked {\\r\\n                    erc20Transfer.amount -= reward.amount;\\r\\n                }\\r\\n\\r\\n                if (reward.nextToken) {\\r\\n                    if (erc20Transfer.amount > 0) {\\r\\n                        escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n                    }\\r\\n\\r\\n                    unchecked {\\r\\n                        erc20Transfer = task.budget[++j];\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            uint8 budgetCount = task.budgetCount;\\r\\n            while (j < budgetCount) {\\r\\n                escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n                \\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            task.state = TaskState.Closed;\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++successfulTasks;\\r\\n            }\\r\\n\\r\\n            emit TaskCompleted(_taskId, proposer, executor.applicant);\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(_taskId, _submission, _judgement, _feedback, _msgSender(), task.applications[task.executorApplication].applicant);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    // function changeScope(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _newMetadata,\\r\\n    //     uint64 _newDeadline,\\r\\n    //     Reward[] calldata _newReward\\r\\n    // ) external returns (uint8 changeTaskRequestId) {\\r\\n        // if (_taskId >= taskCounter) {\\r\\n        //     revert TaskDoesNotExist();\\r\\n        // }\\r\\n\\r\\n        // Task storage task = tasks[_taskId];\\r\\n        // if (task.state != TaskState.Taken) {\\r\\n        //     revert TaskNotTaken();\\r\\n        // }\\r\\n        // if (task.proposer != _msgSender()) {\\r\\n        //     revert NotProposer();\\r\\n        // }\\r\\n\\r\\n        // ChangeScopeRequest storage request = task.changeScopeRequests[task.changeScopeRequestCount];\\r\\n        // request.metadata = _newMetadata;\\r\\n        // request.timestamp = uint64(block.timestamp);\\r\\n        // request.deadline = _newDeadline;\\r\\n        // request.rewardCount = uint8(_newReward.length);\\r\\n\\r\\n        // uint8 j;\\r\\n        // ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        // uint256 needed;\\r\\n        // for (uint8 i; i < uint8(_newReward.length); ) {\\r\\n        //     unchecked {\\r\\n        //         needed += _newReward[i].amount;\\r\\n        //     }\\r\\n\\r\\n        //     request.reward[i] = _newReward[i];\\r\\n\\r\\n        //     if (_newReward[i].nextToken) {\\r\\n        //         if (needed > erc20Transfer.amount) {\\r\\n        //             // Excisting budget in escrow doesnt cover the new reward\\r\\n        //             erc20Transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), needed - erc20Transfer.amount);\\r\\n        //         }\\r\\n\\r\\n        //         needed = 0;\\r\\n        //         unchecked {\\r\\n        //             erc20Transfer = task.budget[++j];\\r\\n        //         }\\r\\n        //     }\\r\\n\\r\\n        //     unchecked {\\r\\n        //         ++i;\\r\\n        //     }\\r\\n        // }\\r\\n\\r\\n        // unchecked {\\r\\n        //     changeTaskRequestId = task.changeScopeRequestCount++;\\r\\n        // }\\r\\n        \\r\\n        // emit ChangeScopeRequested(_taskId, changeTaskRequestId, _msgSender(), _newMetadata, _newDeadline, _newReward);\\r\\n    // }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    // function dropExecutor(\\r\\n    //     uint256 _taskId,\\r\\n    //     string calldata _explanation\\r\\n    // ) external returns (uint8 dropExecutorRequestId) {\\r\\n        // if (_taskId >= taskCounter) {\\r\\n        //     revert TaskDoesNotExist();\\r\\n        // }\\r\\n\\r\\n        // Task storage task = tasks[_taskId];\\r\\n        // if (task.state != TaskState.Taken) {\\r\\n        //     revert TaskNotTaken();\\r\\n        // }\\r\\n        // if (task.proposer != _msgSender()) {\\r\\n        //     revert NotProposer();\\r\\n        // }\\r\\n\\r\\n        // DropExecutorRequest storage request = task.dropExecutorRequests[task.dropExecutorRequestCount];\\r\\n        // request.explanation = _explanation;\\r\\n        // request.timestamp = uint64(block.timestamp);\\r\\n        // unchecked {\\r\\n        //     dropExecutorRequestId = task.dropExecutorRequestCount++;\\r\\n        // }\\r\\n\\r\\n        // emit DropExecutorRequested(_taskId, dropExecutorRequestId, _msgSender(), _explanation);\\r\\n    // }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.proposer != _msgSender()) {\\r\\n            revert NotProposer();\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Closed) {\\r\\n            revert TaskClosed();\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Open || task.deadline <= uint64(block.timestamp)) {\\r\\n            // Task is open or deadline past\\r\\n            _refundProposer(task);\\r\\n            emit TaskCancelled(_taskId, _msgSender(), task.state == TaskState.Open ? address(0) : task.applications[task.executorApplication].applicant);\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        }\\r\\n        else {\\r\\n            // Task is taken and deadline has not past\\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[task.cancelTaskRequestCount];\\r\\n            request.explanation = _explanation;\\r\\n            unchecked {\\r\\n                cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n            }\\r\\n\\r\\n            emit CancelTaskRequested(_taskId, cancelTaskRequestId, _explanation, _msgSender(), task.applications[task.executorApplication].applicant);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        if (task.applications[task.executorApplication].applicant != _msgSender()) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n        \\r\\n        if (_requestType == RequestType.ChangeScope) {\\r\\n            // if (_requestId >= task.changeScopeRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n\\r\\n            // ChangeScopeRequest storage request = task.changeScopeRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.metadata = request.metadata;\\r\\n            // task.deadline = request.deadline;\\r\\n            // task.changed = true;\\r\\n            // Application storage executor = task.applications[task.executorApplication];\\r\\n            // uint8 rewardCount = request.rewardCount;\\r\\n            // executor.rewardCount = rewardCount;\\r\\n            // for (uint8 i; i < rewardCount; ) {\\r\\n            //     executor.reward[i] = request.reward[i];\\r\\n\\r\\n            //     unchecked {\\r\\n            //         ++i;\\r\\n            //     }\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else if (_requestType == RequestType.DropExecutor) {\\r\\n            // if (_requestId >= task.dropExecutorRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n            \\r\\n            // DropExecutorRequest storage request = task.dropExecutorRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.submissionCount = 0;\\r\\n            // if (task.changed) {\\r\\n            //     task.applicationCount = 0;\\r\\n            //     task.changed = false; // hmm maybe questionable, would be better in case the new executor is dropped again and the task is not changed again, but does not make sense ux wise\\r\\n            // }\\r\\n\\r\\n            // task.state = TaskState.Open;\\r\\n            // unchecked {\\r\\n            //     --takenTasks;\\r\\n            //     ++openTasks;\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else { // if (_requestType == RequestType.CancelTask) {\\r\\n            if (_requestId >= task.cancelTaskRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[_requestId];\\r\\n            if (request.accepted) {\\r\\n                revert RequestAlreadyAccepted();\\r\\n            }\\r\\n\\r\\n            if (_execute) {\\r\\n                // use executeRequest here? (more gas due to all the checks...)\\r\\n                _refundProposer(task);\\r\\n                emit TaskCancelled(_taskId, task.proposer, _msgSender());\\r\\n                request.executed = true;\\r\\n            }\\r\\n\\r\\n            request.accepted = true;\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(_taskId, _requestType, _requestId, task.proposer, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        Task storage task = tasks[_taskId];\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n        \\r\\n        if (_requestType == RequestType.ChangeScope) {\\r\\n            // if (_requestId >= task.changeScopeRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n\\r\\n            // ChangeScopeRequest storage request = task.changeScopeRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.metadata = request.metadata;\\r\\n            // task.deadline = request.deadline;\\r\\n            // task.changed = true;\\r\\n            // Application storage executor = task.applications[task.executorApplication];\\r\\n            // uint8 rewardCount = request.rewardCount;\\r\\n            // executor.rewardCount = rewardCount;\\r\\n            // for (uint8 i; i < rewardCount; ) {\\r\\n            //     executor.reward[i] = request.reward[i];\\r\\n\\r\\n            //     unchecked {\\r\\n            //         ++i;\\r\\n            //     }\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else if (_requestType == RequestType.DropExecutor) {\\r\\n            // if (_requestId >= task.dropExecutorRequestCount) {\\r\\n            //     revert RequestDoesNotExist();\\r\\n            // }\\r\\n            \\r\\n            // DropExecutorRequest storage request = task.dropExecutorRequests[_requestId];\\r\\n            // if (request.accepted != 0) {\\r\\n            //     revert RequestAlreadyAccepted();\\r\\n            // }\\r\\n\\r\\n            // task.submissionCount = 0;\\r\\n            // if (task.changed) {\\r\\n            //     task.applicationCount = 0;\\r\\n            //     task.changed = false; // hmm maybe questionable, would be better in case the new executor is dropped again and the task is not changed again, but does not make sense ux wise\\r\\n            // }\\r\\n\\r\\n            // task.state = TaskState.Open;\\r\\n            // unchecked {\\r\\n            //     --takenTasks;\\r\\n            //     ++openTasks;\\r\\n            // }\\r\\n\\r\\n            // request.accepted = uint64(block.timestamp);\\r\\n        } else { // if (_requestType == RequestType.CancelTask) {\\r\\n            if (_requestId >= task.cancelTaskRequestCount) {\\r\\n                revert RequestDoesNotExist();\\r\\n            }\\r\\n            \\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[_requestId];\\r\\n            if (!request.accepted) {\\r\\n                revert RequestNotAccepted();\\r\\n            }\\r\\n            if (request.executed) {\\r\\n                revert RequestAlreadyExecuted();\\r\\n            }\\r\\n\\r\\n            _refundProposer(task);\\r\\n            emit TaskCancelled(_taskId, task.proposer, task.applications[task.executorApplication].applicant);\\r\\n            request.executed = true;\\r\\n        }\\r\\n\\r\\n        emit RequestExecuted(_taskId, _requestType, _requestId, _msgSender(), task.proposer, task.applications[task.executorApplication].applicant);\\r\\n    }\\r\\n\\r\\n    function _increaseBudgetToReward(\\r\\n        Task storage task,\\r\\n        uint8 _length,\\r\\n        mapping(uint8 => Reward) storage _reward\\r\\n    ) internal {\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 needed;\\r\\n        for (uint8 i; i < _length; ) {\\r\\n            unchecked {\\r\\n                needed += _reward[i].amount;\\r\\n            }\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                if (needed > erc20Transfer.amount) {\\r\\n                    // Existing budget in escrow doesnt cover the n reward\\r\\n                    erc20Transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), needed - erc20Transfer.amount);\\r\\n                }\\r\\n\\r\\n                needed = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setRewardBellowBudget(\\r\\n        Task storage task,\\r\\n        Application storage application, \\r\\n        Reward[] calldata _reward\\r\\n    ) internal {\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 alreadyReserved;\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\\r\\n            unchecked {\\r\\n                alreadyReserved += _reward[i].amount;\\r\\n            }\\r\\n            if (alreadyReserved > erc20Transfer.amount) {\\r\\n                revert RewardAboveBudget(i);\\r\\n            }\\r\\n\\r\\n            application.reward[i] = _reward[i];\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                alreadyReserved = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _refundProposer(Task storage task) internal {\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        address proposer = task.proposer;\\r\\n        Escrow escrow = task.escrow;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (task.state == TaskState.Open) {\\r\\n            unchecked {\\r\\n                --openTasks;\\r\\n            }\\r\\n        } else if (task.state == TaskState.Taken) {\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n            }\\r\\n        }\\r\\n        task.state = TaskState.Closed;\\r\\n\\r\\n        // Possibly could do some assembly trickery here to get the index of the task and emit TaskCancelled\\r\\n    }\\r\\n}\",\"keccak256\":\"0x34a8b77de979829fe6cb279d0bcfdc89352d2f6d3906f520cf92b54547b49d5f\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620000209062000064565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b039290921691909117905562000072565b6102a98062004f8383390190565b614f0180620000826000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c806376645a9311610097578063a5e99c4e11610066578063a5e99c4e14610221578063b685504b14610246578063b6cb58a514610259578063ecb8adae1461026157600080fd5b806376645a93146101c757806377b98419146101da57806391a29225146101ed578063978a2b531461020057600080fd5b80633f561a40116100d35780633f561a40146101575780633f74d41d1461016a57806352a63d491461017d5780635ac1d773146101a357600080fd5b8062f9467d146100f95780630353ce601461010e5780631d65e77e14610137575b600080fd5b61010c610107366004613b28565b610274565b005b61012161011c366004613ba6565b6105bc565b60405161012e9190614031565b60405180910390f35b61014a6101453660046140b1565b6106ec565b60405161012e91906140ca565b61010c610165366004614130565b611249565b610121610178366004613ba6565b611507565b61019061018b3660046141be565b611693565b60405161ffff909116815260200161012e565b6001546002546003546040805193845260208401929092529082015260600161012e565b6101216101d5366004614294565b611900565b61010c6101e8366004614370565b611a18565b61010c6101fb3660046143e1565b612275565b61021361020e36600461441f565b6125b1565b60405190815260200161012e565b61023461022f366004614512565b612a91565b60405160ff909116815260200161012e565b61010c610254366004614563565b612cd8565b600054610213565b61023461026f366004614512565b612fba565b60005484106102af576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff16908111156102f0576102f0613c3f565b14610327576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015461ffff750100000000000000000000000000000000000000000090910416600090815260048201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff1633146103ac576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460028111156103c0576103c0613c3f565b1461055b5760018460028111156103d9576103d9613c3f565b1461055b57600281015460ff7b01000000000000000000000000000000000000000000000000000000909104811690841610610441576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff80841660009081526006830160205260409020600181015490911615610495576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b821561052c576104a48261333b565b60028201546040805188815273ffffffffffffffffffffffffffffffffffffffff90921660208301523382820152517f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e729181900360600190a16001810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600190810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555b60028101546040517f22c8636df8a0387ea92695f6534f3a1dccaa44ba42e7627c4d205e078dbbbe04916105ad9188918891889173ffffffffffffffffffffffffffffffffffffffff1690339061458f565b60405180910390a15050505050565b600080546060918167ffffffffffffffff8111156105dc576105dc614265565b604051908082528060200260200182016040528015610605578160200160208202803683370190505b5090506000856000036106205761061d6001846145db565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106cf5760008181526004602052604090206002015473ffffffffffffffffffffffffffffffffffffffff808a169116036106a8578083838151811061068d5761068d61461b565b602002602001018181525050816001019150858203156106cf575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610622565b5080830382510382526106e182611900565b979650505050505050565b6107586040805161014081018252606080825260006020830181905292820183905281018290529060808201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b6000548210610793576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600460205260409020805481906107ae9061464a565b80601f01602080910402602001604051908101604052809291908181526020018280546107da9061464a565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b5050509184525050600181015467ffffffffffffffff1660208301526002808201547501000000000000000000000000000000000000000000810461ffff16604085015273ffffffffffffffffffffffffffffffffffffffff8116606085015260808401917401000000000000000000000000000000000000000090910460ff16908111156108b8576108b8613c3f565b908160028111156108cb576108cb613c3f565b905250600181015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660a0830152600281015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561093557610935614265565b60405190808252806020026020018201604052801561097a57816020015b60408051808201909152600080825260208201528152602001906001900390816109535790505b5060c083015260005b8260c00151518160ff161015610a235760ff8116600081815260038401602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260c08501518051919290918110610a1057610a1061461b565b6020908102919091010152600101610983565b5060028101547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff811115610a6157610a61614265565b604051908082528060200260200182016040528015610ad557816020015b610ac2604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b815260200190600190039081610a7f5790505b5060e083015260005b8260e00151518160ff161015610e325760ff81166000908152600483016020526040902080548190610b0f9061464a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3b9061464a565b8015610b885780601f10610b5d57610100808354040283529160200191610b88565b820191906000526020600020905b815481529060010190602001808311610b6b57829003601f168201915b50505050508460e001518360ff1681518110610ba657610ba661461b565b602090810291909101015152600181015460e0850151805173ffffffffffffffffffffffffffffffffffffffff9092169160ff8516908110610bea57610bea61461b565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff909216910152600181015460e0850151805160ff740100000000000000000000000000000000000000009093048316928516908110610c4c57610c4c61461b565b602090810291909101015190151560409091015260018101547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610c9957610c99614265565b604051908082528060200260200182016040528015610d0257816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610cb75790505b508460e001518360ff1681518110610d1c57610d1c61461b565b60200260200101516060018190525060005b8460e001518360ff1681518110610d4757610d4761461b565b602002602001015160600151518160ff161015610e285760ff81811660009081526002840160209081526040918290208251606081018452905480851615158252610100810473ffffffffffffffffffffffffffffffffffffffff169282019290925275010000000000000000000000000000000000000000009091046affffffffffffffffffffff169181019190915260e0870151805191929091908616908110610df557610df561461b565b6020026020010151606001518260ff1681518110610e1557610e1561461b565b6020908102919091010152600101610d2e565b5050600101610ade565b5060028101547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610e7157610e71614265565b604051908082528060200260200182016040528015610ebe57816020015b60408051606080820183528082526000602083015291810191909152815260200190600190039081610e8f5790505b5061010083015260005b826101000151518160ff16101561107b5760ff8116600090815260058301602052604090819020815160608101909252805482908290610f079061464a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f339061464a565b8015610f805780601f10610f5557610100808354040283529160200191610f80565b820191906000526020600020905b815481529060010190602001808311610f6357829003601f168201915b5050509183525050600182015460209091019060ff166002811115610fa757610fa7613c3f565b6002811115610fb857610fb8613c3f565b8152602001600282018054610fcc9061464a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff89061464a565b80156110455780601f1061101a57610100808354040283529160200191611045565b820191906000526020600020905b81548152906001019060200180831161102857829003601f168201915b5050505050815250508361010001518260ff16815181106110685761106861461b565b6020908102919091010152600101610ec8565b5060028101547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156110bb576110bb614265565b60405190808252806020026020018201604052801561112457816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816110d95790505b5061012083015260005b826101200151518160ff1610156112425760ff811660009081526006830160205260409081902081516060810190925280548290829061116d9061464a565b80601f01602080910402602001604051908101604052809291908181526020018280546111999061464a565b80156111e65780601f106111bb576101008083540402835291602001916111e6565b820191906000526020600020905b8154815290600101906020018083116111c957829003601f168201915b50505091835250506001919091015460ff808216151560208401526101009091048116151560409092019190915261012085015180519091841690811061122f5761122f61461b565b602090810291909101015260010161112e565b5050919050565b6000548310611284576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526004602052604081209060028281015474010000000000000000000000000000000000000000900460ff16908111156112c4576112c4613c3f565b146112fb576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015473ffffffffffffffffffffffffffffffffffffffff16331461134e576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b828110156115005760028201547801000000000000000000000000000000000000000000000000900461ffff168484838181106113905761139061461b565b90506020020160208101906113a5919061469d565b61ffff16106113e0576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260040160008686858181106113fa576113fa61461b565b905060200201602081019061140f919061469d565b61ffff16815260208101919091526040016000206001810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017908190559091506114949084907501000000000000000000000000000000000000000000900460ff1660028401613598565b60018101546040805188815261ffff85166020820152338183015273ffffffffffffffffffffffffffffffffffffffff9092166060830152517f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f9181900360800190a150600101611351565b5050505050565b600080546060918167ffffffffffffffff81111561152757611527614265565b604051908082528060200260200182016040528015611550578160200160208202803683370190505b50905060008560000361156b576115686001846145db565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106cf5760008082815260046020526040902060029081015474010000000000000000000000000000000000000000900460ff16908111156115d4576115d4613c3f565b141580156116395750600081815260046020818152604080842060028101547501000000000000000000000000000000000000000000900461ffff168552909201905290206001015473ffffffffffffffffffffffffffffffffffffffff8981169116145b1561166c57808383815181106116515761165161461b565b602002602001018181525050816001019150858203156106cf575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161156d565b6000805486106116cf576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008681526004602052604081209060028281015474010000000000000000000000000000000000000000900460ff169081111561170f5761170f613c3f565b14611746576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101547801000000000000000000000000000000000000000000000000900461ffff166000908152600482016020526040902080611787878983614707565b5060018101805460ff86167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ff0000000000000000000000000000000000000000909116331717905560005b60ff808616908216101561182d5785858260ff168181106117f9576117f961461b565b60ff841660009081526002860160205260409020606090910292909201919050611823828261483a565b50506001016117d6565b50600282018054600161ffff78010000000000000000000000000000000000000000000000008084048216928301909116027fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff8316811790935594507f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d918a9186918b918b918b918b9173ffffffffffffffffffffffffffffffffffffffff9081169116176118d93390565b6040516118ed9897969594939291906149b5565b60405180910390a1505095945050505050565b60606000825167ffffffffffffffff81111561191e5761191e614265565b6040519080825280602002602001820160405280156119bb57816020015b6119a86040805161014081018252606080825260006020830181905292820183905281018290529060808201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b81526020019060019003908161193c5790505b50905060005b8351811015611a11576119ec8482815181106119df576119df61461b565b60200260200101516106ec565b8282815181106119fe576119fe61461b565b60209081029190910101526001016119c1565b5092915050565b6000548510611a53576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff1690811115611a9457611a94613c3f565b14611acb576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015473ffffffffffffffffffffffffffffffffffffffff163314611b1e576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015460ff7a010000000000000000000000000000000000000000000000000000909104811690861610611b80576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff85166000908152600582016020526040812090600182015460ff166002811115611bae57611bae613c3f565b14611be5576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808201805487927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911690836002811115611c2557611c25613c3f565b021790555060028101611c39848683614707565b506001856002811115611c4e57611c4e613c3f565b036121dd5760028201547501000000000000000000000000000000000000000000900461ffff166000908152600483016020526040812090336001858101546000808052600388016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff8082168352740100000000000000000000000000000000000000009091046bffffffffffffffffffffffff169282019290925293870154949550680100000000000000009092049091169290919060ff750100000000000000000000000000000000000000000090910416825b8160ff168160ff161015611f9d5760ff81811660009081526002890160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff9081169282019290925275010000000000000000000000000000000000000000009093046affffffffffffffffffffff16838301819052865160018c015493517fbeabacc800000000000000000000000000000000000000000000000000000000815290831660048201529282166024840152604483015287169063beabacc890606401600060405180830381600087803b158015611e1b57600080fd5b505af1158015611e2f573d6000803e3d6000fd5b5050505060408101516020850180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805115611f945760208401516bffffffffffffffffffffffff1615611f2657835160208501516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050505b60ff6001909501948516600090815260038b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff74010000000000000000000000000000000000000000909104169082015293505b50600101611d2b565b50600288015477010000000000000000000000000000000000000000000000900460ff165b8060ff168460ff1610156120e957825160208401516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015288831660248201526bffffffffffffffffffffffff90911660448201529086169063beabacc890606401600060405180830381600087803b15801561205e57600080fd5b505af1158015612072573d6000803e3d6000fd5b50505060ff6001909501948516600090815260038b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff7401000000000000000000000000000000000000000090910416908201529350611fc29050565b600289810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008302179055506002600081546001900391905081905550600360008154600101919050819055507f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d968e878960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516121cd9392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b60405180910390a1505050505050505b7f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a930387878787873360028901547501000000000000000000000000000000000000000000900461ffff16600090815260048a016020526040908190206001015490516122649796959493929173ffffffffffffffffffffffffffffffffffffffff1690614a22565b60405180910390a150505050505050565b60005483106122b0576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff16908111156122f1576122f1613c3f565b14612328576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083600281111561233c5761233c613c3f565b1461251c57600183600281111561235557612355613c3f565b1461251c57600281015460ff7b010000000000000000000000000000000000000000000000000000009091048116908316106123bd576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff808316600090815260068301602052604090206001810154909116612410576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001810154610100900460ff1615612454576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61245d8261333b565b600282015461ffff7501000000000000000000000000000000000000000000820416600090815260048401602090815260409182902060010154825189815273ffffffffffffffffffffffffffffffffffffffff948516928101929092529290921682820152517f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e729181900360600190a160010180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b7fa20926c2163603eba714f9531625851214f394b2984a5038f03c478b73b0458a84848433600286015461ffff75010000000000000000000000000000000000000000008204166000908152600488016020526040908190206001015490516125a3969594939273ffffffffffffffffffffffffffffffffffffffff908116921690614a85565b60405180910390a150505050565b6000805460018101825580825260046020526040909120806125d48a8c83614707565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a161790556002810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8916021790556005546000906126799073ffffffffffffffffffffffffffffffffffffffff166137ed565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156126c357600080fd5b505af11580156126d7573d6000803e3d6000fd5b505050506001820180547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff84160217905560005b60ff811688111561289f5788888260ff1681811061274b5761274b61461b565b6127619260206040909202019081019150614ad9565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff168181106127935761279361461b565b90506040020160200160208101906127ab9190614b10565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015612832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128569190614b2d565b5088888260ff1681811061286c5761286c61461b565b60ff84166000908152600387016020526040908190209102929092019190506128958282614b4a565b505060010161272b565b506002820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881617905560018054810190558315612a3c576002820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff8116851115612a3a5761ffff81166000818152600485016020526040902090879087908181106129735761297361461b565b90506020028101906129859190614baf565b612993906020810190614ad9565b6001820180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911774010000000000000000000000000000000000000000179055612a318482898961ffff8716818110612a0c57612a0c61461b565b9050602002810190612a1e9190614baf565b612a2c906020810190614bed565b6138ba565b5060010161293e565b505b7fd2d2cd619dd6aa2c2e812eeab185d133d2dafbc312cc04664111893c3abfd531838c8c8c8c8c8c8c8c604051612a7b99989796959493929190614d60565b60405180910390a1505098975050505050505050565b600080548410612acd576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff1690811115612b0e57612b0e613c3f565b14612b45576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015461ffff750100000000000000000000000000000000000000000090910416600090815260048201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff163314612bca576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101547a010000000000000000000000000000000000000000000000000000900460ff166000908152600582016020526040902080612c0c858783614707565b50600282018054600160ff7a0100000000000000000000000000000000000000000000000000008084048216928301909116027fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff8316811790935594507febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d12871291889186918991899173ffffffffffffffffffffffffffffffffffffffff908116911617612cb53390565b604051612cc796959493929190614e3e565b60405180910390a150509392505050565b6000548210612d13576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526004602052604081209060028281015474010000000000000000000000000000000000000000900460ff1690811115612d5357612d53613c3f565b14612d8a576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015461ffff7801000000000000000000000000000000000000000000000000909104811690831610612deb576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff821660009081526004820160205260409020600181015473ffffffffffffffffffffffffffffffffffffffff163314612e53576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015474010000000000000000000000000000000000000000900460ff16612ea9576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600282810180547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000061ffff87169081027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169190911774010000000000000000000000000000000000000000178255600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0181558354019092555460408051878152602081019390935273ffffffffffffffffffffffffffffffffffffffff909116908201523360608201527f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de1906080016125a3565b600080548410612ff6576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600281015473ffffffffffffffffffffffffffffffffffffffff163314613057576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002808281015474010000000000000000000000000000000000000000900460ff169081111561308957613089613c3f565b036130c0576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028281015474010000000000000000000000000000000000000000900460ff16908111156130f3576130f3613c3f565b14806131105750600181015467ffffffffffffffff428116911611155b1561320b5761311e8161333b565b7f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e728533600060028581015474010000000000000000000000000000000000000000900460ff169081111561317457613174613c3f565b146131ca5760028401547501000000000000000000000000000000000000000000900461ffff16600090815260048501602052604090206001015473ffffffffffffffffffffffffffffffffffffffff166131cd565b60005b6040805193845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a160ff9150613333565b60028101547b01000000000000000000000000000000000000000000000000000000900460ff16600090815260068201602052604090208061324e858783614707565b506002820180547fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff81167b010000000000000000000000000000000000000000000000000000009182900460ff908116600181019091169092021790915592507f8beb4b470a422a5a51289e17afad55bb1f5692ed0b2ad0d71779119481d38992868487873360028801547501000000000000000000000000000000000000000000900461ffff16600090815260048901602052604090819020600101549051612cc796959493929173ffffffffffffffffffffffffffffffffffffffff1690614e3e565b509392505050565b6002810154600182015460ff770100000000000000000000000000000000000000000000008304169173ffffffffffffffffffffffffffffffffffffffff908116916801000000000000000090041660005b8360ff168160ff16101561348c5760ff8116600090815260038601602090815260409182902082518084018452905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905293517fbeabacc80000000000000000000000000000000000000000000000000000000081526004810191909152868416602482015260448101929092529184169063beabacc890606401600060405180830381600087803b15801561346857600080fd5b505af115801561347c573d6000803e3d6000fd5b505050508160010191505061338d565b50600060028581015474010000000000000000000000000000000000000000900460ff16908111156134c0576134c0613c3f565b036134f257600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055613553565b600160028581015474010000000000000000000000000000000000000000900460ff169081111561352557613525613c3f565b0361355357600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b50505060020180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b6000808052600384016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b8560ff168160ff1610156137e45760ff8082166000908152602087905260409020546affffffffffffffffffffff7501000000000000000000000000000000000000000000820416939093019216156137dc5782602001516bffffffffffffffffffffffff1682111561376a57825173ffffffffffffffffffffffffffffffffffffffff166323b872dd338960010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686602001516bffffffffffffffffffffffff16866136cb91906145db565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015613744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137689190614b2d565b505b60ff60019094019384166000908152600388016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b6001016135fd565b50505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff81166138b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064015b60405180910390fd5b919050565b6001830180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8416021790556000808052600385016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8086169082161015613aef5785858260ff168181106139895761398961461b565b90506060020160400160208101906139a19190614e91565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613a03576040517f6e52358c00000000000000000000000000000000000000000000000000000000815260ff821660048201526024016138ac565b85858260ff16818110613a1857613a1861461b565b60ff8416600090815260028b0160205260409020606090910292909201919050613a42828261483a565b90505085858260ff16818110613a5a57613a5a61461b565b613a709260206060909202019081019150614eae565b15613ae75760ff60019094019384166000908152600389016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613966565b5050505050505050565b60038110613b0657600080fd5b50565b803560ff811681146138b557600080fd5b8015158114613b0657600080fd5b60008060008060808587031215613b3e57600080fd5b843593506020850135613b5081613af9565b9250613b5e60408601613b09565b91506060850135613b6e81613b1a565b939692955090935050565b73ffffffffffffffffffffffffffffffffffffffff81168114613b0657600080fd5b80356138b581613b79565b600080600060608486031215613bbb57600080fd5b8335613bc681613b79565b95602085013595506040909401359392505050565b6000815180845260005b81811015613c0157602081850181015186830182015201613be5565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b613cae81613c6e565b9052565b600081518084526020808501945080840160005b83811015613d11578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101613cc6565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015613e08578385038a52825160808151818852613d5d82890182613bdb565b838a015173ffffffffffffffffffffffffffffffffffffffff9081168a8c01526040808601511515818c01526060958601518b8403878d01528051808552908d019689965091945091929091908c01905b80861015613df05786518051151583528d81015185168e8401528501516affffffffffffffffffffff1685830152958c01956001959095019490820190613dae565b509e8b019e9950505094880194505050600101613d3b565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613e98578284038952815160608151818752613e5682880182613bdb565b91505086820151613e6681613c6e565b8688015260409182015186820392870192909252613e848183613bdb565b9a87019a9550505090840190600101613e34565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613e98578284038952815160608151818752613ee582880182613bdb565b838901511515888a01526040938401511515939097019290925250509784019790840190600101613ec3565b60006101408251818552613f2782860182613bdb565b9150506020830151613f45602086018267ffffffffffffffff169052565b506040830151613f5b604086018261ffff169052565b506060830151613f83606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151613f966080860182613ca5565b5060a0830151613fbe60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015184820360c0860152613fd68282613cb2565b91505060e083015184820360e0860152613ff08282613d1c565b915050610100808401518583038287015261400b8382613e16565b9250505061012080840151858303828701526140278382613ea5565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156140a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614092858351613f11565b94509285019290850190600101614058565b5092979650505050505050565b6000602082840312156140c357600080fd5b5035919050565b6020815260006140dd6020830184613f11565b9392505050565b60008083601f8401126140f657600080fd5b50813567ffffffffffffffff81111561410e57600080fd5b6020830191508360208260051b850101111561412957600080fd5b9250929050565b60008060006040848603121561414557600080fd5b83359250602084013567ffffffffffffffff81111561416357600080fd5b61416f868287016140e4565b9497909650939450505050565b60008083601f84011261418e57600080fd5b50813567ffffffffffffffff8111156141a657600080fd5b60208301915083602082850101111561412957600080fd5b6000806000806000606086880312156141d657600080fd5b85359450602086013567ffffffffffffffff808211156141f557600080fd5b61420189838a0161417c565b9096509450604088013591508082111561421a57600080fd5b818801915088601f83011261422e57600080fd5b81358181111561423d57600080fd5b89602060608302850101111561425257600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156142a757600080fd5b823567ffffffffffffffff808211156142bf57600080fd5b818501915085601f8301126142d357600080fd5b8135818111156142e5576142e5614265565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561432857614328614265565b60405291825284820192508381018501918883111561434657600080fd5b938501935b828510156143645784358452938501939285019261434b565b98975050505050505050565b60008060008060006080868803121561438857600080fd5b8535945061439860208701613b09565b935060408601356143a881613af9565b9250606086013567ffffffffffffffff8111156143c457600080fd5b6143d08882890161417c565b969995985093965092949392505050565b6000806000606084860312156143f657600080fd5b83359250602084013561440881613af9565b915061441660408501613b09565b90509250925092565b60008060008060008060008060a0898b03121561443b57600080fd5b883567ffffffffffffffff8082111561445357600080fd5b61445f8c838d0161417c565b909a50985060208b01359150808216821461447957600080fd5b90965060408a0135908082111561448f57600080fd5b818b0191508b601f8301126144a357600080fd5b8135818111156144b257600080fd5b8c60208260061b85010111156144c757600080fd5b60208301975095506144db60608c01613b9b565b945060808b01359150808211156144f157600080fd5b506144fe8b828c016140e4565b999c989b5096995094979396929594505050565b60008060006040848603121561452757600080fd5b83359250602084013567ffffffffffffffff81111561454557600080fd5b61416f8682870161417c565b803561ffff811681146138b557600080fd5b6000806040838503121561457657600080fd5b8235915061458660208401614551565b90509250929050565b85815260a0810161459f86613c6e565b602082019590955260ff93909316604084015273ffffffffffffffffffffffffffffffffffffffff918216606084015216608090910152919050565b81810381811115614615577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061465e57607f821691505b602082108103614697577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156146af57600080fd5b6140dd82614551565b601f82111561470257600081815260208120601f850160051c810160208610156146df5750805b601f850160051c820191505b818110156146fe578281556001016146eb565b5050505b505050565b67ffffffffffffffff83111561471f5761471f614265565b6147338361472d835461464a565b836146b8565b6000601f841160018114614785576000851561474f5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611500565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156147d457868501358255602094850194600190920191016147b4565b508682101561480f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b6affffffffffffffffffffff81168114613b0657600080fd5b813561484581613b1a565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff169182178355602084013561488381613b79565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff000000000000000000000000000000000000000000818482851617178555604086013592506148da83614821565b921760a89190911b90911617905550565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015613d1157813561495781613b1a565b151587528183013561496881613b79565b73ffffffffffffffffffffffffffffffffffffffff168784015260408281013561499181614821565b6affffffffffffffffffffff16908801526060968701969190910190600101614944565b88815261ffff8816602082015260c0604082015260006149d960c08301888a6148eb565b82810360608401526149ec818789614934565b91505073ffffffffffffffffffffffffffffffffffffffff808516608084015280841660a0840152509998505050505050505050565b87815260ff87166020820152614a3786613c6e565b85604082015260c060608201526000614a5460c0830186886148eb565b73ffffffffffffffffffffffffffffffffffffffff94851660808401529290931660a0909101529695505050505050565b86815260c08101614a9587613c6e565b602082019690965260ff94909416604085015273ffffffffffffffffffffffffffffffffffffffff928316606085015290821660808401521660a090910152919050565b600060208284031215614aeb57600080fd5b81356140dd81613b79565b6bffffffffffffffffffffffff81168114613b0657600080fd5b600060208284031215614b2257600080fd5b81356140dd81614af6565b600060208284031215614b3f57600080fd5b81516140dd81613b1a565b8135614b5581613b79565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff000000000000000000000000000000000000000081818454161783556020840135614ba581614af6565b60a01b1617905550565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112614be357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614c2257600080fd5b83018035915067ffffffffffffffff821115614c3d57600080fd5b602001915060608102360382131561412957600080fd5b81835260006020808501808196508560051b810191508460005b87811015613e9857828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1883603018112614cad57600080fd5b870160408135614cbc81613b79565b73ffffffffffffffffffffffffffffffffffffffff16865281870135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112614d0957600080fd5b90910186810191903567ffffffffffffffff811115614d2757600080fd5b606081023603831315614d3957600080fd5b8188880152614d4b8288018285614934565b9b88019b965050509185019150600101614c6e565b8981526000602060c081840152614d7b60c084018b8d6148eb565b67ffffffffffffffff8a1660408581019190915284820360608601528882528991830160005b8a811015614dfb578335614db481613b79565b73ffffffffffffffffffffffffffffffffffffffff16825283850135614dd981614af6565b6bffffffffffffffffffffffff16828601529282019290820190600101614da1565b5073ffffffffffffffffffffffffffffffffffffffff8916608087015285810360a0870152614e2b81888a614c54565b9f9e505050505050505050505050505050565b86815260ff8616602082015260a060408201526000614e6160a0830186886148eb565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b600060208284031215614ea357600080fd5b81356140dd81614821565b600060208284031215614ec057600080fd5b81356140dd81613b1a56fea2646970667358221220c6986a90cc19fa1282469421101480bdfa4292c1525e65406bcc7d6ecd4474ec64736f6c63430008110033608060405234801561001057600080fd5b50610289806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806365b145fb1461003b578063beabacc814610045575b600080fd5b610043610058565b005b6100436100533660046101e9565b6100d4565b60005473ffffffffffffffffffffffffffffffffffffffff16156100a8576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610125576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061022a565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101e657600080fd5b50565b6000806000606084860312156101fe57600080fd5b8335610209816101c4565b92506020840135610219816101c4565b929592945050506040919091013590565b60006020828403121561023c57600080fd5b8151801515811461024c57600080fd5b939250505056fea26469706673582212201d2e0260bc1b668deed1ce5be0dd2fdd10d67c1761b87d684b7f290e81ab5fc364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f45760003560e01c806376645a9311610097578063a5e99c4e11610066578063a5e99c4e14610221578063b685504b14610246578063b6cb58a514610259578063ecb8adae1461026157600080fd5b806376645a93146101c757806377b98419146101da57806391a29225146101ed578063978a2b531461020057600080fd5b80633f561a40116100d35780633f561a40146101575780633f74d41d1461016a57806352a63d491461017d5780635ac1d773146101a357600080fd5b8062f9467d146100f95780630353ce601461010e5780631d65e77e14610137575b600080fd5b61010c610107366004613b28565b610274565b005b61012161011c366004613ba6565b6105bc565b60405161012e9190614031565b60405180910390f35b61014a6101453660046140b1565b6106ec565b60405161012e91906140ca565b61010c610165366004614130565b611249565b610121610178366004613ba6565b611507565b61019061018b3660046141be565b611693565b60405161ffff909116815260200161012e565b6001546002546003546040805193845260208401929092529082015260600161012e565b6101216101d5366004614294565b611900565b61010c6101e8366004614370565b611a18565b61010c6101fb3660046143e1565b612275565b61021361020e36600461441f565b6125b1565b60405190815260200161012e565b61023461022f366004614512565b612a91565b60405160ff909116815260200161012e565b61010c610254366004614563565b612cd8565b600054610213565b61023461026f366004614512565b612fba565b60005484106102af576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff16908111156102f0576102f0613c3f565b14610327576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015461ffff750100000000000000000000000000000000000000000090910416600090815260048201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff1633146103ac576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460028111156103c0576103c0613c3f565b1461055b5760018460028111156103d9576103d9613c3f565b1461055b57600281015460ff7b01000000000000000000000000000000000000000000000000000000909104811690841610610441576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff80841660009081526006830160205260409020600181015490911615610495576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b821561052c576104a48261333b565b60028201546040805188815273ffffffffffffffffffffffffffffffffffffffff90921660208301523382820152517f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e729181900360600190a16001810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600190810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555b60028101546040517f22c8636df8a0387ea92695f6534f3a1dccaa44ba42e7627c4d205e078dbbbe04916105ad9188918891889173ffffffffffffffffffffffffffffffffffffffff1690339061458f565b60405180910390a15050505050565b600080546060918167ffffffffffffffff8111156105dc576105dc614265565b604051908082528060200260200182016040528015610605578160200160208202803683370190505b5090506000856000036106205761061d6001846145db565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106cf5760008181526004602052604090206002015473ffffffffffffffffffffffffffffffffffffffff808a169116036106a8578083838151811061068d5761068d61461b565b602002602001018181525050816001019150858203156106cf575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610622565b5080830382510382526106e182611900565b979650505050505050565b6107586040805161014081018252606080825260006020830181905292820183905281018290529060808201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b6000548210610793576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000828152600460205260409020805481906107ae9061464a565b80601f01602080910402602001604051908101604052809291908181526020018280546107da9061464a565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b5050509184525050600181015467ffffffffffffffff1660208301526002808201547501000000000000000000000000000000000000000000810461ffff16604085015273ffffffffffffffffffffffffffffffffffffffff8116606085015260808401917401000000000000000000000000000000000000000090910460ff16908111156108b8576108b8613c3f565b908160028111156108cb576108cb613c3f565b905250600181015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660a0830152600281015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561093557610935614265565b60405190808252806020026020018201604052801561097a57816020015b60408051808201909152600080825260208201528152602001906001900390816109535790505b5060c083015260005b8260c00151518160ff161015610a235760ff8116600081815260038401602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260c08501518051919290918110610a1057610a1061461b565b6020908102919091010152600101610983565b5060028101547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff811115610a6157610a61614265565b604051908082528060200260200182016040528015610ad557816020015b610ac2604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b815260200190600190039081610a7f5790505b5060e083015260005b8260e00151518160ff161015610e325760ff81166000908152600483016020526040902080548190610b0f9061464a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3b9061464a565b8015610b885780601f10610b5d57610100808354040283529160200191610b88565b820191906000526020600020905b815481529060010190602001808311610b6b57829003601f168201915b50505050508460e001518360ff1681518110610ba657610ba661461b565b602090810291909101015152600181015460e0850151805173ffffffffffffffffffffffffffffffffffffffff9092169160ff8516908110610bea57610bea61461b565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff909216910152600181015460e0850151805160ff740100000000000000000000000000000000000000009093048316928516908110610c4c57610c4c61461b565b602090810291909101015190151560409091015260018101547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610c9957610c99614265565b604051908082528060200260200182016040528015610d0257816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610cb75790505b508460e001518360ff1681518110610d1c57610d1c61461b565b60200260200101516060018190525060005b8460e001518360ff1681518110610d4757610d4761461b565b602002602001015160600151518160ff161015610e285760ff81811660009081526002840160209081526040918290208251606081018452905480851615158252610100810473ffffffffffffffffffffffffffffffffffffffff169282019290925275010000000000000000000000000000000000000000009091046affffffffffffffffffffff169181019190915260e0870151805191929091908616908110610df557610df561461b565b6020026020010151606001518260ff1681518110610e1557610e1561461b565b6020908102919091010152600101610d2e565b5050600101610ade565b5060028101547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115610e7157610e71614265565b604051908082528060200260200182016040528015610ebe57816020015b60408051606080820183528082526000602083015291810191909152815260200190600190039081610e8f5790505b5061010083015260005b826101000151518160ff16101561107b5760ff8116600090815260058301602052604090819020815160608101909252805482908290610f079061464a565b80601f0160208091040260200160405190810160405280929190818152602001828054610f339061464a565b8015610f805780601f10610f5557610100808354040283529160200191610f80565b820191906000526020600020905b815481529060010190602001808311610f6357829003601f168201915b5050509183525050600182015460209091019060ff166002811115610fa757610fa7613c3f565b6002811115610fb857610fb8613c3f565b8152602001600282018054610fcc9061464a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff89061464a565b80156110455780601f1061101a57610100808354040283529160200191611045565b820191906000526020600020905b81548152906001019060200180831161102857829003601f168201915b5050505050815250508361010001518260ff16815181106110685761106861461b565b6020908102919091010152600101610ec8565b5060028101547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156110bb576110bb614265565b60405190808252806020026020018201604052801561112457816020015b60408051606080820183528152600060208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816110d95790505b5061012083015260005b826101200151518160ff1610156112425760ff811660009081526006830160205260409081902081516060810190925280548290829061116d9061464a565b80601f01602080910402602001604051908101604052809291908181526020018280546111999061464a565b80156111e65780601f106111bb576101008083540402835291602001916111e6565b820191906000526020600020905b8154815290600101906020018083116111c957829003601f168201915b50505091835250506001919091015460ff808216151560208401526101009091048116151560409092019190915261012085015180519091841690811061122f5761122f61461b565b602090810291909101015260010161112e565b5050919050565b6000548310611284576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526004602052604081209060028281015474010000000000000000000000000000000000000000900460ff16908111156112c4576112c4613c3f565b146112fb576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015473ffffffffffffffffffffffffffffffffffffffff16331461134e576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b828110156115005760028201547801000000000000000000000000000000000000000000000000900461ffff168484838181106113905761139061461b565b90506020020160208101906113a5919061469d565b61ffff16106113e0576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008260040160008686858181106113fa576113fa61461b565b905060200201602081019061140f919061469d565b61ffff16815260208101919091526040016000206001810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017908190559091506114949084907501000000000000000000000000000000000000000000900460ff1660028401613598565b60018101546040805188815261ffff85166020820152338183015273ffffffffffffffffffffffffffffffffffffffff9092166060830152517f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f9181900360800190a150600101611351565b5050505050565b600080546060918167ffffffffffffffff81111561152757611527614265565b604051908082528060200260200182016040528015611550578160200160208202803683370190505b50905060008560000361156b576115686001846145db565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106cf5760008082815260046020526040902060029081015474010000000000000000000000000000000000000000900460ff16908111156115d4576115d4613c3f565b141580156116395750600081815260046020818152604080842060028101547501000000000000000000000000000000000000000000900461ffff168552909201905290206001015473ffffffffffffffffffffffffffffffffffffffff8981169116145b1561166c57808383815181106116515761165161461b565b602002602001018181525050816001019150858203156106cf575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161156d565b6000805486106116cf576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008681526004602052604081209060028281015474010000000000000000000000000000000000000000900460ff169081111561170f5761170f613c3f565b14611746576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101547801000000000000000000000000000000000000000000000000900461ffff166000908152600482016020526040902080611787878983614707565b5060018101805460ff86167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ff0000000000000000000000000000000000000000909116331717905560005b60ff808616908216101561182d5785858260ff168181106117f9576117f961461b565b60ff841660009081526002860160205260409020606090910292909201919050611823828261483a565b50506001016117d6565b50600282018054600161ffff78010000000000000000000000000000000000000000000000008084048216928301909116027fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff8316811790935594507f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d918a9186918b918b918b918b9173ffffffffffffffffffffffffffffffffffffffff9081169116176118d93390565b6040516118ed9897969594939291906149b5565b60405180910390a1505095945050505050565b60606000825167ffffffffffffffff81111561191e5761191e614265565b6040519080825280602002602001820160405280156119bb57816020015b6119a86040805161014081018252606080825260006020830181905292820183905281018290529060808201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b81526020019060019003908161193c5790505b50905060005b8351811015611a11576119ec8482815181106119df576119df61461b565b60200260200101516106ec565b8282815181106119fe576119fe61461b565b60209081029190910101526001016119c1565b5092915050565b6000548510611a53576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000858152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff1690811115611a9457611a94613c3f565b14611acb576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015473ffffffffffffffffffffffffffffffffffffffff163314611b1e576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015460ff7a010000000000000000000000000000000000000000000000000000909104811690861610611b80576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff85166000908152600582016020526040812090600182015460ff166002811115611bae57611bae613c3f565b14611be5576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808201805487927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911690836002811115611c2557611c25613c3f565b021790555060028101611c39848683614707565b506001856002811115611c4e57611c4e613c3f565b036121dd5760028201547501000000000000000000000000000000000000000000900461ffff166000908152600483016020526040812090336001858101546000808052600388016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff8082168352740100000000000000000000000000000000000000009091046bffffffffffffffffffffffff169282019290925293870154949550680100000000000000009092049091169290919060ff750100000000000000000000000000000000000000000090910416825b8160ff168160ff161015611f9d5760ff81811660009081526002890160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff9081169282019290925275010000000000000000000000000000000000000000009093046affffffffffffffffffffff16838301819052865160018c015493517fbeabacc800000000000000000000000000000000000000000000000000000000815290831660048201529282166024840152604483015287169063beabacc890606401600060405180830381600087803b158015611e1b57600080fd5b505af1158015611e2f573d6000803e3d6000fd5b5050505060408101516020850180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805115611f945760208401516bffffffffffffffffffffffff1615611f2657835160208501516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b158015611f0d57600080fd5b505af1158015611f21573d6000803e3d6000fd5b505050505b60ff6001909501948516600090815260038b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff74010000000000000000000000000000000000000000909104169082015293505b50600101611d2b565b50600288015477010000000000000000000000000000000000000000000000900460ff165b8060ff168460ff1610156120e957825160208401516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015288831660248201526bffffffffffffffffffffffff90911660448201529086169063beabacc890606401600060405180830381600087803b15801561205e57600080fd5b505af1158015612072573d6000803e3d6000fd5b50505060ff6001909501948516600090815260038b01602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683526bffffffffffffffffffffffff7401000000000000000000000000000000000000000090910416908201529350611fc29050565b600289810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000008302179055506002600081546001900391905081905550600360008154600101919050819055507f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d968e878960010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516121cd9392919092835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b60405180910390a1505050505050505b7f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a930387878787873360028901547501000000000000000000000000000000000000000000900461ffff16600090815260048a016020526040908190206001015490516122649796959493929173ffffffffffffffffffffffffffffffffffffffff1690614a22565b60405180910390a150505050505050565b60005483106122b0576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff16908111156122f1576122f1613c3f565b14612328576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083600281111561233c5761233c613c3f565b1461251c57600183600281111561235557612355613c3f565b1461251c57600281015460ff7b010000000000000000000000000000000000000000000000000000009091048116908316106123bd576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff808316600090815260068301602052604090206001810154909116612410576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001810154610100900460ff1615612454576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61245d8261333b565b600282015461ffff7501000000000000000000000000000000000000000000820416600090815260048401602090815260409182902060010154825189815273ffffffffffffffffffffffffffffffffffffffff948516928101929092529290921682820152517f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e729181900360600190a160010180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b7fa20926c2163603eba714f9531625851214f394b2984a5038f03c478b73b0458a84848433600286015461ffff75010000000000000000000000000000000000000000008204166000908152600488016020526040908190206001015490516125a3969594939273ffffffffffffffffffffffffffffffffffffffff908116921690614a85565b60405180910390a150505050565b6000805460018101825580825260046020526040909120806125d48a8c83614707565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a161790556002810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8916021790556005546000906126799073ffffffffffffffffffffffffffffffffffffffff166137ed565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156126c357600080fd5b505af11580156126d7573d6000803e3d6000fd5b505050506001820180547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff84160217905560005b60ff811688111561289f5788888260ff1681811061274b5761274b61461b565b6127619260206040909202019081019150614ad9565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff168181106127935761279361461b565b90506040020160200160208101906127ab9190614b10565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015612832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128569190614b2d565b5088888260ff1681811061286c5761286c61461b565b60ff84166000908152600387016020526040908190209102929092019190506128958282614b4a565b505060010161272b565b506002820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881617905560018054810190558315612a3c576002820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff8116851115612a3a5761ffff81166000818152600485016020526040902090879087908181106129735761297361461b565b90506020028101906129859190614baf565b612993906020810190614ad9565b6001820180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911774010000000000000000000000000000000000000000179055612a318482898961ffff8716818110612a0c57612a0c61461b565b9050602002810190612a1e9190614baf565b612a2c906020810190614bed565b6138ba565b5060010161293e565b505b7fd2d2cd619dd6aa2c2e812eeab185d133d2dafbc312cc04664111893c3abfd531838c8c8c8c8c8c8c8c604051612a7b99989796959493929190614d60565b60405180910390a1505098975050505050505050565b600080548410612acd576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600160028281015474010000000000000000000000000000000000000000900460ff1690811115612b0e57612b0e613c3f565b14612b45576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015461ffff750100000000000000000000000000000000000000000090910416600090815260048201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff163314612bca576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101547a010000000000000000000000000000000000000000000000000000900460ff166000908152600582016020526040902080612c0c858783614707565b50600282018054600160ff7a0100000000000000000000000000000000000000000000000000008084048216928301909116027fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff8316811790935594507febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d12871291889186918991899173ffffffffffffffffffffffffffffffffffffffff908116911617612cb53390565b604051612cc796959493929190614e3e565b60405180910390a150509392505050565b6000548210612d13576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526004602052604081209060028281015474010000000000000000000000000000000000000000900460ff1690811115612d5357612d53613c3f565b14612d8a576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600281015461ffff7801000000000000000000000000000000000000000000000000909104811690831610612deb576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff821660009081526004820160205260409020600181015473ffffffffffffffffffffffffffffffffffffffff163314612e53576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015474010000000000000000000000000000000000000000900460ff16612ea9576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600282810180547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000061ffff87169081027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169190911774010000000000000000000000000000000000000000178255600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0181558354019092555460408051878152602081019390935273ffffffffffffffffffffffffffffffffffffffff909116908201523360608201527f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de1906080016125a3565b600080548410612ff6576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000848152600460205260409020600281015473ffffffffffffffffffffffffffffffffffffffff163314613057576040517f7d1b73b900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002808281015474010000000000000000000000000000000000000000900460ff169081111561308957613089613c3f565b036130c0576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028281015474010000000000000000000000000000000000000000900460ff16908111156130f3576130f3613c3f565b14806131105750600181015467ffffffffffffffff428116911611155b1561320b5761311e8161333b565b7f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e728533600060028581015474010000000000000000000000000000000000000000900460ff169081111561317457613174613c3f565b146131ca5760028401547501000000000000000000000000000000000000000000900461ffff16600090815260048501602052604090206001015473ffffffffffffffffffffffffffffffffffffffff166131cd565b60005b6040805193845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a160ff9150613333565b60028101547b01000000000000000000000000000000000000000000000000000000900460ff16600090815260068201602052604090208061324e858783614707565b506002820180547fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff81167b010000000000000000000000000000000000000000000000000000009182900460ff908116600181019091169092021790915592507f8beb4b470a422a5a51289e17afad55bb1f5692ed0b2ad0d71779119481d38992868487873360028801547501000000000000000000000000000000000000000000900461ffff16600090815260048901602052604090819020600101549051612cc796959493929173ffffffffffffffffffffffffffffffffffffffff1690614e3e565b509392505050565b6002810154600182015460ff770100000000000000000000000000000000000000000000008304169173ffffffffffffffffffffffffffffffffffffffff908116916801000000000000000090041660005b8360ff168160ff16101561348c5760ff8116600090815260038601602090815260409182902082518084018452905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905293517fbeabacc80000000000000000000000000000000000000000000000000000000081526004810191909152868416602482015260448101929092529184169063beabacc890606401600060405180830381600087803b15801561346857600080fd5b505af115801561347c573d6000803e3d6000fd5b505050508160010191505061338d565b50600060028581015474010000000000000000000000000000000000000000900460ff16908111156134c0576134c0613c3f565b036134f257600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055613553565b600160028581015474010000000000000000000000000000000000000000900460ff169081111561352557613525613c3f565b0361355357600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b50505060020180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b6000808052600384016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b8560ff168160ff1610156137e45760ff8082166000908152602087905260409020546affffffffffffffffffffff7501000000000000000000000000000000000000000000820416939093019216156137dc5782602001516bffffffffffffffffffffffff1682111561376a57825173ffffffffffffffffffffffffffffffffffffffff166323b872dd338960010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686602001516bffffffffffffffffffffffff16866136cb91906145db565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af1158015613744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137689190614b2d565b505b60ff60019094019384166000908152600388016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b6001016135fd565b50505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff81166138b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c65640000000000000000000060448201526064015b60405180910390fd5b919050565b6001830180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8416021790556000808052600385016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8086169082161015613aef5785858260ff168181106139895761398961461b565b90506060020160400160208101906139a19190614e91565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613a03576040517f6e52358c00000000000000000000000000000000000000000000000000000000815260ff821660048201526024016138ac565b85858260ff16818110613a1857613a1861461b565b60ff8416600090815260028b0160205260409020606090910292909201919050613a42828261483a565b90505085858260ff16818110613a5a57613a5a61461b565b613a709260206060909202019081019150614eae565b15613ae75760ff60019094019384166000908152600389016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613966565b5050505050505050565b60038110613b0657600080fd5b50565b803560ff811681146138b557600080fd5b8015158114613b0657600080fd5b60008060008060808587031215613b3e57600080fd5b843593506020850135613b5081613af9565b9250613b5e60408601613b09565b91506060850135613b6e81613b1a565b939692955090935050565b73ffffffffffffffffffffffffffffffffffffffff81168114613b0657600080fd5b80356138b581613b79565b600080600060608486031215613bbb57600080fd5b8335613bc681613b79565b95602085013595506040909401359392505050565b6000815180845260005b81811015613c0157602081850181015186830182015201613be5565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110613b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b613cae81613c6e565b9052565b600081518084526020808501945080840160005b83811015613d11578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101613cc6565b509495945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015613e08578385038a52825160808151818852613d5d82890182613bdb565b838a015173ffffffffffffffffffffffffffffffffffffffff9081168a8c01526040808601511515818c01526060958601518b8403878d01528051808552908d019689965091945091929091908c01905b80861015613df05786518051151583528d81015185168e8401528501516affffffffffffffffffffff1685830152958c01956001959095019490820190613dae565b509e8b019e9950505094880194505050600101613d3b565b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613e98578284038952815160608151818752613e5682880182613bdb565b91505086820151613e6681613c6e565b8688015260409182015186820392870192909252613e848183613bdb565b9a87019a9550505090840190600101613e34565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015613e98578284038952815160608151818752613ee582880182613bdb565b838901511515888a01526040938401511515939097019290925250509784019790840190600101613ec3565b60006101408251818552613f2782860182613bdb565b9150506020830151613f45602086018267ffffffffffffffff169052565b506040830151613f5b604086018261ffff169052565b506060830151613f83606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151613f966080860182613ca5565b5060a0830151613fbe60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015184820360c0860152613fd68282613cb2565b91505060e083015184820360e0860152613ff08282613d1c565b915050610100808401518583038287015261400b8382613e16565b9250505061012080840151858303828701526140278382613ea5565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156140a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452614092858351613f11565b94509285019290850190600101614058565b5092979650505050505050565b6000602082840312156140c357600080fd5b5035919050565b6020815260006140dd6020830184613f11565b9392505050565b60008083601f8401126140f657600080fd5b50813567ffffffffffffffff81111561410e57600080fd5b6020830191508360208260051b850101111561412957600080fd5b9250929050565b60008060006040848603121561414557600080fd5b83359250602084013567ffffffffffffffff81111561416357600080fd5b61416f868287016140e4565b9497909650939450505050565b60008083601f84011261418e57600080fd5b50813567ffffffffffffffff8111156141a657600080fd5b60208301915083602082850101111561412957600080fd5b6000806000806000606086880312156141d657600080fd5b85359450602086013567ffffffffffffffff808211156141f557600080fd5b61420189838a0161417c565b9096509450604088013591508082111561421a57600080fd5b818801915088601f83011261422e57600080fd5b81358181111561423d57600080fd5b89602060608302850101111561425257600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156142a757600080fd5b823567ffffffffffffffff808211156142bf57600080fd5b818501915085601f8301126142d357600080fd5b8135818111156142e5576142e5614265565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561432857614328614265565b60405291825284820192508381018501918883111561434657600080fd5b938501935b828510156143645784358452938501939285019261434b565b98975050505050505050565b60008060008060006080868803121561438857600080fd5b8535945061439860208701613b09565b935060408601356143a881613af9565b9250606086013567ffffffffffffffff8111156143c457600080fd5b6143d08882890161417c565b969995985093965092949392505050565b6000806000606084860312156143f657600080fd5b83359250602084013561440881613af9565b915061441660408501613b09565b90509250925092565b60008060008060008060008060a0898b03121561443b57600080fd5b883567ffffffffffffffff8082111561445357600080fd5b61445f8c838d0161417c565b909a50985060208b01359150808216821461447957600080fd5b90965060408a0135908082111561448f57600080fd5b818b0191508b601f8301126144a357600080fd5b8135818111156144b257600080fd5b8c60208260061b85010111156144c757600080fd5b60208301975095506144db60608c01613b9b565b945060808b01359150808211156144f157600080fd5b506144fe8b828c016140e4565b999c989b5096995094979396929594505050565b60008060006040848603121561452757600080fd5b83359250602084013567ffffffffffffffff81111561454557600080fd5b61416f8682870161417c565b803561ffff811681146138b557600080fd5b6000806040838503121561457657600080fd5b8235915061458660208401614551565b90509250929050565b85815260a0810161459f86613c6e565b602082019590955260ff93909316604084015273ffffffffffffffffffffffffffffffffffffffff918216606084015216608090910152919050565b81810381811115614615577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061465e57607f821691505b602082108103614697577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156146af57600080fd5b6140dd82614551565b601f82111561470257600081815260208120601f850160051c810160208610156146df5750805b601f850160051c820191505b818110156146fe578281556001016146eb565b5050505b505050565b67ffffffffffffffff83111561471f5761471f614265565b6147338361472d835461464a565b836146b8565b6000601f841160018114614785576000851561474f5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611500565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156147d457868501358255602094850194600190920191016147b4565b508682101561480f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b6affffffffffffffffffffff81168114613b0657600080fd5b813561484581613b1a565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff169182178355602084013561488381613b79565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff000000000000000000000000000000000000000000818482851617178555604086013592506148da83614821565b921760a89190911b90911617905550565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015613d1157813561495781613b1a565b151587528183013561496881613b79565b73ffffffffffffffffffffffffffffffffffffffff168784015260408281013561499181614821565b6affffffffffffffffffffff16908801526060968701969190910190600101614944565b88815261ffff8816602082015260c0604082015260006149d960c08301888a6148eb565b82810360608401526149ec818789614934565b91505073ffffffffffffffffffffffffffffffffffffffff808516608084015280841660a0840152509998505050505050505050565b87815260ff87166020820152614a3786613c6e565b85604082015260c060608201526000614a5460c0830186886148eb565b73ffffffffffffffffffffffffffffffffffffffff94851660808401529290931660a0909101529695505050505050565b86815260c08101614a9587613c6e565b602082019690965260ff94909416604085015273ffffffffffffffffffffffffffffffffffffffff928316606085015290821660808401521660a090910152919050565b600060208284031215614aeb57600080fd5b81356140dd81613b79565b6bffffffffffffffffffffffff81168114613b0657600080fd5b600060208284031215614b2257600080fd5b81356140dd81614af6565b600060208284031215614b3f57600080fd5b81516140dd81613b1a565b8135614b5581613b79565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff000000000000000000000000000000000000000081818454161783556020840135614ba581614af6565b60a01b1617905550565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112614be357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614c2257600080fd5b83018035915067ffffffffffffffff821115614c3d57600080fd5b602001915060608102360382131561412957600080fd5b81835260006020808501808196508560051b810191508460005b87811015613e9857828403895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1883603018112614cad57600080fd5b870160408135614cbc81613b79565b73ffffffffffffffffffffffffffffffffffffffff16865281870135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1018112614d0957600080fd5b90910186810191903567ffffffffffffffff811115614d2757600080fd5b606081023603831315614d3957600080fd5b8188880152614d4b8288018285614934565b9b88019b965050509185019150600101614c6e565b8981526000602060c081840152614d7b60c084018b8d6148eb565b67ffffffffffffffff8a1660408581019190915284820360608601528882528991830160005b8a811015614dfb578335614db481613b79565b73ffffffffffffffffffffffffffffffffffffffff16825283850135614dd981614af6565b6bffffffffffffffffffffffff16828601529282019290820190600101614da1565b5073ffffffffffffffffffffffffffffffffffffffff8916608087015285810360a0870152614e2b81888a614c54565b9f9e505050505050505050505050505050565b86815260ff8616602082015260a060408201526000614e6160a0830186886148eb565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b600060208284031215614ea357600080fd5b81356140dd81614821565b600060208284031215614ec057600080fd5b81356140dd81613b1a56fea2646970667358221220c6986a90cc19fa1282469421101480bdfa4292c1525e65406bcc7d6ecd4474ec64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applications": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "params": {
          "_execute": "If the request should also be executed in this transaction.",
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_manager": "Who will manage the task (become the proposer).",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "executeRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "params": {
          "_executor": "The executor to fetch tasks of.",
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getProposingTasks(address,uint256,uint256)": {
        "params": {
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_max": "The maximum amount of tasks to return. 0 for no max.",
          "_proposer": "The proposer to fetch tasks of."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submission": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_application": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "notice": "Create a new task."
      },
      "executeRequest(uint256,uint8,uint8)": {
        "notice": "Exectued an accepted request, allows anyone to pay for the gas costs of the execution."
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of an executor. Most recent ones first."
      },
      "getProposingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of a proposer. Most recent ones first."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "taskStatistics()": {
        "notice": "Retrieves the current statistics of created tasks."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 782,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 785,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "openTasks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 787,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "takenTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 789,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "successfulTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 795,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Task)561_storage)"
      },
      {
        "astId": 798,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "escrowImplementation",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)237": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)157": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)465": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)518": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)443_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)443_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)561_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)561_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)514_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)514_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)422_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)422_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)429_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)429_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)473_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)473_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)443_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 431,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 433,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 435,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 437,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 442,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)429_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(CancelTaskRequest)514_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 509,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 511,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 513,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executed",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC20Transfer)422_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 419,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)157"
          },
          {
            "astId": 421,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)429_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 424,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 426,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 428,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)473_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 467,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 470,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(SubmissionJudgement)465"
          },
          {
            "astId": 472,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "feedback",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Task)561_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 520,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 522,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 525,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 8,
            "slot": "1",
            "type": "t_contract(Escrow)237"
          },
          {
            "astId": 527,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "proposer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 530,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "2",
            "type": "t_enum(TaskState)518"
          },
          {
            "astId": 532,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 21,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 534,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 23,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 536,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 24,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 538,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 26,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 540,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 27,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 545,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)422_storage)"
          },
          {
            "astId": 550,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint16,t_struct(Application)443_storage)"
          },
          {
            "astId": 555,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint8,t_struct(Submission)473_storage)"
          },
          {
            "astId": 560,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)514_storage)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}