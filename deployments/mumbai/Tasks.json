{
  "address": "0x48FC281D5a1Ee656a189e4b02D2881b94A36e0b6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApplicationDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApplicationNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Disabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDisabler",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourApplication",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardAboveBudget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RewardDoesntEndWithNewToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionAlreadyJudged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubmissionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskNotTaken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.Reward[]",
          "name": "reward",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96[]",
          "name": "increase",
          "type": "uint96[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "BudgetIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "explanation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "CancelTaskRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "extension",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "DeadlineExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newMetadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "MetadataEditted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "RequestExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "judgement",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "feedback",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SubmissionReviewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "budget",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "preapproved",
          "type": "tuple[]"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "TaskTaken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "_applicationIds",
          "type": "uint16[]"
        }
      ],
      "name": "acceptApplications",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "nextToken",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint88",
              "name": "amount",
              "type": "uint88"
            }
          ],
          "internalType": "struct ITasks.Reward[]",
          "name": "_reward",
          "type": "tuple[]"
        }
      ],
      "name": "applyForTask",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "applicationId",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_explanation",
          "type": "string"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "cancelTaskRequestId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createSubmission",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "submissionId",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "_deadline",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "amount",
              "type": "uint96"
            }
          ],
          "internalType": "struct ITasks.ERC20Transfer[]",
          "name": "_budget",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "applicant",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "nextToken",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint88",
                  "name": "amount",
                  "type": "uint88"
                }
              ],
              "internalType": "struct ITasks.Reward[]",
              "name": "reward",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.PreapprovedApplication[]",
          "name": "_preapprove",
          "type": "tuple[]"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newMetadata",
          "type": "string"
        }
      ],
      "name": "editMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "enum ITasks.RequestType",
          "name": "_requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestId",
          "type": "uint8"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_extension",
          "type": "uint64"
        }
      ],
      "name": "extendDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getExecutingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromTaskId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "getManagingTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "getTask",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask",
          "name": "offchainTask",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_taskIds",
          "type": "uint256[]"
        }
      ],
      "name": "getTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "deadline",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "executorApplication",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "enum ITasks.TaskState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "contract Escrow",
              "name": "escrow",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "tokenContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "amount",
                  "type": "uint96"
                }
              ],
              "internalType": "struct ITasks.ERC20Transfer[]",
              "name": "budget",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "applicant",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "accepted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "nextToken",
                      "type": "bool"
                    },
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint88",
                      "name": "amount",
                      "type": "uint88"
                    }
                  ],
                  "internalType": "struct ITasks.Reward[]",
                  "name": "reward",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct ITasks.OffChainApplication[]",
              "name": "applications",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "feedback",
                  "type": "string"
                },
                {
                  "internalType": "enum ITasks.SubmissionJudgement",
                  "name": "judgement",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ITasks.Submission[]",
              "name": "submissions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bool",
                      "name": "accepted",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "executed",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct ITasks.Request",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "string",
                  "name": "explanation",
                  "type": "string"
                }
              ],
              "internalType": "struct ITasks.CancelTaskRequest[]",
              "name": "cancelTaskRequests",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ITasks.OffChainTask[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint96[]",
          "name": "_increase",
          "type": "uint96[]"
        }
      ],
      "name": "increaseBudget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_submissionId",
          "type": "uint8"
        },
        {
          "internalType": "enum ITasks.SubmissionJudgement",
          "name": "_judgement",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_feedback",
          "type": "string"
        }
      ],
      "name": "reviewSubmission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_applicationId",
          "type": "uint16"
        }
      ],
      "name": "takeTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "open",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "taken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successful",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x403c3564ef403bd5d0097a0f0ca22f43f844b8238a8951241ff83bb63911bdf5",
  "receipt": {
    "to": null,
    "from": "0x6568322A7d8212236eA784bA0c7C2dEa1e6EAB0F",
    "contractAddress": "0x48FC281D5a1Ee656a189e4b02D2881b94A36e0b6",
    "transactionIndex": 2,
    "gasUsed": "4868280",
    "logsBloom": "0x
    "blockHash": "0x5aa71097ca847274f56ea7029eb3ec46ed81a6193a2ed4023bdd024b3d3a202f",
    "transactionHash": "0x403c3564ef403bd5d0097a0f0ca22f43f844b8238a8951241ff83bb63911bdf5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38444255,
        "transactionHash": "0x403c3564ef403bd5d0097a0f0ca22f43f844b8238a8951241ff83bb63911bdf5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006568322a7d8212236ea784ba0c7c2dea1e6eab0f",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019f1832619c8000000000000000000000000000000000000000000000000001b0484e498f766d6000000000000000000000000000000000000000000000d18180808ef48f69b540000000000000000000000000000000000000000000000001aea936172dd9ed6000000000000000000000000000000000000000000000d181821fa726f106354",
        "logIndex": 5,
        "blockHash": "0x5aa71097ca847274f56ea7029eb3ec46ed81a6193a2ed4023bdd024b3d3a202f"
      }
    ],
    "blockNumber": 38444255,
    "cumulativeGasUsed": "5012160",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3b69360506cf43a57b06fa0e5373dcab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApplicationDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApplicationNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Disabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDisabler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourApplication\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardAboveBudget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDoesntEndWithNewToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionAlreadyJudged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubmissionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskNotTaken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"indexed\":false,\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"increase\",\"type\":\"uint96[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"BudgetIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"CancelTaskRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"extension\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"DeadlineExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"MetadataEditted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ITasks.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"RequestExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SubmissionReviewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"preapproved\",\"type\":\"tuple[]\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"TaskTaken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"_applicationIds\",\"type\":\"uint16[]\"}],\"name\":\"acceptApplications\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"_reward\",\"type\":\"tuple[]\"}],\"name\":\"applyForTask\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"applicationId\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_explanation\",\"type\":\"string\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"cancelTaskRequestId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSubmission\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"submissionId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"_budget\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.PreapprovedApplication[]\",\"name\":\"_preapprove\",\"type\":\"tuple[]\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newMetadata\",\"type\":\"string\"}],\"name\":\"editMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"enum ITasks.RequestType\",\"name\":\"_requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestId\",\"type\":\"uint8\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_extension\",\"type\":\"uint64\"}],\"name\":\"extendDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getExecutingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTaskId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"getManagingTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"getTask\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask\",\"name\":\"offchainTask\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_taskIds\",\"type\":\"uint256[]\"}],\"name\":\"getTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"executorApplication\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"enum ITasks.TaskState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"contract Escrow\",\"name\":\"escrow\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"internalType\":\"struct ITasks.ERC20Transfer[]\",\"name\":\"budget\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"nextToken\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint88\",\"name\":\"amount\",\"type\":\"uint88\"}],\"internalType\":\"struct ITasks.Reward[]\",\"name\":\"reward\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainApplication[]\",\"name\":\"applications\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feedback\",\"type\":\"string\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"judgement\",\"type\":\"uint8\"}],\"internalType\":\"struct ITasks.Submission[]\",\"name\":\"submissions\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"internalType\":\"struct ITasks.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"explanation\",\"type\":\"string\"}],\"internalType\":\"struct ITasks.CancelTaskRequest[]\",\"name\":\"cancelTaskRequests\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ITasks.OffChainTask[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint96[]\",\"name\":\"_increase\",\"type\":\"uint96[]\"}],\"name\":\"increaseBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_submissionId\",\"type\":\"uint8\"},{\"internalType\":\"enum ITasks.SubmissionJudgement\",\"name\":\"_judgement\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_feedback\",\"type\":\"string\"}],\"name\":\"reviewSubmission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_applicationId\",\"type\":\"uint16\"}],\"name\":\"takeTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successful\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"params\":{\"_applicationIds\":\"Indexes of the applications to accept.\",\"_taskId\":\"Id of the task.\"}},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"params\":{\"_execute\":\"If the request should also be executed in this transaction.\",\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"params\":{\"_metadata\":\"Metadata of your application.\",\"_reward\":\"Wanted rewards for completing the task.\",\"_taskId\":\"Id of the task.\"}},\"cancelTask(uint256,string)\":{\"params\":{\"_explanation\":\"Why the task was cancelled. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createSubmission(uint256,string)\":{\"params\":{\"_metadata\":\"Metadata of the submission. (IPFS hash)\",\"_taskId\":\"Id of the task.\"}},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"params\":{\"_budget\":\"Maximum ERC20 rewards that can be earned by completing the task.\",\"_deadline\":\"Block timestamp at which the task expires if not completed.\",\"_manager\":\"Who will manage the task (become the manager).\",\"_metadata\":\"Metadata of the task. (IPFS hash)\"},\"returns\":{\"taskId\":\"Id of the newly created task.\"}},\"editMetadata(uint256,string)\":{\"details\":\"This metadata update might change the task completely. Show a warning to people who applied before the change.\",\"params\":{\"_newMetadata\":\"New metadata of the task.\",\"_taskId\":\"Id of the task.\"}},\"executeRequest(uint256,uint8,uint8)\":{\"params\":{\"_requestId\":\"Id of the request.\",\"_requestType\":\"What kind of request it is.\",\"_taskId\":\"Id of the task.\"}},\"extendDeadline(uint256,uint64)\":{\"params\":{\"_extension\":\"How much to extend the deadline by.\",\"_taskId\":\"Id of the task.\"}},\"getExecutingTasks(address,uint256,uint256)\":{\"params\":{\"_executor\":\"The executor to fetch tasks of.\",\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getManagingTasks(address,uint256,uint256)\":{\"params\":{\"_fromTaskId\":\"What taskId to start from. 0 for most recent task.\",\"_manager\":\"The manager to fetch tasks of.\",\"_max\":\"The maximum amount of tasks to return. 0 for no max.\"}},\"getTask(uint256)\":{\"params\":{\"_taskId\":\"Id of the task.\"}},\"getTasks(uint256[])\":{\"params\":{\"_taskIds\":\"Ids of the tasks.\"}},\"increaseBudget(uint256,uint96[])\":{\"params\":{\"_increase\":\"How much to increase each tokens amount by.\",\"_taskId\":\"Id of the task.\"}},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"params\":{\"_feedback\":\"Reasoning of the reviewer. (IPFS hash)\",\"_judgement\":\"Outcome of the review.\",\"_submissionId\":\"Index of the submission that is reviewed.\",\"_taskId\":\"Id of the task.\"}},\"takeTask(uint256,uint16)\":{\"params\":{\"_applicationId\":\"Index of application you made that has been accepted.\",\"_taskId\":\"Id of the task.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptApplications(uint256,uint16[])\":{\"notice\":\"Accept application to allow them to take the task.\"},\"acceptRequest(uint256,uint8,uint8,bool)\":{\"notice\":\"Accepts a request, executing the proposed action.\"},\"applyForTask(uint256,string,(bool,address,uint88)[])\":{\"notice\":\"Apply to take the task.\"},\"cancelTask(uint256,string)\":{\"notice\":\"Cancels a task. This can be used to close a task and receive back the budget.\"},\"createSubmission(uint256,string)\":{\"notice\":\"Create a submission.\"},\"createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])\":{\"notice\":\"Create a new task.\"},\"editMetadata(uint256,string)\":{\"notice\":\"Edit the metadata of a task.\"},\"executeRequest(uint256,uint8,uint8)\":{\"notice\":\"Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\"},\"extendDeadline(uint256,uint64)\":{\"notice\":\"Extend the deadline of a task.\"},\"getExecutingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of an executor. Most recent ones first.\"},\"getManagingTasks(address,uint256,uint256)\":{\"notice\":\"Retrieves all tasks of a manager. Most recent ones first.\"},\"getTask(uint256)\":{\"notice\":\"Retrieves all task information by id.\"},\"getTasks(uint256[])\":{\"notice\":\"Retrieves multiple tasks.\"},\"increaseBudget(uint256,uint96[])\":{\"notice\":\"Increase the budget of the task.\"},\"reviewSubmission(uint256,uint8,uint8,string)\":{\"notice\":\"Review a submission.\"},\"takeTask(uint256,uint16)\":{\"notice\":\"Take the task after your application has been accepted.\"},\"taskCount()\":{\"notice\":\"Retrieves the current amount of created tasks.\"},\"taskStatistics()\":{\"notice\":\"Retrieves the current statistics of created tasks.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Tasks/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Escrow {\\r\\n    error AlreadyInitialized();\\r\\n    error NotOwner();\\r\\n\\r\\n    address private owner;\\r\\n\\r\\n    function __Escrow_init() external {\\r\\n        if (owner != address(0)) {\\r\\n            revert AlreadyInitialized();\\r\\n        }\\r\\n        \\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function transfer(IERC20 token, address to, uint256 amount) external {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x460a4d880edb618af736b39cfc0dd7064d47afdf312f77d9cf6240d938c52a70\",\"license\":\"None\"},\"contracts/Tasks/ITasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { Escrow } from \\\"./Escrow.sol\\\";\\r\\n\\r\\n/*\\r\\n  Some of the functionality in this contract will be removed in the next version.\\r\\n  This functionality will be provided by off-chain indexing instead.\\r\\n  Therefore this functionality might be implemented in a more dirty way to make it easier to remove.\\r\\n  This is true for:\\r\\n  - taskStatistics\\r\\n  - getManagingTasks\\r\\n  - getExecutingTasks\\r\\n  - manager and executor/applicant in all events (except first introduction)\\r\\n\\r\\n  Seperation of manager and creator is also a recent change. The frontend will currently use creator == manager.\\r\\n  Hence there is also no getCreatedTasks.\\r\\n*/\\r\\ninterface ITasks {\\r\\n    error TaskDoesNotExist();\\r\\n    error TaskNotOpen();\\r\\n    error TaskNotTaken();\\r\\n    error TaskNotClosed();\\r\\n    error TaskClosed();\\r\\n\\r\\n    error NotManager();\\r\\n    error NotExecutor();\\r\\n\\r\\n    error RewardAboveBudget();\\r\\n    error RewardDoesntEndWithNewToken();\\r\\n    error ApplicationDoesNotExist();\\r\\n    error NotYourApplication();\\r\\n    error ApplicationNotAccepted();\\r\\n    error SubmissionDoesNotExist();\\r\\n    error SubmissionAlreadyJudged();\\r\\n\\r\\n    error RequestDoesNotExist();\\r\\n    error RequestAlreadyAccepted();\\r\\n    error RequestNotAccepted();\\r\\n    error RequestAlreadyExecuted();\\r\\n\\r\\n    event TaskCreated(uint256 indexed taskId, string metadata, uint64 deadline, ERC20Transfer[] budget, address creator, address manager, PreapprovedApplication[] preapproved);\\r\\n    event ApplicationCreated(uint256 indexed taskId, uint16 applicationId, string metadata, Reward[] reward, address manager, address applicant);\\r\\n    event ApplicationAccepted(uint256 indexed taskId, uint16 applicationId, address manager, address applicant);\\r\\n    event TaskTaken(uint256 indexed taskId, uint16 applicationId, address manager, address executor);\\r\\n    event SubmissionCreated(uint256 indexed taskId, uint8 submissionId, string metadata, address manager, address executor);\\r\\n    event SubmissionReviewed(uint256 indexed taskId, uint8 submissionId, SubmissionJudgement judgement, string feedback, address manager, address executor);\\r\\n    event TaskCompleted(uint256 indexed taskId, address manager, address executor);\\r\\n\\r\\n    event CancelTaskRequested(uint256 indexed taskId, uint8 requestId, string explanation, address manager, address executor);\\r\\n    event TaskCancelled(uint256 indexed taskId, address manager, address executor);\\r\\n    event RequestAccepted(uint256 indexed taskId, RequestType requestType, uint8 requestId, address manager, address executor);\\r\\n    event RequestExecuted(uint256 indexed taskId, RequestType requestType, uint8 requestId, address by, address manager, address executor);\\r\\n\\r\\n    event DeadlineExtended(uint256 indexed taskId, uint64 extension, address manager, address executor);\\r\\n    event BudgetIncreased(uint256 indexed taskId, uint96[] increase, address manager);\\r\\n    event MetadataEditted(uint256 indexed taskId, string newMetadata, address manager);\\r\\n\\r\\n    /// @notice A container for ERC20 transfer information.\\r\\n    /// @param tokenContract ERC20 token to transfer.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct ERC20Transfer {\\r\\n        IERC20 tokenContract;\\r\\n        uint96 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a reward payout.\\r\\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\\r\\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\\r\\n    /// @notice nextToken should always be true for the last entry\\r\\n    /// @param to Whom this token should be transfered to.\\r\\n    /// @param amount How much of this token should be transfered.\\r\\n    struct Reward {\\r\\n        bool nextToken;\\r\\n        address to;\\r\\n        uint88 amount;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a task application.\\r\\n    /// @param metadata Metadata of the application. (IPFS hash)\\r\\n    /// @param applicant Who has submitted this application.\\r\\n    /// @param accepted If the application has been accepted by the manager.\\r\\n    /// @param reward How much rewards the applicant wants for completion.\\r\\n    struct Application {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        uint8 rewardCount;\\r\\n        mapping(uint8 => Reward) reward;\\r\\n    }\\r\\n\\r\\n    struct OffChainApplication {\\r\\n        string metadata;\\r\\n        address applicant;\\r\\n        bool accepted;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    /// @notice For approving people on task creation (they are not required to make an application)\\r\\n    struct PreapprovedApplication {\\r\\n        address applicant;\\r\\n        Reward[] reward;\\r\\n    }\\r\\n\\r\\n    enum SubmissionJudgement { None, Accepted, Rejected }\\r\\n    /// @notice A container for a task submission.\\r\\n    /// @param metadata Metadata of the submission. (IPFS hash)\\r\\n    /// @param judgement Judgement cast on the submission.\\r\\n    /// @param feedback A response from the manager. (IPFS hash)\\r\\n    struct Submission {\\r\\n        string metadata;\\r\\n        string feedback;\\r\\n        SubmissionJudgement judgement;\\r\\n    }\\r\\n\\r\\n    enum RequestType { CancelTask }\\r\\n\\r\\n    /// @notice A container for shared request information.\\r\\n    /// @param accepted If the request was accepted.\\r\\n    /// @param executed If the request was executed.\\r\\n    struct Request {\\r\\n        bool accepted;\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice A container for a request to cancel the task.\\r\\n    /// @param request Request information.\\r\\n    /// @param explanation Why the task should be cancelled.\\r\\n    struct CancelTaskRequest {\\r\\n        Request request;\\r\\n        string explanation;\\r\\n    }\\r\\n\\r\\n    enum TaskState { Open, Taken, Closed }\\r\\n    /// @notice A container for task-related information.\\r\\n    /// @param metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param manager Who has created the task.\\r\\n    /// @param state Current state the task is in.\\r\\n    /// @param applications Applications to take the job.\\r\\n    /// @param executorApplication Index of the application that will execture the task.\\r\\n    /// @param submissions Submission made to finish the task.\\r\\n    /// @dev Storage blocks seperated by newlines.\\r\\n    struct Task {\\r\\n        string metadata;\\r\\n\\r\\n        uint64 deadline;\\r\\n        Escrow escrow;\\r\\n\\r\\n        address creator;\\r\\n\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        /// @notice To prevent redundant storage, used an id heres\\r\\n        uint16 executorApplication;\\r\\n        uint8 budgetCount;\\r\\n        uint16 applicationCount;\\r\\n        uint8 submissionCount;\\r\\n        uint8 cancelTaskRequestCount;\\r\\n\\r\\n        mapping(uint8 => ERC20Transfer) budget;\\r\\n        mapping(uint16 => Application) applications;\\r\\n        mapping(uint8 => Submission) submissions;\\r\\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    struct OffChainTask {\\r\\n        string metadata;\\r\\n        uint64 deadline;\\r\\n        uint16 executorApplication;\\r\\n        address creator;\\r\\n        address manager;\\r\\n        TaskState state;\\r\\n        Escrow escrow;\\r\\n        ERC20Transfer[] budget;\\r\\n        OffChainApplication[] applications;\\r\\n        Submission[] submissions;\\r\\n        CancelTaskRequest[] cancelTaskRequests;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the current amount of created tasks.\\r\\n    function taskCount() external view returns (uint256);\\r\\n    \\r\\n    /// @notice Retrieves the current statistics of created tasks.\\r\\n    function taskStatistics() external view returns (uint256 openTasks, uint256 takenTasks, uint256 successfulTasks);\\r\\n\\r\\n    /// @notice Retrieves all task information by id.\\r\\n    /// @param _taskId Id of the task.\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) external view returns (OffChainTask memory);\\r\\n    \\r\\n    /// @notice Retrieves multiple tasks.\\r\\n    /// @param _taskIds Ids of the tasks.\\r\\n    function getTasks(\\r\\n        uint256[] calldata _taskIds\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of a manager. Most recent ones first.\\r\\n    /// @param _manager The manager to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getManagingTasks(\\r\\n        address _manager,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n    \\r\\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\\r\\n    /// @param _executor The executor to fetch tasks of.\\r\\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\\r\\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory);\\r\\n\\r\\n    /// @notice Create a new task.\\r\\n    /// @param _metadata Metadata of the task. (IPFS hash)\\r\\n    /// @param _deadline Block timestamp at which the task expires if not completed.\\r\\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\\r\\n    /// @param _manager Who will manage the task (become the manager).\\r\\n    /// @return taskId Id of the newly created task.\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId);\\r\\n    \\r\\n    /// @notice Apply to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of your application.\\r\\n    /// @param _reward Wanted rewards for completing the task.\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId);\\r\\n    \\r\\n    /// @notice Accept application to allow them to take the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationIds Indexes of the applications to accept.\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Take the task after your application has been accepted.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _applicationId Index of application you made that has been accepted.\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _applicationId\\r\\n    ) external;\\r\\n    \\r\\n    /// @notice Create a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _metadata Metadata of the submission. (IPFS hash)\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId);\\r\\n    \\r\\n    /// @notice Review a submission.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _submissionId Index of the submission that is reviewed.\\r\\n    /// @param _judgement Outcome of the review.\\r\\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId);\\r\\n\\r\\n    /// @notice Accepts a request, executing the proposed action.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    /// @param _execute If the request should also be executed in this transaction.\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _requestType What kind of request it is.\\r\\n    /// @param _requestId Id of the request.\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Extend the deadline of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _extension How much to extend the deadline by.\\r\\n    function extendDeadline(\\r\\n        uint256 _taskId,\\r\\n        uint64 _extension\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Increase the budget of the task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _increase How much to increase each tokens amount by.\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Edit the metadata of a task.\\r\\n    /// @param _taskId Id of the task.\\r\\n    /// @param _newMetadata New metadata of the task.\\r\\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x5e22a76c1ce938028152ccc71ba6e654970753a6aedc1082d52501410c74b17d\",\"license\":\"None\"},\"contracts/Tasks/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITasks, IERC20, Escrow } from \\\"./ITasks.sol\\\";\\r\\nimport { TasksEnsure } from \\\"./TasksEnsure.sol\\\";\\r\\nimport { TasksUtils } from \\\"./TasksUtils.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\n\\r\\ncontract Tasks is Context, TasksEnsure, TasksUtils {\\r\\n    /// @notice The incremental ID for tasks.\\r\\n    uint256 private taskCounter;\\r\\n\\r\\n    /// @notice Various statistics about total tasks.\\r\\n    uint256 private openTasks;\\r\\n    uint256 private takenTasks;\\r\\n    uint256 private successfulTasks;\\r\\n\\r\\n    /// @notice A mapping between task IDs and task information.\\r\\n    mapping(uint256 => Task) internal tasks;\\r\\n\\r\\n    /// @notice The base escrow contract that will be cloned for every task.\\r\\n    address private escrowImplementation;\\r\\n\\r\\n    /// @notice This address has the power to disable the contract, in case an exploit is discovered.\\r\\n    address private disabler;\\r\\n    error Disabled();\\r\\n    error NotDisabled();\\r\\n    error NotDisabler();\\r\\n\\r\\n    constructor() {\\r\\n        escrowImplementation = address(new Escrow());\\r\\n        disabler = _msgSender();\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function taskCount() external view returns (uint256) {\\r\\n        return taskCounter;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function taskStatistics() external view returns (uint256 open, uint256 taken, uint256 successful) {\\r\\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTask(\\r\\n        uint256 _taskId\\r\\n    ) public view returns (OffChainTask memory offchainTask) {\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        offchainTask = _toOffchainTask(task);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function getTasks(\\r\\n        uint256[] memory _taskIds\\r\\n    ) public view returns (OffChainTask[] memory) {\\r\\n        OffChainTask[] memory offchainTasks = new OffChainTask[](_taskIds.length);\\r\\n        for (uint i; i < _taskIds.length; ) {\\r\\n            offchainTasks[i] = getTask(_taskIds[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return offchainTasks;\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getManagingTasks(\\r\\n        address _manager,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 managerTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\\r\\n            if (tasks[i].manager == _manager) {\\r\\n                taskIndexes[managerTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++managerTasksCount;\\r\\n                }\\r\\n                if (managerTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, managerTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function getExecutingTasks(\\r\\n        address _executor,\\r\\n        uint256 _fromTaskId,\\r\\n        uint256 _max\\r\\n    ) external view returns (OffChainTask[] memory) {\\r\\n        uint256 totalTasks = taskCounter;\\r\\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\\r\\n        uint256 executorTasksCount;\\r\\n        if (_fromTaskId == 0) {\\r\\n            _fromTaskId = totalTasks - 1;\\r\\n        }\\r\\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\\r\\n            if (tasks[i].state != TaskState.Open && tasks[i].applications[tasks[i].executorApplication].applicant == _executor) {\\r\\n                taskIndexes[executorTasksCount] = i;\\r\\n                unchecked {\\r\\n                    ++executorTasksCount;\\r\\n                }\\r\\n                if (executorTasksCount == _max) {\\r\\n                    // _max == 0 never triggering is on purpose\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                --i;\\r\\n            }\\r\\n        }\\r\\n        // decrease length of array to match real entries\\r\\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))) }\\r\\n        return getTasks(taskIndexes);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function createTask(\\r\\n        string calldata _metadata,\\r\\n        uint64 _deadline,\\r\\n        ERC20Transfer[] calldata _budget,\\r\\n        address _manager,\\r\\n        PreapprovedApplication[] calldata _preapprove\\r\\n    ) external returns (uint256 taskId) {\\r\\n        _ensureNotDisabled();\\r\\n        taskId = taskCounter++;\\r\\n\\r\\n        Task storage task = tasks[taskId];\\r\\n        task.metadata = _metadata;\\r\\n        task.deadline = _deadline;\\r\\n        task.budgetCount = uint8(_budget.length);\\r\\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\\r\\n        escrow.__Escrow_init();\\r\\n        task.escrow = escrow;\\r\\n        for (uint8 i; i < uint8(_budget.length); ) {\\r\\n            _budget[i].tokenContract.transferFrom(_msgSender(), address(escrow), _budget[i].amount);\\r\\n            task.budget[i] = _budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        task.manager = _manager;\\r\\n        task.creator = _msgSender();\\r\\n\\r\\n        // Default values are already correct (save gas)\\r\\n        // task.state = TaskState.Open;\\r\\n        unchecked {\\r\\n            // Impossible to overflow due to openTasks <= taskCounter\\r\\n            ++openTasks;\\r\\n        }\\r\\n\\r\\n        // Gas optimization\\r\\n        if (_preapprove.length > 0) {\\r\\n            task.applicationCount = uint16(_preapprove.length);\\r\\n            for (uint16 i; i < uint16(_preapprove.length); ) {\\r\\n                Application storage application = task.applications[i];\\r\\n                application.applicant = _preapprove[i].applicant;\\r\\n                application.accepted = true;\\r\\n                _ensureRewardEndsWithNextToken(_preapprove[i].reward);\\r\\n                _setRewardBellowBudget(task, application, _preapprove[i].reward);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit TaskCreated(taskId, _metadata, _deadline, _budget, _msgSender(), _manager, _preapprove);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function applyForTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata,\\r\\n        Reward[] calldata _reward\\r\\n    ) external returns (uint16 applicationId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureRewardEndsWithNextToken(_reward);\\r\\n\\r\\n        Application storage application = task.applications[task.applicationCount];\\r\\n        application.metadata = _metadata;\\r\\n        application.applicant = _msgSender();\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            application.reward[i] = _reward[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        applicationId = task.applicationCount++;\\r\\n\\r\\n        emit ApplicationCreated(_taskId, applicationId, _metadata, _reward, task.manager, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptApplications(\\r\\n        uint256 _taskId,\\r\\n        uint16[] calldata _applicationIds\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        for (uint i; i < _applicationIds.length; ) {\\r\\n            _ensureApplicationExists(task, _applicationIds[i]);\\r\\n            \\r\\n            Application storage application = task.applications[_applicationIds[i]];\\r\\n            application.accepted = true;\\r\\n            _increaseBudgetToReward(task, application.rewardCount, application.reward);\\r\\n            emit ApplicationAccepted(_taskId, _applicationIds[i], _msgSender(), application.applicant);\\r\\n            \\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function takeTask(\\r\\n        uint256 _taskId,\\r\\n        uint16 _applicationId\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsOpen(task);\\r\\n        _ensureApplicationExists(task, _applicationId);\\r\\n\\r\\n        Application storage application = task.applications[_applicationId];\\r\\n        _ensureSenderIsApplicant(application);\\r\\n        _ensureApplicationIsAccepted(application);\\r\\n\\r\\n        task.executorApplication = _applicationId;\\r\\n\\r\\n        unchecked {\\r\\n            --openTasks;\\r\\n            ++takenTasks;\\r\\n        }\\r\\n        task.state = TaskState.Taken;\\r\\n\\r\\n        emit TaskTaken(_taskId, _applicationId, task.manager, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function createSubmission(\\r\\n        uint256 _taskId,\\r\\n        string calldata _metadata\\r\\n    ) external returns (uint8 submissionId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n\\r\\n        Submission storage submission = task.submissions[task.submissionCount];\\r\\n        submission.metadata = _metadata;\\r\\n        submissionId = task.submissionCount++;\\r\\n\\r\\n        emit SubmissionCreated(_taskId, submissionId, _metadata, task.manager, _msgSender());\\r\\n    }\\r\\n    \\r\\n    /// @inheritdoc ITasks\\r\\n    function reviewSubmission(\\r\\n        uint256 _taskId,\\r\\n        uint8 _submissionId,\\r\\n        SubmissionJudgement _judgement,\\r\\n        string calldata _feedback\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsManager(task);\\r\\n        _ensureSubmissionExists(task, _submissionId);\\r\\n\\r\\n        Submission storage submission = task.submissions[_submissionId];\\r\\n        _ensureSubmissionNotJudged(submission);\\r\\n        submission.judgement = _judgement;\\r\\n        submission.feedback = _feedback;\\r\\n\\r\\n        if (_judgement == SubmissionJudgement.Accepted) {\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n                ++successfulTasks;\\r\\n            }\\r\\n            _payoutTask(task);\\r\\n\\r\\n            emit TaskCompleted(_taskId, _msgSender(), task.applications[task.executorApplication].applicant);\\r\\n        }\\r\\n\\r\\n        emit SubmissionReviewed(_taskId, _submissionId, _judgement, _feedback, _msgSender(), task.applications[task.executorApplication].applicant);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function cancelTask(\\r\\n        uint256 _taskId,\\r\\n        string calldata _explanation\\r\\n    ) external returns (uint8 cancelTaskRequestId) {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        if (task.state == TaskState.Open || task.deadline <= uint64(block.timestamp)) {\\r\\n            // Task is open or deadline past\\r\\n            if (task.state == TaskState.Open) {\\r\\n                unchecked {\\r\\n                    --openTasks;\\r\\n                }\\r\\n            } else { // if (task.state == TaskState.Taken) {\\r\\n                unchecked {\\r\\n                    --takenTasks;\\r\\n                }\\r\\n            }\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(_taskId, _msgSender(), task.state == TaskState.Open ? address(0) : task.applications[task.executorApplication].applicant);\\r\\n            // Max means no request\\r\\n            cancelTaskRequestId = type(uint8).max;\\r\\n        }\\r\\n        else {\\r\\n            // Task is taken and deadline has not past\\r\\n            CancelTaskRequest storage request = task.cancelTaskRequests[task.cancelTaskRequestCount];\\r\\n            request.explanation = _explanation;\\r\\n            cancelTaskRequestId = task.cancelTaskRequestCount++;\\r\\n\\r\\n            emit CancelTaskRequested(_taskId, cancelTaskRequestId, _explanation, _msgSender(), task.applications[task.executorApplication].applicant);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function acceptRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId,\\r\\n        bool _execute\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        _ensureSenderIsExecutor(task);\\r\\n        \\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n            \\r\\n            CancelTaskRequest storage cancelTaskRequest = task.cancelTaskRequests[_requestId];\\r\\n            _ensureRequestNotAccepted(cancelTaskRequest.request);\\r\\n\\r\\n            if (_execute) {\\r\\n                // use executeRequest in the body instead? (more gas due to all the checks, but less code duplication)\\r\\n                unchecked {\\r\\n                    --takenTasks;\\r\\n                }\\r\\n                _refundCreator(task);\\r\\n\\r\\n                emit TaskCancelled(_taskId, task.manager, _msgSender());\\r\\n                cancelTaskRequest.request.executed = true;\\r\\n            }\\r\\n\\r\\n            cancelTaskRequest.request.accepted = true;\\r\\n        }\\r\\n\\r\\n        emit RequestAccepted(_taskId, _requestType, _requestId, task.manager, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function executeRequest(\\r\\n        uint256 _taskId,\\r\\n        RequestType _requestType,\\r\\n        uint8 _requestId\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskIsTaken(task);\\r\\n        \\r\\n        //if (_requestType == RequestType.CancelTask) {\\r\\n        {\\r\\n            _ensureCancelTaskRequestExists(task, _requestId);\\r\\n            \\r\\n            CancelTaskRequest storage cancelTaskRequest = task.cancelTaskRequests[_requestId];\\r\\n            _ensureRequestAccepted(cancelTaskRequest.request);\\r\\n            _ensureRequestNotExecuted(cancelTaskRequest.request);\\r\\n\\r\\n            unchecked {\\r\\n                --takenTasks;\\r\\n            }\\r\\n            _refundCreator(task);\\r\\n\\r\\n            emit TaskCancelled(_taskId, task.manager, task.applications[task.executorApplication].applicant);\\r\\n            cancelTaskRequest.request.executed = true;\\r\\n        }\\r\\n\\r\\n        emit RequestExecuted(_taskId, _requestType, _requestId, _msgSender(), task.manager, task.applications[task.executorApplication].applicant);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function extendDeadline(\\r\\n        uint256 _taskId,\\r\\n        uint64 _extension\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskNotClosed(task);\\r\\n\\r\\n        task.deadline += _extension;\\r\\n\\r\\n        emit DeadlineExtended(_taskId, _extension, _msgSender(), task.state == TaskState.Open ? address(0) : task.applications[task.executorApplication].applicant);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function increaseBudget(\\r\\n        uint256 _taskId,\\r\\n        uint96[] calldata _increase\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        for (uint8 i; i < uint8(_increase.length); ) {\\r\\n            ERC20Transfer storage transfer = task.budget[i];\\r\\n            transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), _increase[i]);\\r\\n            transfer.amount += _increase[i];\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit BudgetIncreased(_taskId, _increase, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITasks\\r\\n    function editMetadata(\\r\\n        uint256 _taskId,\\r\\n        string calldata _newMetadata\\r\\n    ) external {\\r\\n        _ensureNotDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureSenderIsManager(task);\\r\\n\\r\\n        _ensureTaskIsOpen(task);\\r\\n\\r\\n        task.metadata = _newMetadata;\\r\\n        emit MetadataEditted(_taskId, _newMetadata, _msgSender());\\r\\n    }\\r\\n    \\r\\n    function disable() external {\\r\\n        _ensureDisabler();\\r\\n        disabler = address(0);\\r\\n    }\\r\\n\\r\\n    // Ideally you are able to transfer it to the new contract, but that requires addition to the escrow contract\\r\\n    // I prefer this, so the escrow contract keeps being basic (both for security and clone costs)\\r\\n    function refund(uint256 _taskId) external {\\r\\n        _ensureDisabled();\\r\\n        Task storage task = _getTask(_taskId);\\r\\n        _ensureTaskNotClosed(task);\\r\\n        // oficially should update taskOpen / Taken here, but as the contract will cease operations, no point\\r\\n        _refundCreator(task);\\r\\n    }\\r\\n\\r\\n    function _getTask(uint256 _taskId) internal view returns (Task storage task) {\\r\\n        if (_taskId >= taskCounter) {\\r\\n            revert TaskDoesNotExist();\\r\\n        }\\r\\n\\r\\n        task = tasks[_taskId];\\r\\n    }\\r\\n\\r\\n    function _ensureNotDisabled() internal view {\\r\\n        if (disabler == address(0)) {\\r\\n            revert Disabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabled() internal view {\\r\\n        if (disabler != address(0)) {\\r\\n            revert NotDisabled();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureDisabler() internal view {\\r\\n        if (_msgSender() != disabler) {\\r\\n            revert NotDisabler();\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0c3ca6c4ac30df0fc251021b0936738f40b92c05af1438dd0dca568171137fa0\",\"license\":\"None\"},\"contracts/Tasks/TasksEnsure.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITasks, Escrow } from \\\"./ITasks.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n  Functions to ensure a certain precondition is met.\\r\\n*/\\r\\nabstract contract TasksEnsure is ITasks, Context {\\r\\n    function _ensureTaskIsOpen(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Open) {\\r\\n            revert TaskNotOpen();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskIsTaken(Task storage task) internal view {\\r\\n        if (task.state != TaskState.Taken) {\\r\\n            revert TaskNotTaken();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureTaskNotClosed(Task storage task) internal view {\\r\\n        if (task.state == TaskState.Closed) {\\r\\n            revert TaskClosed();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _ensureSenderIsManager(Task storage task) internal view {\\r\\n        if (task.manager != _msgSender()) {\\r\\n            revert NotManager();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationExists(Task storage task, uint16 _applicationId) internal view {\\r\\n        if (_applicationId >= task.applicationCount) {\\r\\n            revert ApplicationDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionExists(Task storage task, uint8 _submissionId) internal view {\\r\\n        if (_submissionId >= task.submissionCount) {\\r\\n            revert SubmissionDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSenderIsApplicant(Application storage application) internal view {\\r\\n        if (application.applicant != _msgSender()) {\\r\\n            revert NotYourApplication();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureApplicationIsAccepted(Application storage application) internal view {\\r\\n        if (!application.accepted) {\\r\\n            revert ApplicationNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureSubmissionNotJudged(Submission storage submission) internal view {\\r\\n        if (submission.judgement != SubmissionJudgement.None) {\\r\\n            revert SubmissionAlreadyJudged();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev Should only be called is the task is not open!\\r\\n    function _ensureSenderIsExecutor(Task storage task) internal view {\\r\\n        if (task.applications[task.executorApplication].applicant != _msgSender()) {\\r\\n            revert NotExecutor();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureCancelTaskRequestExists(Task storage task, uint8 _requestId) internal view {\\r\\n        if (_requestId >= task.cancelTaskRequestCount) {\\r\\n            revert RequestDoesNotExist();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotAccepted(Request storage request) internal view {\\r\\n        if (request.accepted) {\\r\\n            revert RequestAlreadyAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestAccepted(Request storage request) internal view {\\r\\n        if (!request.accepted) {\\r\\n            revert RequestNotAccepted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRequestNotExecuted(Request storage request) internal view {\\r\\n        if (request.executed) {\\r\\n            revert RequestAlreadyExecuted();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _ensureRewardEndsWithNextToken(Reward[] memory reward) internal pure {\\r\\n        unchecked {\\r\\n            if (reward.length != 0 && !reward[reward.length-1].nextToken) {\\r\\n                revert RewardDoesntEndWithNewToken();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb1c0aaf1383a95687103919a1d63902ebba0c7ec478c361e0a27b0553e946cdc\",\"license\":\"None\"},\"contracts/Tasks/TasksUtils.sol\":{\"content\":\"// SPDX-License-Identifier: None\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { ITasks, Escrow } from \\\"./ITasks.sol\\\";\\r\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/*\\r\\n  Higher level functions to allow the Tasks file to be more readable.\\r\\n*/\\r\\nabstract contract TasksUtils is ITasks, Context {\\r\\n    function _toOffchainTask(Task storage task) internal view returns (OffChainTask memory offchainTask) {\\r\\n        offchainTask.metadata = task.metadata;\\r\\n        offchainTask.deadline = task.deadline;\\r\\n        offchainTask.executorApplication = task.executorApplication;\\r\\n        offchainTask.creator = task.creator;\\r\\n        offchainTask.manager = task.manager;\\r\\n        offchainTask.state = task.state;\\r\\n        offchainTask.escrow = task.escrow;\\r\\n\\r\\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\\r\\n        for (uint8 i; i < offchainTask.budget.length; ) {\\r\\n            offchainTask.budget[i] = task.budget[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        offchainTask.applications = new OffChainApplication[](task.applicationCount);\\r\\n        for (uint8 i; i < offchainTask.applications.length; ) {\\r\\n            Application storage application = task.applications[i];\\r\\n            offchainTask.applications[i].metadata = application.metadata;\\r\\n            offchainTask.applications[i].applicant = application.applicant;\\r\\n            offchainTask.applications[i].accepted = application.accepted;\\r\\n            offchainTask.applications[i].reward = new Reward[](application.rewardCount);\\r\\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\\r\\n                offchainTask.applications[i].reward[j] = application.reward[j];\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.submissions = new Submission[](task.submissionCount);\\r\\n        for (uint8 i; i < offchainTask.submissions.length; ) {\\r\\n            offchainTask.submissions[i] = task.submissions[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](task.cancelTaskRequestCount);\\r\\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\\r\\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _increaseBudgetToReward(\\r\\n        Task storage task,\\r\\n        uint8 _length,\\r\\n        mapping(uint8 => Reward) storage _reward\\r\\n    ) internal {\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 needed;\\r\\n        for (uint8 i; i < _length; ) {\\r\\n            unchecked {\\r\\n                needed += _reward[i].amount;\\r\\n            }\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                if (needed > erc20Transfer.amount) {\\r\\n                    // Existing budget in escrow doesnt cover the needed reward\\r\\n                    erc20Transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), needed - erc20Transfer.amount);\\r\\n                    task.budget[j].amount = uint96(needed);\\r\\n                }\\r\\n\\r\\n                needed = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setRewardBellowBudget(\\r\\n        Task storage task,\\r\\n        Application storage application, \\r\\n        Reward[] calldata _reward\\r\\n    ) internal {\\r\\n        application.rewardCount = uint8(_reward.length);\\r\\n\\r\\n        uint8 j;\\r\\n        ERC20Transfer memory erc20Transfer = task.budget[0];\\r\\n        uint256 alreadyReserved;\\r\\n        for (uint8 i; i < uint8(_reward.length); ) {\\r\\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\\r\\n            unchecked {\\r\\n                alreadyReserved += _reward[i].amount;\\r\\n            }\\r\\n            if (alreadyReserved > erc20Transfer.amount) {\\r\\n                revert RewardAboveBudget();\\r\\n            }\\r\\n\\r\\n            application.reward[i] = _reward[i];\\r\\n\\r\\n            if (_reward[i].nextToken) {\\r\\n                alreadyReserved = 0;\\r\\n                unchecked {\\r\\n                    erc20Transfer = task.budget[++j];\\r\\n                }\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _payoutTask(Task storage task) internal {\\r\\n        Application storage executor = task.applications[task.executorApplication];\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n\\r\\n        uint8 j;\\r\\n        uint8 rewardCount = executor.rewardCount;\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            while (j < rewardCount) {\\r\\n                Reward memory reward = executor.reward[j];\\r\\n                escrow.transfer(erc20Transfer.tokenContract, reward.to, reward.amount);\\r\\n                unchecked {\\r\\n                    erc20Transfer.amount -= reward.amount;\\r\\n                    ++j;\\r\\n                }\\r\\n\\r\\n                if (reward.nextToken) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            escrow.transfer(erc20Transfer.tokenContract, creator, erc20Transfer.amount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n    \\r\\n    function _refundCreator(Task storage task) internal {\\r\\n        uint8 budgetCount = task.budgetCount;\\r\\n        address creator = task.creator;\\r\\n        Escrow escrow = task.escrow;\\r\\n        for (uint8 i; i < budgetCount; ) {\\r\\n            ERC20Transfer memory erc20Transfer = task.budget[i];\\r\\n            escrow.transfer(erc20Transfer.tokenContract, creator, erc20Transfer.amount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        task.state = TaskState.Closed;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x95df6a078d56ad5bca8a40a81721d2cb0a0b7b70ba7ba4fb0307cfc125b0124c\",\"license\":\"None\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000020906200008c565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055620000663390565b600680546001600160a01b0319166001600160a01b03929092169190911790556200009a565b6102a9806200545083390190565b6153a680620000aa6000396000f3fe608060405234801561001057600080fd5b506004361061016b5760003560e01c806377b98419116100cd578063b685504b11610081578063b795282911610066578063b795282914610306578063c5f9027b14610319578063ecb8adae1461032c57600080fd5b8063b685504b146102eb578063b6cb58a5146102fe57600080fd5b806391a29225116100b257806391a2922514610292578063978a2b53146102a5578063a5e99c4e146102c657600080fd5b806377b984191461026c57806383219a8a1461027f57600080fd5b80633f74d41d116101245780635ac1d773116101095780635ac1d7731461022257806362ffbb201461024657806376645a931461025957600080fd5b80633f74d41d146101dc57806352a63d49146101fc57600080fd5b8063278ecde111610155578063278ecde1146101ae5780632f2770db146101c15780633f561a40146101c957600080fd5b8062f9467d146101705780631d65e77e14610185575b600080fd5b61018361017e366004613d22565b61033f565b005b610198610193366004613d71565b6104d7565b6040516101a59190614243565b60405180910390f35b6101836101bc366004613d71565b610567565b610183610592565b6101836101d73660046142a2565b6105c4565b6101ef6101ea36600461431b565b610771565b6040516101a59190614350565b61020f61020a366004614412565b61091a565b60405161ffff90911681526020016101a5565b600154600254600354604080519384526020840192909252908201526060016101a5565b6101836102543660046142a2565b610b44565b6101ef610267366004614537565b610d8a565b61018361027a3660046145dd565b610ea9565b61018361028d366004614652565b6110a5565b6101836102a0366004614691565b61110d565b6102b86102b33660046146e5565b6112cb565b6040519081526020016101a5565b6102d96102d4366004614652565b61185e565b60405160ff90911681526020016101a5565b6101836102f93660046147e4565b61198a565b6000546102b8565b6101ef61031436600461431b565b611aee565b610183610327366004614810565b611c01565b6102d961033a366004614652565b611d6a565b61034761208e565b6000610352856120df565b905061035d8161212d565b6103668161219a565b610370818461221f565b60ff83166000908152600782016020526040902061038d81612282565b821561044557600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190556103c4826122be565b60038201546040805173ffffffffffffffffffffffffffffffffffffffff9092168252336020830152805188927f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e7292908290030190a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001781555b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600381015485907f22c8636df8a0387ea92695f6534f3a1dccaa44ba42e7627c4d205e078dbbbe04908690869073ffffffffffffffffffffffffffffffffffffffff166104b83390565b6040516104c89493929190614843565b60405180910390a25050505050565b61054a604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b6000610555836120df565b905061056081612459565b9392505050565b61056f612f74565b600061057a826120df565b905061058581612fc4565b61058e816122be565b5050565b61059a61302e565b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6105cc61208e565b60006105d7846120df565b90506105e281613095565b6105eb816130ff565b60005b8281101561076a576106268285858481811061060c5761060c614886565b905060200201602081019061062191906148b5565b613152565b600082600501600086868581811061064057610640614886565b905060200201602081019061065591906148b5565b61ffff16815260208101919091526040016000206001810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017908190559091506106da9084907501000000000000000000000000000000000000000000900460ff16600284016131b3565b857f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f86868581811061070e5761070e614886565b905060200201602081019061072391906148b5565b60018401546040805161ffff93909316835233602084015273ffffffffffffffffffffffffffffffffffffffff90911682820152519081900360600190a2506001016105ee565b5050505050565b600080546060918167ffffffffffffffff811115610791576107916144b9565b6040519080825280602002602001820160405280156107ba578160200160208202803683370190505b5090506000856000036107d5576107d26001846148ff565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd576000808281526004602052604090206003015474010000000000000000000000000000000000000000900460ff16600281111561083d5761083d613dee565b141580156108a35750600081815260046020908152604080832060038101547501000000000000000000000000000000000000000000900461ffff16845260050190915290206001015473ffffffffffffffffffffffffffffffffffffffff8981169116145b156108d657808383815181106108bb576108bb614886565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016107d7565b50808303825103825261090f82610d8a565b979650505050505050565b600061092461208e565b600061092f876120df565b905061093a81613095565b6109958484808060200260200160405190810160405280939291908181526020016000905b8282101561098b5761097c60608302860136819003810190614931565b8152602001906001019061095f565b505050505061345d565b60038101547801000000000000000000000000000000000000000000000000900461ffff1660009081526005820160205260409020806109d6878983614a3f565b5060018101805460ff86167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ff0000000000000000000000000000000000000000909116331717905560005b60ff8086169082161015610a7c5785858260ff16818110610a4857610a48614886565b60ff841660009081526002860160205260409020606090910292909201919050610a728282614b59565b5050600101610a25565b506003820180547801000000000000000000000000000000000000000000000000900461ffff16906018610aaf83614c0a565b91906101000a81548161ffff021916908361ffff1602179055509250877f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d84898989898860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b1e3390565b604051610b319796959493929190614cf5565b60405180910390a2505095945050505050565b610b4c61208e565b6000610b57846120df565b9050610b62816130ff565b610b6b81613095565b60005b60ff8084169082161015610d475760ff811660009081526004830160205260409020805473ffffffffffffffffffffffffffffffffffffffff166323b872dd33600186015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16888860ff8816818110610bea57610bea614886565b9050602002016020810190610bff9190614d75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190614d92565b5084848360ff16818110610cc057610cc0614886565b9050602002016020810190610cd59190614d75565b81548290601490610d0d9084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16614daf565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081600101915050610b6e565b50837ffd28ab2ce625e634dd4caa0b1632ca64ed46e19b4ddd416693af49ad5e696d62848433604051610d7c93929190614dd4565b60405180910390a250505050565b60606000825167ffffffffffffffff811115610da857610da86144b9565b604051908082528060200260200182016040528015610e4c57816020015b610e39604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081610dc65790505b50905060005b8351811015610ea257610e7d848281518110610e7057610e70614886565b60200260200101516104d7565b828281518110610e8f57610e8f614886565b6020908102919091010152600101610e52565b5092915050565b610eb161208e565b6000610ebc866120df565b9050610ec78161212d565b610ed0816130ff565b610eda81866134c3565b60ff851660009081526006820160205260409020610ef781613525565b848160020160006101000a81548160ff02191690836002811115610f1d57610f1d613dee565b021790555060018101610f31848683614a3f565b506001856002811115610f4657610f46613dee565b0361100e57600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055600380546001019055610f8582613577565b867f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d963360038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff94851681529316908301520160405180910390a25b867f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a9303878787873360038901547501000000000000000000000000000000000000000000900461ffff16600090815260058a0160205260409081902060010154905161109496959493929173ffffffffffffffffffffffffffffffffffffffff1690614e46565b60405180910390a250505050505050565b6110ad61208e565b60006110b8846120df565b90506110c3816130ff565b6110cc81613095565b806110d8838583614a3f565b50837f967dad14c5f736d50ac946b958b80007717809320b4864c86cd29b0898fad807848433604051610d7c93929190614ea2565b61111561208e565b6000611120846120df565b905061112b8161212d565b611135818361221f565b60ff821660009081526007820160205260409020611152816138c9565b61115b81613904565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905561118c826122be565b60038201547501000000000000000000000000000000000000000000810461ffff16600090815260058401602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff948516815293169083015286917f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72910160405180910390a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055837fa20926c2163603eba714f9531625851214f394b2984a5038f03c478b73b0458a848461126a3390565b600386015461ffff7501000000000000000000000000000000000000000000820416600090815260058801602052604090819020600101549051610d7c9594939273ffffffffffffffffffffffffffffffffffffffff908116921690614edc565b60006112d561208e565b6000805490806112e483614f28565b909155506000818152600460205260409020909150806113058a8c83614a3f565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a161790556003810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8916021790556005546000906113aa9073ffffffffffffffffffffffffffffffffffffffff16613945565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113f457600080fd5b505af1158015611408573d6000803e3d6000fd5b505050506001820180547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff84160217905560005b60ff80891690821610156115d35788888260ff1681811061147f5761147f614886565b6114959260206040909202019081019150614f60565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff168181106114c7576114c7614886565b90506040020160200160208101906114df9190614d75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a9190614d92565b5088888260ff168181106115a0576115a0614886565b60ff84166000908152600487016020526040908190209102929092019190506115c98282614f7d565b505060010161145c565b5060038201805473ffffffffffffffffffffffffffffffffffffffff88167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556002830180549091163317905560018054810190558315611808576003820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff80861690821610156118065761ffff81166000818152600585016020526040902090879087908181106116ba576116ba614886565b90506020028101906116cc9190614fe2565b6116da906020810190614f60565b6001820180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117740100000000000000000000000000000000000000001790556117bd878761ffff851681811061175157611751614886565b90506020028101906117639190614fe2565b611771906020810190615020565b808060200260200160405190810160405280939291908181526020016000905b8282101561098b576117ae60608302860136819003810190614931565b81526020019060010190611791565b6117fd848289898661ffff168181106117d8576117d8614886565b90506020028101906117ea9190614fe2565b6117f8906020810190615020565b613a11565b50600101611682565b505b827f789e3fb3404e145b30be9137359b893e98ac76bcf68e2acfc3ac8c94edf059828c8c8c8c8c338d8d8d604051611848999897969594939291906151b4565b60405180910390a2505098975050505050505050565b600061186861208e565b6000611873856120df565b905061187e8161212d565b6118878161219a565b60038101547a010000000000000000000000000000000000000000000000000000900460ff1660009081526006820160205260409020806118c9858783614a3f565b506003820180547a010000000000000000000000000000000000000000000000000000900460ff1690601a6118fd836152aa565b91906101000a81548160ff021916908360ff1602179055509250857febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d1287128487878660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166119683390565b6040516119799594939291906152c9565b60405180910390a250509392505050565b61199261208e565b600061199d836120df565b90506119a881613095565b6119b28183613152565b61ffff8216600090815260058201602052604090206119d081613c4b565b6119d981613c9e565b6003820180547fffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000061ffff8616908102919091178255600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01815560028054909101905581547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000179092556040805191825273ffffffffffffffffffffffffffffffffffffffff9092166020820152339181019190915284907f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de190606001610d7c565b600080546060918167ffffffffffffffff811115611b0e57611b0e6144b9565b604051908082528060200260200182016040528015611b37578160200160208202803683370190505b509050600085600003611b5257611b4f6001846148ff565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd5760008181526004602052604090206003015473ffffffffffffffffffffffffffffffffffffffff808a16911603611bda5780838381518110611bbf57611bbf614886565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611b54565b611c0961208e565b6000611c14836120df565b9050611c1f816130ff565b611c2881612fc4565b600181018054839190600090611c4990849067ffffffffffffffff16615315565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f3d9ee6a0fdedaee94f1c3631bf046c61c58704428408ca72e3e7ffa046884a6883611c993390565b6000600386015474010000000000000000000000000000000000000000900460ff166002811115611ccc57611ccc613dee565b14611d225760038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16611d25565b60005b6040805167ffffffffffffffff909416845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a2505050565b6000611d7461208e565b6000611d7f856120df565b9050611d8a816130ff565b611d9381612fc4565b6000600382015474010000000000000000000000000000000000000000900460ff166002811115611dc657611dc6613dee565b1480611de35750600181015467ffffffffffffffff428116911611155b15611f67576000600382015474010000000000000000000000000000000000000000900460ff166002811115611e1b57611e1b613dee565b03611e4d57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055611e76565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b611e7f816122be565b847f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72336000600385015474010000000000000000000000000000000000000000900460ff166002811115611ed557611ed5613dee565b14611f2b5760038401547501000000000000000000000000000000000000000000900461ffff16600090815260058501602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16611f2e565b60005b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520160405180910390a260ff9150612086565b60038101547b01000000000000000000000000000000000000000000000000000000900460ff166000908152600782016020526040902060018101611fad858783614a3f565b506003820180547b01000000000000000000000000000000000000000000000000000000900460ff1690601b611fe2836152aa565b91906101000a81548160ff021916908360ff1602179055509250857f8beb4b470a422a5a51289e17afad55bb1f5692ed0b2ad0d71779119481d389928487876120283390565b60038801547501000000000000000000000000000000000000000000900461ffff16600090815260058901602052604090819020600101549051611979959493929173ffffffffffffffffffffffffffffffffffffffff16906152c9565b509392505050565b60065473ffffffffffffffffffffffffffffffffffffffff166120dd576040517f75884cda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008054821061211b576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600090815260046020526040902090565b6001600382015474010000000000000000000000000000000000000000900460ff16600281111561216057612160613dee565b14612197576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600381015461ffff750100000000000000000000000000000000000000000090910416600090815260058201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff163314612197576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7b0100000000000000000000000000000000000000000000000000000090910481169082161061058e576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff1615612197576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154600282015460018301547701000000000000000000000000000000000000000000000090920460ff169173ffffffffffffffffffffffffffffffffffffffff91821691680100000000000000009091041660005b8360ff168160ff1610156124135760ff811660009081526004868101602090815260409283902083518085018552905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905294517fbeabacc800000000000000000000000000000000000000000000000000000000815293840152868416602484015260448301919091529184169063beabacc890606401600060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b5050505081600101915050612317565b5050505060030180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b6124cc604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b815482906124d9906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612505906149a3565b80156125525780601f1061252757610100808354040283529160200191612552565b820191906000526020600020905b81548152906001019060200180831161253557829003601f168201915b5050509183525050600182015467ffffffffffffffff16602082015260038201547501000000000000000000000000000000000000000000810461ffff16604083015260028084015473ffffffffffffffffffffffffffffffffffffffff90811660608501528216608084015260a083019174010000000000000000000000000000000000000000900460ff16908111156125ef576125ef613dee565b9081600281111561260257612602613dee565b905250600182015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660c0820152600382015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561266c5761266c6144b9565b6040519080825280602002602001820160405280156126b157816020015b604080518082019091526000808252602082015281526020019060019003908161268a5790505b5060e082015260005b8160e00151518160ff16101561275a5760ff8116600081815260048501602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260e0840151805191929091811061274757612747614886565b60209081029190910101526001016126ba565b5060038201547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff811115612798576127986144b9565b60405190808252806020026020018201604052801561280c57816020015b6127f9604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b8152602001906001900390816127b65790505b5061010082015260005b816101000151518160ff161015612b6e5760ff81166000908152600584016020526040902080548190612848906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612874906149a3565b80156128c15780601f10612896576101008083540402835291602001916128c1565b820191906000526020600020905b8154815290600101906020018083116128a457829003601f168201915b50505050508361010001518360ff16815181106128e0576128e0614886565b6020908102919091010151526001810154610100840151805173ffffffffffffffffffffffffffffffffffffffff9092169160ff851690811061292557612925614886565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9092169101526001810154610100840151805160ff74010000000000000000000000000000000000000000909304831692851690811061298857612988614886565b602090810291909101015190151560409091015260018101547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156129d5576129d56144b9565b604051908082528060200260200182016040528015612a3e57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816129f35790505b508361010001518360ff1681518110612a5957612a59614886565b60200260200101516060018190525060005b8361010001518360ff1681518110612a8557612a85614886565b602002602001015160600151518160ff161015612b645760ff8181166000908152600284016020908152604091829020825160608101845290548085161515825261010080820473ffffffffffffffffffffffffffffffffffffffff1693830193909352750100000000000000000000000000000000000000000090046affffffffffffffffffffff1692810192909252860151805191929091908616908110612b3157612b31614886565b6020026020010151606001518260ff1681518110612b5157612b51614886565b6020908102919091010152600101612a6b565b5050600101612816565b5060038201547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612bad57612bad6144b9565b604051908082528060200260200182016040528015612bfe57816020015b612beb604080516060808201835280825260208201529081016000905290565b815260200190600190039081612bcb5790505b5061012082015260005b816101200151518160ff161015612dbb5760ff8116600090815260068401602052604090819020815160608101909252805482908290612c47906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612c73906149a3565b8015612cc05780601f10612c9557610100808354040283529160200191612cc0565b820191906000526020600020905b815481529060010190602001808311612ca357829003601f168201915b50505050508152602001600182018054612cd9906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612d05906149a3565b8015612d525780601f10612d2757610100808354040283529160200191612d52565b820191906000526020600020905b815481529060010190602001808311612d3557829003601f168201915b505050918352505060028281015460209092019160ff1690811115612d7957612d79613dee565b6002811115612d8a57612d8a613dee565b815250508261012001518260ff1681518110612da857612da8614886565b6020908102919091010152600101612c08565b5060038201547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612dfb57612dfb6144b9565b604051908082528060200260200182016040528015612e5157816020015b60408051608081018252600091810182815260608083019390935281526020810191909152815260200190600190039081612e195790505b5061014082015260005b816101400151518160ff161015612f6e5760ff808216600090815260078501602090815260409182902082516080810184528154808616151594820194855261010090049094161515606085015291835260018201805491840191612ebf906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612eeb906149a3565b8015612f385780601f10612f0d57610100808354040283529160200191612f38565b820191906000526020600020905b815481529060010190602001808311612f1b57829003601f168201915b5050505050815250508261014001518260ff1681518110612f5b57612f5b614886565b6020908102919091010152600101612e5b565b50919050565b60065473ffffffffffffffffffffffffffffffffffffffff16156120dd576040517f5b3d539f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600382015474010000000000000000000000000000000000000000900460ff166002811115612ff757612ff7613dee565b03612197576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120dd576040517f0e5e0b5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600382015474010000000000000000000000000000000000000000900460ff1660028111156130c8576130c8613dee565b14612197576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff163314612197576040517fc0fc8a8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015461ffff780100000000000000000000000000000000000000000000000090910481169082161061058e576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600484016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b8560ff168160ff1610156134545760ff8082166000908152602087905260409020546affffffffffffffffffffff75010000000000000000000000000000000000000000008204169390930192161561344c5782602001516bffffffffffffffffffffffff168211156133da57825173ffffffffffffffffffffffffffffffffffffffff166323b872dd338960010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686602001516bffffffffffffffffffffffff16866132e691906148ff565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af115801561335f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133839190614d92565b5060ff841660009081526004880160205260409020805473ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000006bffffffffffffffffffffffff8516021790555b60ff60019094019384166000908152600488016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613218565b50505050505050565b80511580159061348c57508060018251038151811061347e5761347e614886565b602002602001015160000151155b15612197576040517f1f0e3e5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7a01000000000000000000000000000000000000000000000000000090910481169082161061058e576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028083015460ff169081111561354057613540613dee565b14612197576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154750100000000000000000000000000000000000000000080820461ffff1660009081526005840160205260408120600285015460018087015490830154929573ffffffffffffffffffffffffffffffffffffffff928316956801000000000000000090920490921693920460ff9081169177010000000000000000000000000000000000000000000000900416825b8160ff168160ff16101561387d5760ff8116600090815260048901602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16908201525b8360ff168560ff1610156137cb5760ff858116600090815260028a0160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff90811692820183905275010000000000000000000000000000000000000000009094046affffffffffffffffffffff16818401819052855193517fbeabacc80000000000000000000000000000000000000000000000000000000081529385166004850152602484019290925260448301919091529188169063beabacc890606401600060405180830381600087803b15801561376c57600080fd5b505af1158015613780573d6000803e3d6000fd5b5050505060408101516020830180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805160019690960195156137c557506137cb565b5061367e565b805160208201516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b15801561385957600080fd5b505af115801561386d573d6000803e3d6000fd5b505050508160010191505061360b565b5050505060039390930180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055505050565b805460ff16612197576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610100900460ff1615612197576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff8116613a0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6001830180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8416021790556000808052600485016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8086169082161015613c415785858260ff16818110613ae057613ae0614886565b9050606002016040016020810190613af89190615336565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613b55576040517fb8f6ba5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858260ff16818110613b6a57613b6a614886565b60ff8416600090815260028b0160205260409020606090910292909201919050613b948282614b59565b90505085858260ff16818110613bac57613bac614886565b613bc29260206060909202019081019150615353565b15613c395760ff60019094019384166000908152600489016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613abd565b5050505050505050565b600181015473ffffffffffffffffffffffffffffffffffffffff163314612197576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015474010000000000000000000000000000000000000000900460ff16612197576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803560018110613a0c57600080fd5b803560ff81168114613a0c57600080fd5b801515811461219757600080fd5b60008060008060808587031215613d3857600080fd5b84359350613d4860208601613cf4565b9250613d5660408601613d03565b91506060850135613d6681613d14565b939692955090935050565b600060208284031215613d8357600080fd5b5035919050565b6000815180845260005b81811015613db057602081850181015186830182015201613d94565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061219757612197613dee565b613e3681613e1d565b9052565b600081518084526020808501945080840160005b83811015613e99578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101613e4e565b509495945050505050565b600082825180855260208086019550808260051b8401018186016000805b85811015613fb1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878503018a52825160808151818752613f0682880182613d8a565b8389015173ffffffffffffffffffffffffffffffffffffffff908116898b01526040808601511515818b01526060958601518a8403878c01528051808552908c019689965091945091929091908b01905b80861015613f995786518051151583528c81015185168d8401528501516affffffffffffffffffffff1685830152958b01956001959095019490820190613f57565b509e8a019e9850505094870194505050600101613ec2565b509198975050505050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614061577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086840301895281516060815181865261402082870182613d8a565b91505085820151858203878701526140388282613d8a565b915050604080830151925061404c83613e1d565b94909401529783019790830190600101613fdc565b5090979650505050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614061578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018952815180518051151585528501511515858501528401516060604085018190526140e581860183613d8a565b9a86019a945050509083019060010161408b565b6000610160825181855261410f82860182613d8a565b915050602083015161412d602086018267ffffffffffffffff169052565b506040830151614143604086018261ffff169052565b50606083015161416b606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151614193608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08301516141a660a0860182613e2d565b5060c08301516141ce60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e083015184820360e08601526141e68282613e3a565b91505061010080840151858303828701526142018382613ea4565b92505050610120808401518583038287015261421d8382613fbf565b925050506101408084015185830382870152614239838261406e565b9695505050505050565b60208152600061056060208301846140f9565b60008083601f84011261426857600080fd5b50813567ffffffffffffffff81111561428057600080fd5b6020830191508360208260051b850101111561429b57600080fd5b9250929050565b6000806000604084860312156142b757600080fd5b83359250602084013567ffffffffffffffff8111156142d557600080fd5b6142e186828701614256565b9497909650939450505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461219757600080fd5b8035613a0c816142ee565b60008060006060848603121561433057600080fd5b833561433b816142ee565b95602085013595506040909401359392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156143c3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526143b18583516140f9565b94509285019290850190600101614377565b5092979650505050505050565b60008083601f8401126143e257600080fd5b50813567ffffffffffffffff8111156143fa57600080fd5b60208301915083602082850101111561429b57600080fd5b60008060008060006060868803121561442a57600080fd5b85359450602086013567ffffffffffffffff8082111561444957600080fd5b61445589838a016143d0565b9096509450604088013591508082111561446e57600080fd5b818801915088601f83011261448257600080fd5b81358181111561449157600080fd5b8960206060830285010111156144a657600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561452f5761452f6144b9565b604052919050565b6000602080838503121561454a57600080fd5b823567ffffffffffffffff8082111561456257600080fd5b818501915085601f83011261457657600080fd5b813581811115614588576145886144b9565b8060051b91506145998483016144e8565b81815291830184019184810190888411156145b357600080fd5b938501935b838510156145d1578435825293850193908501906145b8565b98975050505050505050565b6000806000806000608086880312156145f557600080fd5b8535945061460560208701613d03565b935060408601356003811061461957600080fd5b9250606086013567ffffffffffffffff81111561463557600080fd5b614641888289016143d0565b969995985093965092949392505050565b60008060006040848603121561466757600080fd5b83359250602084013567ffffffffffffffff81111561468557600080fd5b6142e1868287016143d0565b6000806000606084860312156146a657600080fd5b833592506146b660208501613cf4565b91506146c460408501613d03565b90509250925092565b803567ffffffffffffffff81168114613a0c57600080fd5b60008060008060008060008060a0898b03121561470157600080fd5b883567ffffffffffffffff8082111561471957600080fd5b6147258c838d016143d0565b909a50985088915061473960208c016146cd565b975060408b013591508082111561474f57600080fd5b818b0191508b601f83011261476357600080fd5b81358181111561477257600080fd5b8c60208260061b850101111561478757600080fd5b602083019750955061479b60608c01614310565b945060808b01359150808211156147b157600080fd5b506147be8b828c01614256565b999c989b5096995094979396929594505050565b803561ffff81168114613a0c57600080fd5b600080604083850312156147f757600080fd5b82359150614807602084016147d2565b90509250929050565b6000806040838503121561482357600080fd5b82359150614807602084016146cd565b60018110613e3657613e36613dee565b608081016148518287614833565b60ff94909416602082015273ffffffffffffffffffffffffffffffffffffffff92831660408201529116606090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156148c757600080fd5b610560826147d2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115614912576149126148d0565b92915050565b6affffffffffffffffffffff8116811461219757600080fd5b60006060828403121561494357600080fd5b6040516060810181811067ffffffffffffffff82111715614966576149666144b9565b604052823561497481613d14565b81526020830135614984816142ee565b6020820152604083013561499781614918565b60408201529392505050565b600181811c908216806149b757607f821691505b602082108103612f6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f821115614a3a57600081815260208120601f850160051c81016020861015614a175750805b601f850160051c820191505b81811015614a3657828155600101614a23565b5050505b505050565b67ffffffffffffffff831115614a5757614a576144b9565b614a6b83614a6583546149a3565b836149f0565b6000601f841160018114614abd5760008515614a875750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b17835561076a565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015614b0c5786850135825560209485019460019092019101614aec565b5086821015614b47577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135614b6481613d14565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff1691821783556020840135614ba2816142ee565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff00000000000000000000000000000000000000000081848285161717855560408601359250614bf983614918565b921760a89190911b90911617905550565b600061ffff808316818103614c2157614c216148d0565b6001019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015613e99578135614c9781613d14565b1515875281830135614ca8816142ee565b73ffffffffffffffffffffffffffffffffffffffff1687840152604082810135614cd181614918565b6affffffffffffffffffffff16908801526060968701969190910190600101614c84565b61ffff8816815260a060208201526000614d1360a08301888a614c2b565b8281036040840152614d26818789614c74565b91505073ffffffffffffffffffffffffffffffffffffffff808516606084015280841660808401525098975050505050505050565b6bffffffffffffffffffffffff8116811461219757600080fd5b600060208284031215614d8757600080fd5b813561056081614d5b565b600060208284031215614da457600080fd5b815161056081613d14565b6bffffffffffffffffffffffff818116838216019080821115610ea257610ea26148d0565b6040808252810183905260008460608301825b86811015614e1c578235614dfa81614d5b565b6bffffffffffffffffffffffff16825260209283019290910190600101614de7565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60ff87168152614e5586613e1d565b85602082015260a060408201526000614e7260a083018688614c2b565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b604081526000614eb6604083018587614c2b565b905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60a08101614eea8288614833565b60ff95909516602082015273ffffffffffffffffffffffffffffffffffffffff93841660408201529183166060830152909116608090910152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f5957614f596148d0565b5060010190565b600060208284031215614f7257600080fd5b8135610560816142ee565b8135614f88816142ee565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff000000000000000000000000000000000000000081818454161783556020840135614fd881614d5b565b60a01b1617905550565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261501657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261505557600080fd5b83018035915067ffffffffffffffff82111561507057600080fd5b602001915060608102360382131561429b57600080fd5b60008383855260208086019550808560051b8301018460005b87811015614061577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc188360301811261510157600080fd5b870160408135615110816142ee565b73ffffffffffffffffffffffffffffffffffffffff16855281860135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe101811261515d57600080fd5b90910185810191903567ffffffffffffffff81111561517b57600080fd5b60608102360383131561518d57600080fd5b818787015261519f8287018285614c74565b9b87019b9550505091840191506001016150a0565b60c0815260006151c860c083018b8d614c2b565b602067ffffffffffffffff8b1681850152604084830381860152828a845282840190508b935060005b8b81101561524b578435615204816142ee565b73ffffffffffffffffffffffffffffffffffffffff1682528484013561522981614d5b565b6bffffffffffffffffffffffff168285015293820193908201906001016151f1565b5073ffffffffffffffffffffffffffffffffffffffff8a16606087015273ffffffffffffffffffffffffffffffffffffffff8916608087015285810360a087015261529781888a615087565b9f9e505050505050505050505050505050565b600060ff821660ff81036152c0576152c06148d0565b60010192915050565b60ff861681526080602082015260006152e6608083018688614c2b565b73ffffffffffffffffffffffffffffffffffffffff948516604084015292909316606090910152949350505050565b67ffffffffffffffff818116838216019080821115610ea257610ea26148d0565b60006020828403121561534857600080fd5b813561056081614918565b60006020828403121561536557600080fd5b813561056081613d1456fea2646970667358221220b8a2212256819164fbdf19f68f38e53869ae66bae2753935d5c05955ce81ea1f64736f6c63430008110033608060405234801561001057600080fd5b50610289806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806365b145fb1461003b578063beabacc814610045575b600080fd5b610043610058565b005b6100436100533660046101e9565b6100d4565b60005473ffffffffffffffffffffffffffffffffffffffff16156100a8576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610125576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561019a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101be919061022a565b50505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101e657600080fd5b50565b6000806000606084860312156101fe57600080fd5b8335610209816101c4565b92506020840135610219816101c4565b929592945050506040919091013590565b60006020828403121561023c57600080fd5b8151801515811461024c57600080fd5b939250505056fea26469706673582212201d2e0260bc1b668deed1ce5be0dd2fdd10d67c1761b87d684b7f290e81ab5fc364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016b5760003560e01c806377b98419116100cd578063b685504b11610081578063b795282911610066578063b795282914610306578063c5f9027b14610319578063ecb8adae1461032c57600080fd5b8063b685504b146102eb578063b6cb58a5146102fe57600080fd5b806391a29225116100b257806391a2922514610292578063978a2b53146102a5578063a5e99c4e146102c657600080fd5b806377b984191461026c57806383219a8a1461027f57600080fd5b80633f74d41d116101245780635ac1d773116101095780635ac1d7731461022257806362ffbb201461024657806376645a931461025957600080fd5b80633f74d41d146101dc57806352a63d49146101fc57600080fd5b8063278ecde111610155578063278ecde1146101ae5780632f2770db146101c15780633f561a40146101c957600080fd5b8062f9467d146101705780631d65e77e14610185575b600080fd5b61018361017e366004613d22565b61033f565b005b610198610193366004613d71565b6104d7565b6040516101a59190614243565b60405180910390f35b6101836101bc366004613d71565b610567565b610183610592565b6101836101d73660046142a2565b6105c4565b6101ef6101ea36600461431b565b610771565b6040516101a59190614350565b61020f61020a366004614412565b61091a565b60405161ffff90911681526020016101a5565b600154600254600354604080519384526020840192909252908201526060016101a5565b6101836102543660046142a2565b610b44565b6101ef610267366004614537565b610d8a565b61018361027a3660046145dd565b610ea9565b61018361028d366004614652565b6110a5565b6101836102a0366004614691565b61110d565b6102b86102b33660046146e5565b6112cb565b6040519081526020016101a5565b6102d96102d4366004614652565b61185e565b60405160ff90911681526020016101a5565b6101836102f93660046147e4565b61198a565b6000546102b8565b6101ef61031436600461431b565b611aee565b610183610327366004614810565b611c01565b6102d961033a366004614652565b611d6a565b61034761208e565b6000610352856120df565b905061035d8161212d565b6103668161219a565b610370818461221f565b60ff83166000908152600782016020526040902061038d81612282565b821561044557600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190556103c4826122be565b60038201546040805173ffffffffffffffffffffffffffffffffffffffff9092168252336020830152805188927f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e7292908290030190a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001781555b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600381015485907f22c8636df8a0387ea92695f6534f3a1dccaa44ba42e7627c4d205e078dbbbe04908690869073ffffffffffffffffffffffffffffffffffffffff166104b83390565b6040516104c89493929190614843565b60405180910390a25050505050565b61054a604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b6000610555836120df565b905061056081612459565b9392505050565b61056f612f74565b600061057a826120df565b905061058581612fc4565b61058e816122be565b5050565b61059a61302e565b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b6105cc61208e565b60006105d7846120df565b90506105e281613095565b6105eb816130ff565b60005b8281101561076a576106268285858481811061060c5761060c614886565b905060200201602081019061062191906148b5565b613152565b600082600501600086868581811061064057610640614886565b905060200201602081019061065591906148b5565b61ffff16815260208101919091526040016000206001810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017908190559091506106da9084907501000000000000000000000000000000000000000000900460ff16600284016131b3565b857f42640c2316bc5dc21268d8f31f937340e2b0bae183af2839d910e442daa5b34f86868581811061070e5761070e614886565b905060200201602081019061072391906148b5565b60018401546040805161ffff93909316835233602084015273ffffffffffffffffffffffffffffffffffffffff90911682820152519081900360600190a2506001016105ee565b5050505050565b600080546060918167ffffffffffffffff811115610791576107916144b9565b6040519080825280602002602001820160405280156107ba578160200160208202803683370190505b5090506000856000036107d5576107d26001846148ff565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd576000808281526004602052604090206003015474010000000000000000000000000000000000000000900460ff16600281111561083d5761083d613dee565b141580156108a35750600081815260046020908152604080832060038101547501000000000000000000000000000000000000000000900461ffff16845260050190915290206001015473ffffffffffffffffffffffffffffffffffffffff8981169116145b156108d657808383815181106108bb576108bb614886565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016107d7565b50808303825103825261090f82610d8a565b979650505050505050565b600061092461208e565b600061092f876120df565b905061093a81613095565b6109958484808060200260200160405190810160405280939291908181526020016000905b8282101561098b5761097c60608302860136819003810190614931565b8152602001906001019061095f565b505050505061345d565b60038101547801000000000000000000000000000000000000000000000000900461ffff1660009081526005820160205260409020806109d6878983614a3f565b5060018101805460ff86167501000000000000000000000000000000000000000000027fffffffffffffffffffff00ff0000000000000000000000000000000000000000909116331717905560005b60ff8086169082161015610a7c5785858260ff16818110610a4857610a48614886565b60ff841660009081526002860160205260409020606090910292909201919050610a728282614b59565b5050600101610a25565b506003820180547801000000000000000000000000000000000000000000000000900461ffff16906018610aaf83614c0a565b91906101000a81548161ffff021916908361ffff1602179055509250877f7dea79221549b396f31442a220505470acfcfd38f772b6b3faa676d25df5998d84898989898860030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b1e3390565b604051610b319796959493929190614cf5565b60405180910390a2505095945050505050565b610b4c61208e565b6000610b57846120df565b9050610b62816130ff565b610b6b81613095565b60005b60ff8084169082161015610d475760ff811660009081526004830160205260409020805473ffffffffffffffffffffffffffffffffffffffff166323b872dd33600186015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff16888860ff8816818110610bea57610bea614886565b9050602002016020810190610bff9190614d75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190614d92565b5084848360ff16818110610cc057610cc0614886565b9050602002016020810190610cd59190614d75565b81548290601490610d0d9084907401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16614daf565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555081600101915050610b6e565b50837ffd28ab2ce625e634dd4caa0b1632ca64ed46e19b4ddd416693af49ad5e696d62848433604051610d7c93929190614dd4565b60405180910390a250505050565b60606000825167ffffffffffffffff811115610da857610da86144b9565b604051908082528060200260200182016040528015610e4c57816020015b610e39604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b815260200190600190039081610dc65790505b50905060005b8351811015610ea257610e7d848281518110610e7057610e70614886565b60200260200101516104d7565b828281518110610e8f57610e8f614886565b6020908102919091010152600101610e52565b5092915050565b610eb161208e565b6000610ebc866120df565b9050610ec78161212d565b610ed0816130ff565b610eda81866134c3565b60ff851660009081526006820160205260409020610ef781613525565b848160020160006101000a81548160ff02191690836002811115610f1d57610f1d613dee565b021790555060018101610f31848683614a3f565b506001856002811115610f4657610f46613dee565b0361100e57600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055600380546001019055610f8582613577565b867f71df29d45998a549c1f24c01fb77e4eb23d0655460af8d435c59de2d8f572d963360038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff94851681529316908301520160405180910390a25b867f996a0dc6f1df9505a14639ddb92690f738f30d9e246272adae5ae7fb6c9a9303878787873360038901547501000000000000000000000000000000000000000000900461ffff16600090815260058a0160205260409081902060010154905161109496959493929173ffffffffffffffffffffffffffffffffffffffff1690614e46565b60405180910390a250505050505050565b6110ad61208e565b60006110b8846120df565b90506110c3816130ff565b6110cc81613095565b806110d8838583614a3f565b50837f967dad14c5f736d50ac946b958b80007717809320b4864c86cd29b0898fad807848433604051610d7c93929190614ea2565b61111561208e565b6000611120846120df565b905061112b8161212d565b611135818361221f565b60ff821660009081526007820160205260409020611152816138c9565b61115b81613904565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905561118c826122be565b60038201547501000000000000000000000000000000000000000000810461ffff16600090815260058401602090815260409182902060010154825173ffffffffffffffffffffffffffffffffffffffff948516815293169083015286917f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72910160405180910390a280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055837fa20926c2163603eba714f9531625851214f394b2984a5038f03c478b73b0458a848461126a3390565b600386015461ffff7501000000000000000000000000000000000000000000820416600090815260058801602052604090819020600101549051610d7c9594939273ffffffffffffffffffffffffffffffffffffffff908116921690614edc565b60006112d561208e565b6000805490806112e483614f28565b909155506000818152600460205260409020909150806113058a8c83614a3f565b506001810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a161790556003810180547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000060ff8916021790556005546000906113aa9073ffffffffffffffffffffffffffffffffffffffff16613945565b90508073ffffffffffffffffffffffffffffffffffffffff166365b145fb6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113f457600080fd5b505af1158015611408573d6000803e3d6000fd5b505050506001820180547fffffffff0000000000000000000000000000000000000000ffffffffffffffff166801000000000000000073ffffffffffffffffffffffffffffffffffffffff84160217905560005b60ff80891690821610156115d35788888260ff1681811061147f5761147f614886565b6114959260206040909202019081019150614f60565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd33848c8c8660ff168181106114c7576114c7614886565b90506040020160200160208101906114df9190614d75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526bffffffffffffffffffffffff1660448201526064016020604051808303816000875af1158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a9190614d92565b5088888260ff168181106115a0576115a0614886565b60ff84166000908152600487016020526040908190209102929092019190506115c98282614f7d565b505060010161145c565b5060038201805473ffffffffffffffffffffffffffffffffffffffff88167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556002830180549091163317905560018054810190558315611808576003820180547fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000061ffff87160217905560005b61ffff80861690821610156118065761ffff81166000818152600585016020526040902090879087908181106116ba576116ba614886565b90506020028101906116cc9190614fe2565b6116da906020810190614f60565b6001820180547fffffffffffffffffffffff0000000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117740100000000000000000000000000000000000000001790556117bd878761ffff851681811061175157611751614886565b90506020028101906117639190614fe2565b611771906020810190615020565b808060200260200160405190810160405280939291908181526020016000905b8282101561098b576117ae60608302860136819003810190614931565b81526020019060010190611791565b6117fd848289898661ffff168181106117d8576117d8614886565b90506020028101906117ea9190614fe2565b6117f8906020810190615020565b613a11565b50600101611682565b505b827f789e3fb3404e145b30be9137359b893e98ac76bcf68e2acfc3ac8c94edf059828c8c8c8c8c338d8d8d604051611848999897969594939291906151b4565b60405180910390a2505098975050505050505050565b600061186861208e565b6000611873856120df565b905061187e8161212d565b6118878161219a565b60038101547a010000000000000000000000000000000000000000000000000000900460ff1660009081526006820160205260409020806118c9858783614a3f565b506003820180547a010000000000000000000000000000000000000000000000000000900460ff1690601a6118fd836152aa565b91906101000a81548160ff021916908360ff1602179055509250857febbf99121aff5f85cf06c85caf2ef1ffc43579642cafcec11f652cd95d1287128487878660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166119683390565b6040516119799594939291906152c9565b60405180910390a250509392505050565b61199261208e565b600061199d836120df565b90506119a881613095565b6119b28183613152565b61ffff8216600090815260058201602052604090206119d081613c4b565b6119d981613c9e565b6003820180547fffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000061ffff8616908102919091178255600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01815560028054909101905581547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000179092556040805191825273ffffffffffffffffffffffffffffffffffffffff9092166020820152339181019190915284907f999f5ac16ad68b99efbba298ac2365d78c941b1b397f82a52232dedb58d48de190606001610d7c565b600080546060918167ffffffffffffffff811115611b0e57611b0e6144b9565b604051908082528060200260200182016040528015611b37578160200160208202803683370190505b509050600085600003611b5257611b4f6001846148ff565b95505b855b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108fd5760008181526004602052604090206003015473ffffffffffffffffffffffffffffffffffffffff808a16911603611bda5780838381518110611bbf57611bbf614886565b602002602001018181525050816001019150858203156108fd575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611b54565b611c0961208e565b6000611c14836120df565b9050611c1f816130ff565b611c2881612fc4565b600181018054839190600090611c4990849067ffffffffffffffff16615315565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550827f3d9ee6a0fdedaee94f1c3631bf046c61c58704428408ca72e3e7ffa046884a6883611c993390565b6000600386015474010000000000000000000000000000000000000000900460ff166002811115611ccc57611ccc613dee565b14611d225760038501547501000000000000000000000000000000000000000000900461ffff16600090815260058601602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16611d25565b60005b6040805167ffffffffffffffff909416845273ffffffffffffffffffffffffffffffffffffffff928316602085015291169082015260600160405180910390a2505050565b6000611d7461208e565b6000611d7f856120df565b9050611d8a816130ff565b611d9381612fc4565b6000600382015474010000000000000000000000000000000000000000900460ff166002811115611dc657611dc6613dee565b1480611de35750600181015467ffffffffffffffff428116911611155b15611f67576000600382015474010000000000000000000000000000000000000000900460ff166002811115611e1b57611e1b613dee565b03611e4d57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019055611e76565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b611e7f816122be565b847f7b6dd43008ec95d34632e25b85bcb8ea6ac0e4170eda419079a724462b2b8e72336000600385015474010000000000000000000000000000000000000000900460ff166002811115611ed557611ed5613dee565b14611f2b5760038401547501000000000000000000000000000000000000000000900461ffff16600090815260058501602052604090206001015473ffffffffffffffffffffffffffffffffffffffff16611f2e565b60005b6040805173ffffffffffffffffffffffffffffffffffffffff93841681529290911660208301520160405180910390a260ff9150612086565b60038101547b01000000000000000000000000000000000000000000000000000000900460ff166000908152600782016020526040902060018101611fad858783614a3f565b506003820180547b01000000000000000000000000000000000000000000000000000000900460ff1690601b611fe2836152aa565b91906101000a81548160ff021916908360ff1602179055509250857f8beb4b470a422a5a51289e17afad55bb1f5692ed0b2ad0d71779119481d389928487876120283390565b60038801547501000000000000000000000000000000000000000000900461ffff16600090815260058901602052604090819020600101549051611979959493929173ffffffffffffffffffffffffffffffffffffffff16906152c9565b509392505050565b60065473ffffffffffffffffffffffffffffffffffffffff166120dd576040517f75884cda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008054821061211b576040517fda319dff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600090815260046020526040902090565b6001600382015474010000000000000000000000000000000000000000900460ff16600281111561216057612160613dee565b14612197576040517f24a6478900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600381015461ffff750100000000000000000000000000000000000000000090910416600090815260058201602052604090206001015473ffffffffffffffffffffffffffffffffffffffff163314612197576040517fc32d1d7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7b0100000000000000000000000000000000000000000000000000000090910481169082161061058e576040517fe06f976a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff1615612197576040517f9f80515700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154600282015460018301547701000000000000000000000000000000000000000000000090920460ff169173ffffffffffffffffffffffffffffffffffffffff91821691680100000000000000009091041660005b8360ff168160ff1610156124135760ff811660009081526004868101602090815260409283902083518085018552905473ffffffffffffffffffffffffffffffffffffffff808216808452740100000000000000000000000000000000000000009092046bffffffffffffffffffffffff1693830184905294517fbeabacc800000000000000000000000000000000000000000000000000000000815293840152868416602484015260448301919091529184169063beabacc890606401600060405180830381600087803b1580156123ef57600080fd5b505af1158015612403573d6000803e3d6000fd5b5050505081600101915050612317565b5050505060030180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055565b6124cc604080516101608101825260608082526000602083018190529282018390528101829052608081018290529060a08201908152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001606081525090565b815482906124d9906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612505906149a3565b80156125525780601f1061252757610100808354040283529160200191612552565b820191906000526020600020905b81548152906001019060200180831161253557829003601f168201915b5050509183525050600182015467ffffffffffffffff16602082015260038201547501000000000000000000000000000000000000000000810461ffff16604083015260028084015473ffffffffffffffffffffffffffffffffffffffff90811660608501528216608084015260a083019174010000000000000000000000000000000000000000900460ff16908111156125ef576125ef613dee565b9081600281111561260257612602613dee565b905250600182015468010000000000000000900473ffffffffffffffffffffffffffffffffffffffff1660c0820152600382015477010000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff81111561266c5761266c6144b9565b6040519080825280602002602001820160405280156126b157816020015b604080518082019091526000808252602082015281526020019060019003908161268a5790505b5060e082015260005b8160e00151518160ff16101561275a5760ff8116600081815260048501602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169082015260e0840151805191929091811061274757612747614886565b60209081029190910101526001016126ba565b5060038201547801000000000000000000000000000000000000000000000000900461ffff1667ffffffffffffffff811115612798576127986144b9565b60405190808252806020026020018201604052801561280c57816020015b6127f9604051806080016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081525090565b8152602001906001900390816127b65790505b5061010082015260005b816101000151518160ff161015612b6e5760ff81166000908152600584016020526040902080548190612848906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612874906149a3565b80156128c15780601f10612896576101008083540402835291602001916128c1565b820191906000526020600020905b8154815290600101906020018083116128a457829003601f168201915b50505050508361010001518360ff16815181106128e0576128e0614886565b6020908102919091010151526001810154610100840151805173ffffffffffffffffffffffffffffffffffffffff9092169160ff851690811061292557612925614886565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff9092169101526001810154610100840151805160ff74010000000000000000000000000000000000000000909304831692851690811061298857612988614886565b602090810291909101015190151560409091015260018101547501000000000000000000000000000000000000000000900460ff1667ffffffffffffffff8111156129d5576129d56144b9565b604051908082528060200260200182016040528015612a3e57816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816129f35790505b508361010001518360ff1681518110612a5957612a59614886565b60200260200101516060018190525060005b8361010001518360ff1681518110612a8557612a85614886565b602002602001015160600151518160ff161015612b645760ff8181166000908152600284016020908152604091829020825160608101845290548085161515825261010080820473ffffffffffffffffffffffffffffffffffffffff1693830193909352750100000000000000000000000000000000000000000090046affffffffffffffffffffff1692810192909252860151805191929091908616908110612b3157612b31614886565b6020026020010151606001518260ff1681518110612b5157612b51614886565b6020908102919091010152600101612a6b565b5050600101612816565b5060038201547a010000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612bad57612bad6144b9565b604051908082528060200260200182016040528015612bfe57816020015b612beb604080516060808201835280825260208201529081016000905290565b815260200190600190039081612bcb5790505b5061012082015260005b816101200151518160ff161015612dbb5760ff8116600090815260068401602052604090819020815160608101909252805482908290612c47906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612c73906149a3565b8015612cc05780601f10612c9557610100808354040283529160200191612cc0565b820191906000526020600020905b815481529060010190602001808311612ca357829003601f168201915b50505050508152602001600182018054612cd9906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612d05906149a3565b8015612d525780601f10612d2757610100808354040283529160200191612d52565b820191906000526020600020905b815481529060010190602001808311612d3557829003601f168201915b505050918352505060028281015460209092019160ff1690811115612d7957612d79613dee565b6002811115612d8a57612d8a613dee565b815250508261012001518260ff1681518110612da857612da8614886565b6020908102919091010152600101612c08565b5060038201547b01000000000000000000000000000000000000000000000000000000900460ff1667ffffffffffffffff811115612dfb57612dfb6144b9565b604051908082528060200260200182016040528015612e5157816020015b60408051608081018252600091810182815260608083019390935281526020810191909152815260200190600190039081612e195790505b5061014082015260005b816101400151518160ff161015612f6e5760ff808216600090815260078501602090815260409182902082516080810184528154808616151594820194855261010090049094161515606085015291835260018201805491840191612ebf906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054612eeb906149a3565b8015612f385780601f10612f0d57610100808354040283529160200191612f38565b820191906000526020600020905b815481529060010190602001808311612f1b57829003601f168201915b5050505050815250508261014001518260ff1681518110612f5b57612f5b614886565b6020908102919091010152600101612e5b565b50919050565b60065473ffffffffffffffffffffffffffffffffffffffff16156120dd576040517f5b3d539f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600382015474010000000000000000000000000000000000000000900460ff166002811115612ff757612ff7613dee565b03612197576040517f39d70be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120dd576040517f0e5e0b5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600382015474010000000000000000000000000000000000000000900460ff1660028111156130c8576130c8613dee565b14612197576040517ffe89421700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015473ffffffffffffffffffffffffffffffffffffffff163314612197576040517fc0fc8a8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015461ffff780100000000000000000000000000000000000000000000000090910481169082161061058e576040517f362a281100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808052600484016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b8560ff168160ff1610156134545760ff8082166000908152602087905260409020546affffffffffffffffffffff75010000000000000000000000000000000000000000008204169390930192161561344c5782602001516bffffffffffffffffffffffff168211156133da57825173ffffffffffffffffffffffffffffffffffffffff166323b872dd338960010160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686602001516bffffffffffffffffffffffff16866132e691906148ff565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff938416600482015292909116602483015260448201526064016020604051808303816000875af115801561335f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133839190614d92565b5060ff841660009081526004880160205260409020805473ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000006bffffffffffffffffffffffff8516021790555b60ff60019094019384166000908152600488016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613218565b50505050505050565b80511580159061348c57508060018251038151811061347e5761347e614886565b602002602001015160000151155b15612197576040517f1f0e3e5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382015460ff7a01000000000000000000000000000000000000000000000000000090910481169082161061058e576040517f5005f9de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028083015460ff169081111561354057613540613dee565b14612197576040517fc144afcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810154750100000000000000000000000000000000000000000080820461ffff1660009081526005840160205260408120600285015460018087015490830154929573ffffffffffffffffffffffffffffffffffffffff928316956801000000000000000090920490921693920460ff9081169177010000000000000000000000000000000000000000000000900416825b8160ff168160ff16101561387d5760ff8116600090815260048901602090815260409182902082518084019093525473ffffffffffffffffffffffffffffffffffffffff811683527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff16908201525b8360ff168560ff1610156137cb5760ff858116600090815260028a0160209081526040918290208251606081018452905493841615158152610100840473ffffffffffffffffffffffffffffffffffffffff90811692820183905275010000000000000000000000000000000000000000009094046affffffffffffffffffffff16818401819052855193517fbeabacc80000000000000000000000000000000000000000000000000000000081529385166004850152602484019290925260448301919091529188169063beabacc890606401600060405180830381600087803b15801561376c57600080fd5b505af1158015613780573d6000803e3d6000fd5b5050505060408101516020830180516affffffffffffffffffffff9092169091036bffffffffffffffffffffffff169052805160019690960195156137c557506137cb565b5061367e565b805160208201516040517fbeabacc800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015289831660248201526bffffffffffffffffffffffff90911660448201529087169063beabacc890606401600060405180830381600087803b15801561385957600080fd5b505af115801561386d573d6000803e3d6000fd5b505050508160010191505061360b565b5050505060039390930180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674020000000000000000000000000000000000000000179055505050565b805460ff16612197576040517ff34ca27f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8054610100900460ff1615612197576040517fd6f1f94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff8116613a0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6001830180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750100000000000000000000000000000000000000000060ff8416021790556000808052600485016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682527401000000000000000000000000000000000000000090046bffffffffffffffffffffffff169181019190915281805b60ff8086169082161015613c415785858260ff16818110613ae057613ae0614886565b9050606002016040016020810190613af89190615336565b6affffffffffffffffffffff168201915082602001516bffffffffffffffffffffffff16821115613b55576040517fb8f6ba5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858260ff16818110613b6a57613b6a614886565b60ff8416600090815260028b0160205260409020606090910292909201919050613b948282614b59565b90505085858260ff16818110613bac57613bac614886565b613bc29260206060909202019081019150615353565b15613c395760ff60019094019384166000908152600489016020908152604080832081518083019092525473ffffffffffffffffffffffffffffffffffffffff811682526bffffffffffffffffffffffff740100000000000000000000000000000000000000009091041691810191909152935091505b600101613abd565b5050505050505050565b600181015473ffffffffffffffffffffffffffffffffffffffff163314612197576040517fb7ec028400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181015474010000000000000000000000000000000000000000900460ff16612197576040517fbcffbdde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b803560018110613a0c57600080fd5b803560ff81168114613a0c57600080fd5b801515811461219757600080fd5b60008060008060808587031215613d3857600080fd5b84359350613d4860208601613cf4565b9250613d5660408601613d03565b91506060850135613d6681613d14565b939692955090935050565b600060208284031215613d8357600080fd5b5035919050565b6000815180845260005b81811015613db057602081850181015186830182015201613d94565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061219757612197613dee565b613e3681613e1d565b9052565b600081518084526020808501945080840160005b83811015613e99578151805173ffffffffffffffffffffffffffffffffffffffff1688528301516bffffffffffffffffffffffff168388015260409096019590820190600101613e4e565b509495945050505050565b600082825180855260208086019550808260051b8401018186016000805b85811015613fb1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0878503018a52825160808151818752613f0682880182613d8a565b8389015173ffffffffffffffffffffffffffffffffffffffff908116898b01526040808601511515818b01526060958601518a8403878c01528051808552908c019689965091945091929091908b01905b80861015613f995786518051151583528c81015185168d8401528501516affffffffffffffffffffff1685830152958b01956001959095019490820190613f57565b509e8a019e9850505094870194505050600101613ec2565b509198975050505050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614061577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086840301895281516060815181865261402082870182613d8a565b91505085820151858203878701526140388282613d8a565b915050604080830151925061404c83613e1d565b94909401529783019790830190600101613fdc565b5090979650505050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614061578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018952815180518051151585528501511515858501528401516060604085018190526140e581860183613d8a565b9a86019a945050509083019060010161408b565b6000610160825181855261410f82860182613d8a565b915050602083015161412d602086018267ffffffffffffffff169052565b506040830151614143604086018261ffff169052565b50606083015161416b606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151614193608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08301516141a660a0860182613e2d565b5060c08301516141ce60c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e083015184820360e08601526141e68282613e3a565b91505061010080840151858303828701526142018382613ea4565b92505050610120808401518583038287015261421d8382613fbf565b925050506101408084015185830382870152614239838261406e565b9695505050505050565b60208152600061056060208301846140f9565b60008083601f84011261426857600080fd5b50813567ffffffffffffffff81111561428057600080fd5b6020830191508360208260051b850101111561429b57600080fd5b9250929050565b6000806000604084860312156142b757600080fd5b83359250602084013567ffffffffffffffff8111156142d557600080fd5b6142e186828701614256565b9497909650939450505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461219757600080fd5b8035613a0c816142ee565b60008060006060848603121561433057600080fd5b833561433b816142ee565b95602085013595506040909401359392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156143c3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526143b18583516140f9565b94509285019290850190600101614377565b5092979650505050505050565b60008083601f8401126143e257600080fd5b50813567ffffffffffffffff8111156143fa57600080fd5b60208301915083602082850101111561429b57600080fd5b60008060008060006060868803121561442a57600080fd5b85359450602086013567ffffffffffffffff8082111561444957600080fd5b61445589838a016143d0565b9096509450604088013591508082111561446e57600080fd5b818801915088601f83011261448257600080fd5b81358181111561449157600080fd5b8960206060830285010111156144a657600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561452f5761452f6144b9565b604052919050565b6000602080838503121561454a57600080fd5b823567ffffffffffffffff8082111561456257600080fd5b818501915085601f83011261457657600080fd5b813581811115614588576145886144b9565b8060051b91506145998483016144e8565b81815291830184019184810190888411156145b357600080fd5b938501935b838510156145d1578435825293850193908501906145b8565b98975050505050505050565b6000806000806000608086880312156145f557600080fd5b8535945061460560208701613d03565b935060408601356003811061461957600080fd5b9250606086013567ffffffffffffffff81111561463557600080fd5b614641888289016143d0565b969995985093965092949392505050565b60008060006040848603121561466757600080fd5b83359250602084013567ffffffffffffffff81111561468557600080fd5b6142e1868287016143d0565b6000806000606084860312156146a657600080fd5b833592506146b660208501613cf4565b91506146c460408501613d03565b90509250925092565b803567ffffffffffffffff81168114613a0c57600080fd5b60008060008060008060008060a0898b03121561470157600080fd5b883567ffffffffffffffff8082111561471957600080fd5b6147258c838d016143d0565b909a50985088915061473960208c016146cd565b975060408b013591508082111561474f57600080fd5b818b0191508b601f83011261476357600080fd5b81358181111561477257600080fd5b8c60208260061b850101111561478757600080fd5b602083019750955061479b60608c01614310565b945060808b01359150808211156147b157600080fd5b506147be8b828c01614256565b999c989b5096995094979396929594505050565b803561ffff81168114613a0c57600080fd5b600080604083850312156147f757600080fd5b82359150614807602084016147d2565b90509250929050565b6000806040838503121561482357600080fd5b82359150614807602084016146cd565b60018110613e3657613e36613dee565b608081016148518287614833565b60ff94909416602082015273ffffffffffffffffffffffffffffffffffffffff92831660408201529116606090910152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156148c757600080fd5b610560826147d2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115614912576149126148d0565b92915050565b6affffffffffffffffffffff8116811461219757600080fd5b60006060828403121561494357600080fd5b6040516060810181811067ffffffffffffffff82111715614966576149666144b9565b604052823561497481613d14565b81526020830135614984816142ee565b6020820152604083013561499781614918565b60408201529392505050565b600181811c908216806149b757607f821691505b602082108103612f6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f821115614a3a57600081815260208120601f850160051c81016020861015614a175750805b601f850160051c820191505b81811015614a3657828155600101614a23565b5050505b505050565b67ffffffffffffffff831115614a5757614a576144b9565b614a6b83614a6583546149a3565b836149f0565b6000601f841160018114614abd5760008515614a875750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b17835561076a565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015614b0c5786850135825560209485019460019092019101614aec565b5086821015614b47577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8135614b6481613d14565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811691151560ff1691821783556020840135614ba2816142ee565b74ffffffffffffffffffffffffffffffffffffffff008160081b1690507fffffffffffffffffffffff00000000000000000000000000000000000000000081848285161717855560408601359250614bf983614918565b921760a89190911b90911617905550565b600061ffff808316818103614c2157614c216148d0565b6001019392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8183526000602080850194508260005b85811015613e99578135614c9781613d14565b1515875281830135614ca8816142ee565b73ffffffffffffffffffffffffffffffffffffffff1687840152604082810135614cd181614918565b6affffffffffffffffffffff16908801526060968701969190910190600101614c84565b61ffff8816815260a060208201526000614d1360a08301888a614c2b565b8281036040840152614d26818789614c74565b91505073ffffffffffffffffffffffffffffffffffffffff808516606084015280841660808401525098975050505050505050565b6bffffffffffffffffffffffff8116811461219757600080fd5b600060208284031215614d8757600080fd5b813561056081614d5b565b600060208284031215614da457600080fd5b815161056081613d14565b6bffffffffffffffffffffffff818116838216019080821115610ea257610ea26148d0565b6040808252810183905260008460608301825b86811015614e1c578235614dfa81614d5b565b6bffffffffffffffffffffffff16825260209283019290910190600101614de7565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60ff87168152614e5586613e1d565b85602082015260a060408201526000614e7260a083018688614c2b565b73ffffffffffffffffffffffffffffffffffffffff94851660608401529290931660809091015295945050505050565b604081526000614eb6604083018587614c2b565b905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b60a08101614eea8288614833565b60ff95909516602082015273ffffffffffffffffffffffffffffffffffffffff93841660408201529183166060830152909116608090910152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614f5957614f596148d0565b5060010190565b600060208284031215614f7257600080fd5b8135610560816142ee565b8135614f88816142ee565b73ffffffffffffffffffffffffffffffffffffffff811690507fffffffffffffffffffffffff000000000000000000000000000000000000000081818454161783556020840135614fd881614d5b565b60a01b1617905550565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261501657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261505557600080fd5b83018035915067ffffffffffffffff82111561507057600080fd5b602001915060608102360382131561429b57600080fd5b60008383855260208086019550808560051b8301018460005b87811015614061577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301895281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc188360301811261510157600080fd5b870160408135615110816142ee565b73ffffffffffffffffffffffffffffffffffffffff16855281860135368390037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe101811261515d57600080fd5b90910185810191903567ffffffffffffffff81111561517b57600080fd5b60608102360383131561518d57600080fd5b818787015261519f8287018285614c74565b9b87019b9550505091840191506001016150a0565b60c0815260006151c860c083018b8d614c2b565b602067ffffffffffffffff8b1681850152604084830381860152828a845282840190508b935060005b8b81101561524b578435615204816142ee565b73ffffffffffffffffffffffffffffffffffffffff1682528484013561522981614d5b565b6bffffffffffffffffffffffff168285015293820193908201906001016151f1565b5073ffffffffffffffffffffffffffffffffffffffff8a16606087015273ffffffffffffffffffffffffffffffffffffffff8916608087015285810360a087015261529781888a615087565b9f9e505050505050505050505050505050565b600060ff821660ff81036152c0576152c06148d0565b60010192915050565b60ff861681526080602082015260006152e6608083018688614c2b565b73ffffffffffffffffffffffffffffffffffffffff948516604084015292909316606090910152949350505050565b67ffffffffffffffff818116838216019080821115610ea257610ea26148d0565b60006020828403121561534857600080fd5b813561056081614918565b60006020828403121561536557600080fd5b813561056081613d1456fea2646970667358221220b8a2212256819164fbdf19f68f38e53869ae66bae2753935d5c05955ce81ea1f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "params": {
          "_applicationIds": "Indexes of the applications to accept.",
          "_taskId": "Id of the task."
        }
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "params": {
          "_execute": "If the request should also be executed in this transaction.",
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "params": {
          "_metadata": "Metadata of your application.",
          "_reward": "Wanted rewards for completing the task.",
          "_taskId": "Id of the task."
        }
      },
      "cancelTask(uint256,string)": {
        "params": {
          "_explanation": "Why the task was cancelled. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createSubmission(uint256,string)": {
        "params": {
          "_metadata": "Metadata of the submission. (IPFS hash)",
          "_taskId": "Id of the task."
        }
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "params": {
          "_budget": "Maximum ERC20 rewards that can be earned by completing the task.",
          "_deadline": "Block timestamp at which the task expires if not completed.",
          "_manager": "Who will manage the task (become the manager).",
          "_metadata": "Metadata of the task. (IPFS hash)"
        },
        "returns": {
          "taskId": "Id of the newly created task."
        }
      },
      "editMetadata(uint256,string)": {
        "details": "This metadata update might change the task completely. Show a warning to people who applied before the change.",
        "params": {
          "_newMetadata": "New metadata of the task.",
          "_taskId": "Id of the task."
        }
      },
      "executeRequest(uint256,uint8,uint8)": {
        "params": {
          "_requestId": "Id of the request.",
          "_requestType": "What kind of request it is.",
          "_taskId": "Id of the task."
        }
      },
      "extendDeadline(uint256,uint64)": {
        "params": {
          "_extension": "How much to extend the deadline by.",
          "_taskId": "Id of the task."
        }
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "params": {
          "_executor": "The executor to fetch tasks of.",
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getManagingTasks(address,uint256,uint256)": {
        "params": {
          "_fromTaskId": "What taskId to start from. 0 for most recent task.",
          "_manager": "The manager to fetch tasks of.",
          "_max": "The maximum amount of tasks to return. 0 for no max."
        }
      },
      "getTask(uint256)": {
        "params": {
          "_taskId": "Id of the task."
        }
      },
      "getTasks(uint256[])": {
        "params": {
          "_taskIds": "Ids of the tasks."
        }
      },
      "increaseBudget(uint256,uint96[])": {
        "params": {
          "_increase": "How much to increase each tokens amount by.",
          "_taskId": "Id of the task."
        }
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "params": {
          "_feedback": "Reasoning of the reviewer. (IPFS hash)",
          "_judgement": "Outcome of the review.",
          "_submissionId": "Index of the submission that is reviewed.",
          "_taskId": "Id of the task."
        }
      },
      "takeTask(uint256,uint16)": {
        "params": {
          "_applicationId": "Index of application you made that has been accepted.",
          "_taskId": "Id of the task."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptApplications(uint256,uint16[])": {
        "notice": "Accept application to allow them to take the task."
      },
      "acceptRequest(uint256,uint8,uint8,bool)": {
        "notice": "Accepts a request, executing the proposed action."
      },
      "applyForTask(uint256,string,(bool,address,uint88)[])": {
        "notice": "Apply to take the task."
      },
      "cancelTask(uint256,string)": {
        "notice": "Cancels a task. This can be used to close a task and receive back the budget."
      },
      "createSubmission(uint256,string)": {
        "notice": "Create a submission."
      },
      "createTask(string,uint64,(address,uint96)[],address,(address,(bool,address,uint88)[])[])": {
        "notice": "Create a new task."
      },
      "editMetadata(uint256,string)": {
        "notice": "Edit the metadata of a task."
      },
      "executeRequest(uint256,uint8,uint8)": {
        "notice": "Exectued an accepted request, allows anyone to pay for the gas costs of the execution."
      },
      "extendDeadline(uint256,uint64)": {
        "notice": "Extend the deadline of a task."
      },
      "getExecutingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of an executor. Most recent ones first."
      },
      "getManagingTasks(address,uint256,uint256)": {
        "notice": "Retrieves all tasks of a manager. Most recent ones first."
      },
      "getTask(uint256)": {
        "notice": "Retrieves all task information by id."
      },
      "getTasks(uint256[])": {
        "notice": "Retrieves multiple tasks."
      },
      "increaseBudget(uint256,uint96[])": {
        "notice": "Increase the budget of the task."
      },
      "reviewSubmission(uint256,uint8,uint8,string)": {
        "notice": "Review a submission."
      },
      "takeTask(uint256,uint16)": {
        "notice": "Take the task after your application has been accepted."
      },
      "taskCount()": {
        "notice": "Retrieves the current amount of created tasks."
      },
      "taskStatistics()": {
        "notice": "Retrieves the current statistics of created tasks."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6858,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "taskCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6861,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "openTasks",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6863,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "takenTasks",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6865,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "successfulTasks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6871,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Task)6604_storage)"
      },
      {
        "astId": 6874,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "escrowImplementation",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6877,
        "contract": "contracts/Tasks/Tasks.sol:Tasks",
        "label": "disabler",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Escrow)6276": {
        "encoding": "inplace",
        "label": "contract Escrow",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5037": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(SubmissionJudgement)6533": {
        "encoding": "inplace",
        "label": "enum ITasks.SubmissionJudgement",
        "numberOfBytes": "1"
      },
      "t_enum(TaskState)6558": {
        "encoding": "inplace",
        "label": "enum ITasks.TaskState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint16,t_struct(Application)6511_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct ITasks.Application)",
        "numberOfBytes": "32",
        "value": "t_struct(Application)6511_storage"
      },
      "t_mapping(t_uint256,t_struct(Task)6604_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ITasks.Task)",
        "numberOfBytes": "32",
        "value": "t_struct(Task)6604_storage"
      },
      "t_mapping(t_uint8,t_struct(CancelTaskRequest)6554_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.CancelTaskRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(CancelTaskRequest)6554_storage"
      },
      "t_mapping(t_uint8,t_struct(ERC20Transfer)6490_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.ERC20Transfer)",
        "numberOfBytes": "32",
        "value": "t_struct(ERC20Transfer)6490_storage"
      },
      "t_mapping(t_uint8,t_struct(Reward)6497_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)6497_storage"
      },
      "t_mapping(t_uint8,t_struct(Submission)6541_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct ITasks.Submission)",
        "numberOfBytes": "32",
        "value": "t_struct(Submission)6541_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Application)6511_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Application",
        "members": [
          {
            "astId": 6499,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6501,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicant",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6503,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6505,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "rewardCount",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 6510,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint8,t_struct(Reward)6497_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(CancelTaskRequest)6554_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.CancelTaskRequest",
        "members": [
          {
            "astId": 6551,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "request",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Request)6548_storage"
          },
          {
            "astId": 6553,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "explanation",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ERC20Transfer)6490_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.ERC20Transfer",
        "members": [
          {
            "astId": 6487,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "tokenContract",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)5037"
          },
          {
            "astId": 6489,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)6548_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Request",
        "members": [
          {
            "astId": 6545,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "accepted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6547,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Reward)6497_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Reward",
        "members": [
          {
            "astId": 6492,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "nextToken",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6494,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "to",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6496,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "amount",
            "offset": 21,
            "slot": "0",
            "type": "t_uint88"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Submission)6541_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Submission",
        "members": [
          {
            "astId": 6535,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6537,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "feedback",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6540,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "judgement",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(SubmissionJudgement)6533"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Task)6604_storage": {
        "encoding": "inplace",
        "label": "struct ITasks.Task",
        "members": [
          {
            "astId": 6560,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "metadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6562,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "deadline",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 6565,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "escrow",
            "offset": 8,
            "slot": "1",
            "type": "t_contract(Escrow)6276"
          },
          {
            "astId": 6567,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6569,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "manager",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6572,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "state",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(TaskState)6558"
          },
          {
            "astId": 6575,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "executorApplication",
            "offset": 21,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 6577,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budgetCount",
            "offset": 23,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 6579,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applicationCount",
            "offset": 24,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 6581,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissionCount",
            "offset": 26,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 6583,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequestCount",
            "offset": 27,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 6588,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "budget",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint8,t_struct(ERC20Transfer)6490_storage)"
          },
          {
            "astId": 6593,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "applications",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint16,t_struct(Application)6511_storage)"
          },
          {
            "astId": 6598,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "submissions",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint8,t_struct(Submission)6541_storage)"
          },
          {
            "astId": 6603,
            "contract": "contracts/Tasks/Tasks.sol:Tasks",
            "label": "cancelTaskRequests",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint8,t_struct(CancelTaskRequest)6554_storage)"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}