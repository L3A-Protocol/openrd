{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Tasks/Escrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Escrow {\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n\r\n    address private owner;\r\n\r\n    function __Escrow_init() external {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n        \r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n}"
    },
    "contracts/Tasks/ITasks.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Escrow } from \"./Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotProposer();\r\n    error NotExecutor();\r\n\r\n    error RewardAboveBudget(uint8 index);\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n\r\n    event TaskCreated(uint256 taskId, address proposer, string metadata, uint64 deadline, ERC20Transfer[] budget);\r\n    event ApplicationCreated(uint256 taskId, uint16 applicationId, address applicant, string metadata, Reward[] reward);\r\n    event ApplicationsAccepted(uint256 taskId, uint16[] applications, address proposer);\r\n    event TaskTaken(uint256 taskId, uint16 applicationId, address applicant);\r\n    event SubmissionCreated(uint256 taskId, uint8 submissionId, address executor, string metadata);\r\n    event SubmissionReviewed(uint256 taskId, uint8 submissionId, address proposer, SubmissionJudgement judgement, string feedback);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to; // Might change this to index instead of address array, will do some gas testing\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param timestamp When the application has been made.\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the proposer.\r\n    /// @param reward How much rewards the applicant want for completion.\r\n    struct Application {\r\n        string metadata;\r\n        uint64 timestamp;\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 rewardCount;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        uint64 timestamp;\r\n        address applicant;\r\n        bool accepted;\r\n        Reward[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement { None, Accepted, Rejected }\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param timestamp When the submission has been made.\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param judgementTimestamp When the judgement has been made.\r\n    /// @param feedback A response from the proposer. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        uint64 timestamp;\r\n        SubmissionJudgement judgement;\r\n        uint64 judgementTimestamp;\r\n        string feedback;\r\n    }\r\n\r\n    enum RequestType { ChangeScope, DropExecutor, CancelTask }\r\n\r\n    /// @notice A container for a request to change the scope of a task.\r\n    /// @param accepted When the request was accepted (0 = not accepted)\r\n    /// @param metadata New task metadata. (IPFS hash)\r\n    /// @param timestamp When the request was made.\r\n    /// @param deadline New deadline for the task.\r\n    /// @param reward New reward for the executor of the task.\r\n    struct ChangeScopeRequest {\r\n        string metadata;\r\n        uint64 timestamp;\r\n        uint64 accepted;\r\n        uint64 deadline;\r\n        uint8 rewardCount;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainChangeScopeRequest {\r\n        string metadata;\r\n        uint64 timestamp;\r\n        uint64 accepted;\r\n        uint64 deadline;\r\n        Reward[] reward;\r\n    }\r\n\r\n    /// @notice A container for a request to drop the executor of a task.\r\n    /// @param accepted When the request was accepted (0 = not accepted)\r\n    /// @param explanation Why the executor should be dropped.\r\n    /// @param timestamp When the request was made.\r\n    struct DropExecutorRequest {\r\n        string explanation;\r\n        uint64 timestamp;\r\n        uint64 accepted;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param accepted When the request was accepted (0 = not accepted)\r\n    /// @param explanation Why the task should be cancelled.\r\n    /// @param timestamp When the request was made.\r\n    struct CancelTaskRequest {\r\n        string explanation;\r\n        uint64 timestamp;\r\n        uint64 accepted;\r\n    }\r\n\r\n    enum TaskState { Open, Taken, Closed }\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param proposer Who has created the task.\r\n    /// @param creationTimestamp When the task has been created.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param executorConfirmationTimestamp When the executor has confirmed to take the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        string metadata;\r\n\r\n        uint64 creationTimestamp;\r\n        uint64 executorConfirmationTimestamp;\r\n        uint64 deadline;\r\n\r\n        Escrow escrow;\r\n\r\n        address proposer;\r\n        TaskState state;\r\n        uint16 executorApplication;\r\n        uint8 budgetCount;\r\n        uint16 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 changeScopeRequestCount;\r\n        uint8 dropExecutorRequestCount;\r\n        uint8 cancelTaskRequestCount;\r\n\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint16 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => ChangeScopeRequest) changeScopeRequests;\r\n        mapping(uint8 => DropExecutorRequest) dropExecutorRequests;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint64 creationTimestamp;\r\n        uint64 executorConfirmationTimestamp;\r\n        uint16 executorApplication;\r\n        address proposer;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        OffChainChangeScopeRequest[] changeScopeRequests;\r\n        DropExecutorRequest[] dropExecutorRequests;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n    \r\n    /// @notice Retrieves the current statistics of created tasks.\r\n    function taskStatistics() external view returns (uint256 openTasks, uint256 takenTasks, uint256 successfulTasks);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) external view returns (OffChainTask memory);\r\n    \r\n    /// @notice Retrieves multiple tasks.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(\r\n        uint256[] calldata _taskIds\r\n    ) external view returns (OffChainTask[] memory);\r\n    \r\n    /// @notice Retrieves all tasks of a proposer. Most recent ones first.\r\n    /// @param _proposer The proposer to fetch tasks of.\r\n    /// @param _fromTaskId What taskId to start from.\r\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\r\n    function getProposingTasks(\r\n        address _proposer,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory);\r\n    \r\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\r\n    /// @param _executor The executor to fetch tasks of.\r\n    /// @param _fromTaskId What taskId to start from.\r\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\r\n    function getExecutingTasks(\r\n        address _executor,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget\r\n    ) external returns (uint256 taskId);\r\n    \r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint16 applicationId);\r\n    \r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applications Indexes of the applications to accept.\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applications\r\n    ) external;\r\n    \r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _application Index of application you made that has been accepted.\r\n    function takeTask(\r\n        uint256 _taskId,\r\n        uint16 _application\r\n    ) external;\r\n    \r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        string calldata _metadata\r\n    ) external returns (uint8 submissionId);\r\n    \r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submission Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submission,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Change the scope of the task. This updates the description, deadline and reward of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New description of the task. (IPFS hash)\r\n    /// @param _newDeadline New deadline of the task.\r\n    /// @param _newReward New reward of the task.\r\n    function changeScope(\r\n        uint256 _taskId,\r\n        string calldata _newMetadata,\r\n        uint64 _newDeadline,\r\n        Reward[] calldata _newReward\r\n    ) external returns (uint8 changeTaskRequestId);\r\n\r\n    /// @notice Drops the current executor of the task\r\n    /// @param _taskId Id of the task.\r\n    /// @param _explanation Why the executor should be dropped.\r\n    function dropExecutor(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 dropExecutorRequestId);\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\r\n    function cancelTask(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function acceptRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId\r\n    ) external;\r\n}"
    },
    "contracts/Tasks/Tasks.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { ITasks, IERC20, Escrow } from \"./ITasks.sol\";\r\nimport { Clones } from \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n\r\ncontract Tasks is ITasks {\r\n    /// @notice The incremental ID for tasks.\r\n    uint256 private taskCounter;\r\n\r\n    /// @notice Various statistics about total tasks.\r\n    uint256 private openTasks;\r\n    uint256 private takenTasks;\r\n    uint256 private successfulTasks;\r\n\r\n    /// @notice A mapping between task IDs and task information.\r\n    mapping(uint256 => Task) internal tasks;\r\n\r\n    /// @notice The base escrow contract that will be cloned for every task.\r\n    address private escrowImplementation;\r\n\r\n    constructor() {\r\n        escrowImplementation = address(new Escrow());\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function taskCount() external view returns (uint256) {\r\n        return taskCounter;\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function taskStatistics() external view returns (uint256, uint256, uint256) {\r\n        return (openTasks, takenTasks, successfulTasks);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) public view returns (OffChainTask memory offchainTask) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task = tasks[_taskId];\r\n        offchainTask.metadata = task.metadata;\r\n        offchainTask.deadline = task.deadline;\r\n        offchainTask.creationTimestamp = task.creationTimestamp;\r\n        offchainTask.executorConfirmationTimestamp = task.executorConfirmationTimestamp;\r\n        offchainTask.executorApplication = task.executorApplication;\r\n        offchainTask.proposer = task.proposer;\r\n        offchainTask.state = task.state;\r\n        offchainTask.escrow = task.escrow;\r\n\r\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\r\n        for (uint8 i; i < offchainTask.budget.length; ) {\r\n            offchainTask.budget[i] = task.budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        offchainTask.applications = new OffChainApplication[](task.applicationCount);\r\n        for (uint8 i; i < offchainTask.applications.length; ) {\r\n            Application storage application = task.applications[i];\r\n            offchainTask.applications[i].metadata = application.metadata;\r\n            offchainTask.applications[i].timestamp = application.timestamp;\r\n            offchainTask.applications[i].applicant = application.applicant;\r\n            offchainTask.applications[i].accepted = application.accepted;\r\n            offchainTask.applications[i].reward = new Reward[](application.rewardCount);\r\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\r\n                offchainTask.applications[i].reward[j] = application.reward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainTask.submissions = new Submission[](task.submissionCount);\r\n        for (uint8 i; i < offchainTask.submissions.length; ) {\r\n            offchainTask.submissions[i] = task.submissions[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainTask.changeScopeRequests = new OffChainChangeScopeRequest[](task.changeScopeRequestCount);\r\n        for (uint8 i; i < offchainTask.changeScopeRequests.length; ) {\r\n            offchainTask.changeScopeRequests[i].metadata = task.changeScopeRequests[i].metadata;\r\n            offchainTask.changeScopeRequests[i].accepted = task.changeScopeRequests[i].accepted;\r\n            offchainTask.changeScopeRequests[i].deadline = task.changeScopeRequests[i].deadline;\r\n            offchainTask.changeScopeRequests[i].reward = new Reward[](task.changeScopeRequests[i].rewardCount);\r\n            for (uint8 j; j < offchainTask.changeScopeRequests[i].reward.length; ) {\r\n                offchainTask.changeScopeRequests[i].reward[j] = task.changeScopeRequests[i].reward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainTask.dropExecutorRequests = new DropExecutorRequest[](task.dropExecutorRequestCount);\r\n        for (uint8 i; i < offchainTask.dropExecutorRequests.length; ) {\r\n            offchainTask.dropExecutorRequests[i] = task.dropExecutorRequests[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](task.cancelTaskRequestCount);\r\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\r\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function getTasks(\r\n        uint256[] memory _taskIds\r\n    ) public view returns (OffChainTask[] memory) {\r\n        OffChainTask[] memory offchainTasks = new OffChainTask[](_taskIds.length);\r\n        for (uint i; i < _taskIds.length; ) {\r\n            offchainTasks[i] = getTask(_taskIds[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return offchainTasks;\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function getProposingTasks(\r\n        address _proposer,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory) {\r\n        uint256 totalTasks = taskCounter;\r\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\r\n        uint256 proposerTasksCount;\r\n        if (_fromTaskId == 0) {\r\n            _fromTaskId = totalTasks - 1;\r\n        }\r\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\r\n            if (tasks[i].proposer == _proposer) {\r\n                taskIndexes[proposerTasksCount] = i;\r\n                unchecked {\r\n                    ++proposerTasksCount;\r\n                }\r\n                if (proposerTasksCount == _max) {\r\n                    // _max == 0 never triggering is on purpose\r\n                    break;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                --i;\r\n            }\r\n        }\r\n        // decrease length of array to match real entries\r\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, proposerTasksCount))) }\r\n        return getTasks(taskIndexes);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function getExecutingTasks(\r\n        address _executor,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory) {\r\n        uint256 totalTasks = taskCounter;\r\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\r\n        uint256 executorTasksCount;\r\n        if (_fromTaskId == 0) {\r\n            _fromTaskId = totalTasks - 1;\r\n        }\r\n        for (uint i = _fromTaskId; i != type(uint).max; ) {\r\n            if (tasks[i].state != TaskState.Open && tasks[i].applications[tasks[i].executorApplication].applicant == _executor) {\r\n                taskIndexes[executorTasksCount] = i;\r\n                unchecked {\r\n                    ++executorTasksCount;\r\n                }\r\n                if (executorTasksCount == _max) {\r\n                    // _max == 0 never triggering is on purpose\r\n                    break;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                --i;\r\n            }\r\n        }\r\n        // decrease length of array to match real entries\r\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))) }\r\n        return getTasks(taskIndexes);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget\r\n    ) external returns (uint256 taskId) {\r\n        unchecked {\r\n            taskId = taskCounter++;\r\n        }\r\n\r\n        Task storage task = tasks[taskId];\r\n        task.metadata = _metadata;\r\n        task.deadline = _deadline;\r\n        task.budgetCount = uint8(_budget.length);\r\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\r\n        escrow.__Escrow_init();\r\n        task.escrow = escrow;\r\n        for (uint8 i; i < _budget.length; ) {\r\n            _budget[i].tokenContract.transferFrom(msg.sender, address(escrow), _budget[i].amount);\r\n            task.budget[i] = _budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        task.creationTimestamp = uint64(block.timestamp);\r\n        task.proposer = msg.sender;\r\n\r\n        // Default values are already correct (save gas)\r\n        // task.state = TaskState.Open;\r\n        unchecked {\r\n            ++openTasks;\r\n        }\r\n\r\n        emit TaskCreated(taskId, msg.sender, _metadata, _deadline, _budget);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint16 applicationId) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n\r\n        Application storage application = task.applications[task.applicationCount];\r\n        unchecked {\r\n            applicationId = task.applicationCount++;\r\n        }\r\n        application.metadata = _metadata;\r\n        application.timestamp = uint64(block.timestamp);\r\n        application.applicant = msg.sender;\r\n        application.rewardCount = uint8(_reward.length);\r\n\r\n        uint8 j;\r\n        ERC20Transfer memory erc20Transfer = task.budget[0];\r\n        uint256 alreadyReserved;\r\n        for (uint8 i; i < uint8(_reward.length); ) {\r\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\r\n            unchecked {\r\n                alreadyReserved += _reward[i].amount;\r\n            }\r\n            if (alreadyReserved > erc20Transfer.amount) {\r\n                revert RewardAboveBudget(i);\r\n            }\r\n\r\n            application.reward[i] = _reward[i];\r\n\r\n            if (_reward[i].nextToken) {\r\n                alreadyReserved = 0;\r\n                unchecked {\r\n                    erc20Transfer = task.budget[++j];\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit ApplicationCreated(_taskId, applicationId, msg.sender, _metadata, _reward);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applications\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n        if (task.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n\r\n        for (uint i; i < _applications.length; ) {\r\n            if (_applications[i] >= task.applicationCount) {\r\n                revert ApplicationDoesNotExist();\r\n            }\r\n            \r\n            task.applications[_applications[i]].accepted = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit ApplicationsAccepted(_taskId, _applications, msg.sender);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function takeTask(\r\n        uint256 _taskId,\r\n        uint16 _application\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n        if (_application >= task.applicationCount) {\r\n            revert ApplicationDoesNotExist();\r\n        }\r\n\r\n        Application storage application_ = task.applications[_application];\r\n        if (application_.applicant != msg.sender) {\r\n            revert NotYourApplication();\r\n        }\r\n        if (!application_.accepted) {\r\n            revert ApplicationNotAccepted();\r\n        }\r\n\r\n        task.executorApplication = _application;\r\n        task.executorConfirmationTimestamp = uint64(block.timestamp);\r\n\r\n        task.state = TaskState.Taken;\r\n        unchecked {\r\n            --openTasks;\r\n            ++takenTasks;\r\n        }\r\n\r\n        emit TaskTaken(_taskId, _application, msg.sender);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        string calldata _metadata\r\n    ) external returns (uint8 submissionId) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task.applications[task.executorApplication].applicant != msg.sender) {\r\n            revert NotExecutor();\r\n        }\r\n\r\n        Submission storage submission = task.submissions[task.submissionCount];\r\n        unchecked { \r\n            submissionId = task.submissionCount++;\r\n        }\r\n        submission.metadata = _metadata;\r\n        submission.timestamp = uint64(block.timestamp);\r\n\r\n        emit SubmissionCreated(_taskId, submissionId, msg.sender, _metadata);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submission,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n        if (_submission >= task.submissionCount) {\r\n            revert SubmissionDoesNotExist();\r\n        }\r\n\r\n        Submission storage submission_ = task.submissions[_submission];\r\n        if (submission_.judgement != SubmissionJudgement.None) {\r\n            revert SubmissionAlreadyJudged();\r\n        }\r\n        // You can judge with judgement None, to give feedback without any judgement yet\r\n        // You can then call this function again to overwrite the feedback (kinda like a draft)\r\n        submission_.judgement = _judgement;\r\n        submission_.judgementTimestamp = uint64(block.timestamp);\r\n        submission_.feedback = _feedback;\r\n\r\n        if (_judgement == SubmissionJudgement.Accepted) {\r\n            Application storage executor = task.applications[task.executorApplication];\r\n            address proposer = task.proposer;\r\n            Escrow escrow = task.escrow;\r\n\r\n            uint8 j;\r\n            ERC20Transfer memory erc20Transfer = task.budget[0];\r\n            uint8 rewardCount = executor.rewardCount;\r\n            for (uint8 i; i < rewardCount; ) {\r\n                Reward memory reward = executor.reward[i];\r\n                escrow.transfer(erc20Transfer.tokenContract, executor.applicant, reward.amount);\r\n                unchecked {\r\n                    erc20Transfer.amount -= reward.amount;\r\n                }\r\n\r\n                if (reward.nextToken) {\r\n                    if (erc20Transfer.amount > 0) {\r\n                        escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\r\n                    }\r\n\r\n                    unchecked {\r\n                        erc20Transfer = task.budget[++j];\r\n                    }\r\n                }\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n            uint8 budgetCount = task.budgetCount;\r\n            while (j < budgetCount) {\r\n                escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\r\n                \r\n                unchecked {\r\n                    erc20Transfer = task.budget[++j];\r\n                }\r\n            }\r\n\r\n            task.state = TaskState.Closed;\r\n            unchecked {\r\n                --takenTasks;\r\n                ++successfulTasks;\r\n            }\r\n        }\r\n\r\n        emit SubmissionReviewed(_taskId, _submission, msg.sender, _judgement, _feedback);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function changeScope(\r\n        uint256 _taskId,\r\n        string calldata _newMetadata,\r\n        uint64 _newDeadline,\r\n        Reward[] calldata _newReward\r\n    ) external returns (uint8 changeTaskRequestId) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n\r\n        ChangeScopeRequest storage request = task.changeScopeRequests[task.changeScopeRequestCount];\r\n        request.metadata = _newMetadata;\r\n        request.timestamp = uint64(block.timestamp);\r\n        request.deadline = _newDeadline;\r\n        request.rewardCount = uint8(_newReward.length);\r\n\r\n        uint8 j;\r\n        ERC20Transfer memory erc20Transfer = task.budget[0];\r\n        uint256 needed;\r\n        for (uint8 i; i < uint8(_newReward.length); ) {\r\n            unchecked {\r\n                needed += _newReward[i].amount;\r\n            }\r\n\r\n            request.reward[i] = _newReward[i];\r\n\r\n            if (_newReward[i].nextToken) {\r\n                if (needed > erc20Transfer.amount) {\r\n                    // Excisting budget in escrow doesnt cover the new reward\r\n                    erc20Transfer.tokenContract.transferFrom(msg.sender, address(task.escrow), needed - erc20Transfer.amount);\r\n                }\r\n\r\n                needed = 0;\r\n                unchecked {\r\n                    erc20Transfer = task.budget[++j];\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        unchecked {\r\n            return task.changeScopeRequestCount++;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function dropExecutor(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 dropExecutorRequestId) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n\r\n        DropExecutorRequest storage request = task.dropExecutorRequests[task.dropExecutorRequestCount];\r\n        request.explanation = _explanation;\r\n        request.timestamp = uint64(block.timestamp);\r\n        unchecked {\r\n            return task.dropExecutorRequestCount++;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function cancelTask(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 cancelTaskRequestId) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task = tasks[_taskId];\r\n        if (task.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n\r\n        if (task.state == TaskState.Taken) {\r\n            if (task.deadline > uint64(block.timestamp)) {\r\n                // Deadline has not passed yet\r\n                CancelTaskRequest storage request = task.cancelTaskRequests[task.cancelTaskRequestCount];\r\n                request.explanation = _explanation;\r\n                request.timestamp = uint64(block.timestamp);\r\n                unchecked {\r\n                    return task.cancelTaskRequestCount++;\r\n                }\r\n            }\r\n        }\r\n        else if (task.state != TaskState.Open) {\r\n            revert TaskClosed();\r\n        }\r\n\r\n        _refundProposer(task);\r\n        // Max means no request\r\n        return type(uint8).max;\r\n    }\r\n\r\n    function acceptRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task = tasks[_taskId];\r\n        if (task.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task.applications[task.executorApplication].applicant != msg.sender) {\r\n            revert NotExecutor();\r\n        }\r\n        \r\n        if (_requestType == RequestType.ChangeScope) {\r\n            if (_requestId >= task.changeScopeRequestCount) {\r\n                revert RequestDoesNotExist();\r\n            }\r\n\r\n            ChangeScopeRequest storage request = task.changeScopeRequests[_requestId];\r\n            if (request.accepted != 0) {\r\n                revert RequestAlreadyAccepted();\r\n            }\r\n\r\n            task.metadata = request.metadata;\r\n            task.deadline = request.deadline;\r\n            Application storage executor = task.applications[task.executorApplication];\r\n            uint8 rewardCount = request.rewardCount;\r\n            executor.rewardCount = rewardCount;\r\n            for (uint8 i; i < rewardCount; ) {\r\n                executor.reward[i] = request.reward[i];\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n\r\n            request.accepted = uint64(block.timestamp);\r\n        } else if (_requestType == RequestType.DropExecutor) {\r\n            if (_requestId >= task.dropExecutorRequestCount) {\r\n                revert RequestDoesNotExist();\r\n            }\r\n            \r\n            DropExecutorRequest storage request = task.dropExecutorRequests[_requestId];\r\n            if (request.accepted != 0) {\r\n                revert RequestAlreadyAccepted();\r\n            }\r\n\r\n            task.state = TaskState.Open;\r\n            unchecked {\r\n                --takenTasks;\r\n                ++openTasks;\r\n            }\r\n\r\n            request.accepted = uint64(block.timestamp);\r\n        } else { // if (_requestType == RequestType.CancelTask) {\r\n            if (_requestId >= task.cancelTaskRequestCount) {\r\n                revert RequestDoesNotExist();\r\n            }\r\n            \r\n            CancelTaskRequest storage request = task.cancelTaskRequests[_requestId];\r\n            if (request.accepted != 0) {\r\n                revert RequestAlreadyAccepted();\r\n            }\r\n\r\n            _refundProposer(task);\r\n\r\n            request.accepted = uint64(block.timestamp);\r\n        }\r\n    }\r\n    \r\n    function _refundProposer(Task storage task) internal {\r\n        uint8 budgetCount = task.budgetCount;\r\n        address proposer = task.proposer;\r\n        Escrow escrow = task.escrow;\r\n        for (uint8 i; i < budgetCount; ) {\r\n            ERC20Transfer memory erc20Transfer = task.budget[i];\r\n            escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (task.state == TaskState.Open) {\r\n            unchecked {\r\n                --openTasks;\r\n            }\r\n        } else if (task.state == TaskState.Taken) {\r\n            unchecked {\r\n                --takenTasks;\r\n            }\r\n        }\r\n        task.state = TaskState.Closed;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}