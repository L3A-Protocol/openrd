{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Tasks/Escrow.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Escrow {\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n\r\n    address private owner;\r\n\r\n    function __Escrow_init() external {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n        \r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n}"
    },
    "contracts/Tasks/ITasks.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Escrow } from \"./Escrow.sol\";\r\n\r\n/*\r\n  Some of the functionality in this contract will be removed in the next version.\r\n  This functionality will be provided by off-chain indexing instead.\r\n  Therefore this functionality might be implemented in a more dirty way to make it easier to remove.\r\n  This is true for:\r\n  - taskStatistics\r\n  - getManagingTasks\r\n  - getExecutingTasks\r\n  - manager and executor/applicant in all events (except first introduction)\r\n\r\n  Seperation of manager and creator is also a recent change. The frontend will currently use creator == manager.\r\n  Hence there is also no getCreatedTasks.\r\n*/\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotManager();\r\n    error NotExecutor();\r\n\r\n    error RewardAboveBudget();\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n    error RequestNotAccepted();\r\n    error RequestAlreadyExecuted();\r\n\r\n    event TaskCreated(uint256 taskId, string metadata, uint64 deadline, ERC20Transfer[] budget, address creator, address manager, PreapprovedApplication[] preapproved);\r\n    event ApplicationCreated(uint256 taskId, uint16 applicationId, string metadata, Reward[] reward, address manager, address applicant);\r\n    event ApplicationAccepted(uint256 taskId, uint16 applicationId, address manager, address applicant);\r\n    event TaskTaken(uint256 taskId, uint16 applicationId, address manager, address executor);\r\n    event SubmissionCreated(uint256 taskId, uint8 submissionId, string metadata, address manager, address executor);\r\n    event SubmissionReviewed(uint256 taskId, uint8 submissionId, SubmissionJudgement judgement, string feedback, address manager, address executor);\r\n    event TaskCompleted(uint256 taskId, address manager, address executor);\r\n\r\n    event CancelTaskRequested(uint256 taskId, uint8 requestId, string explanation, address manager, address executor);\r\n    event TaskCancelled(uint256 taskId, address manager, address executor);\r\n    event RequestAccepted(uint256 taskId, RequestType requestType, uint8 requestId, address manager, address executor);\r\n    event RequestExecuted(uint256 taskId, RequestType requestType, uint8 requestId, address by, address manager, address executor);\r\n\r\n    event DeadlineExtended(uint256 taskId, uint64 extension, address manager, address executor);\r\n    event BudgetIncreased(uint256 taskId, uint96[] increase, address manager);\r\n    event MetadataEditted(uint256 taskId, string newMetadata, address manager);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to;\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the manager.\r\n    /// @param reward How much rewards the applicant wants for completion.\r\n    struct Application {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 rewardCount;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        Reward[] reward;\r\n    }\r\n\r\n    /// @notice For approving people on task creation (they are not required to make an application)\r\n    struct PreapprovedApplication {\r\n        address applicant;\r\n        Reward[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement { None, Accepted, Rejected }\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param feedback A response from the manager. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        string feedback;\r\n        SubmissionJudgement judgement;\r\n    }\r\n\r\n    enum RequestType { CancelTask }\r\n\r\n    /// @notice A container for shared request information.\r\n    /// @param accepted If the request was accepted.\r\n    /// @param executed If the request was executed.\r\n    struct Request {\r\n        bool accepted;\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param request Request information.\r\n    /// @param explanation Why the task should be cancelled.\r\n    struct CancelTaskRequest {\r\n        Request request;\r\n        string explanation;\r\n    }\r\n\r\n    enum TaskState { Open, Taken, Closed }\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param manager Who has created the task.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    /// @dev Storage blocks seperated by newlines.\r\n    struct Task {\r\n        string metadata;\r\n\r\n        uint64 deadline;\r\n        Escrow escrow;\r\n\r\n        address creator;\r\n\r\n        address manager;\r\n        TaskState state;\r\n        /// @notice To prevent redundant storage, used an id heres\r\n        uint16 executorApplication;\r\n        uint8 budgetCount;\r\n        uint16 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 cancelTaskRequestCount;\r\n\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint16 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint16 executorApplication;\r\n        address creator;\r\n        address manager;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n    \r\n    /// @notice Retrieves the current statistics of created tasks.\r\n    function taskStatistics() external view returns (uint256 openTasks, uint256 takenTasks, uint256 successfulTasks);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) external view returns (OffChainTask memory);\r\n    \r\n    /// @notice Retrieves multiple tasks.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(\r\n        uint256[] calldata _taskIds\r\n    ) external view returns (OffChainTask[] memory);\r\n    \r\n    /// @notice Retrieves all tasks of a manager. Most recent ones first.\r\n    /// @param _manager The manager to fetch tasks of.\r\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\r\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\r\n    function getManagingTasks(\r\n        address _manager,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory);\r\n    \r\n    /// @notice Retrieves all tasks of an executor. Most recent ones first.\r\n    /// @param _executor The executor to fetch tasks of.\r\n    /// @param _fromTaskId What taskId to start from. 0 for most recent task.\r\n    /// @param _max The maximum amount of tasks to return. 0 for no max.\r\n    function getExecutingTasks(\r\n        address _executor,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param _manager Who will manage the task (become the manager).\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget,\r\n        address _manager,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external returns (uint256 taskId);\r\n    \r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint16 applicationId);\r\n    \r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationIds Indexes of the applications to accept.\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applicationIds\r\n    ) external;\r\n    \r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Index of application you made that has been accepted.\r\n    function takeTask(\r\n        uint256 _taskId,\r\n        uint16 _applicationId\r\n    ) external;\r\n    \r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        string calldata _metadata\r\n    ) external returns (uint8 submissionId);\r\n    \r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submissionId Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\r\n    function cancelTask(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    /// @param _execute If the request should also be executed in this transaction.\r\n    function acceptRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId,\r\n        bool _execute\r\n    ) external;\r\n\r\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function executeRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId\r\n    ) external;\r\n\r\n    /// @notice Extend the deadline of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _extension How much to extend the deadline by.\r\n    function extendDeadline(\r\n        uint256 _taskId,\r\n        uint64 _extension\r\n    ) external;\r\n\r\n    /// @notice Increase the budget of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    function increaseBudget(\r\n        uint256 _taskId,\r\n        uint96[] calldata _increase\r\n    ) external;\r\n\r\n    /// @notice Edit the metadata of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New metadata of the task.\r\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\r\n    function editMetadata(\r\n        uint256 _taskId,\r\n        string calldata _newMetadata\r\n    ) external;\r\n}"
    },
    "contracts/Tasks/Tasks.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport { ITasks, IERC20, Escrow } from \"./ITasks.sol\";\r\nimport { TasksEnsure } from \"./TasksEnsure.sol\";\r\nimport { TasksUtils } from \"./TasksUtils.sol\";\r\nimport { Context } from \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport { Clones } from \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n\r\ncontract Tasks is Context, TasksEnsure, TasksUtils {\r\n    /// @notice The incremental ID for tasks.\r\n    uint256 private taskCounter;\r\n\r\n    /// @notice Various statistics about total tasks.\r\n    uint256 private openTasks;\r\n    uint256 private takenTasks;\r\n    uint256 private successfulTasks;\r\n\r\n    /// @notice A mapping between task IDs and task information.\r\n    mapping(uint256 => Task) internal tasks;\r\n\r\n    /// @notice The base escrow contract that will be cloned for every task.\r\n    address private escrowImplementation;\r\n\r\n    constructor() {\r\n        escrowImplementation = address(new Escrow());\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function taskCount() external view returns (uint256) {\r\n        return taskCounter;\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function taskStatistics() external view returns (uint256 open, uint256 taken, uint256 successful) {\r\n        (open, taken, successful) = (openTasks, takenTasks, successfulTasks);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) public view returns (OffChainTask memory offchainTask) {\r\n        Task storage task = _getTask(_taskId);\r\n        offchainTask = _toOffchainTask(task);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function getTasks(\r\n        uint256[] memory _taskIds\r\n    ) public view returns (OffChainTask[] memory) {\r\n        OffChainTask[] memory offchainTasks = new OffChainTask[](_taskIds.length);\r\n        for (uint i; i < _taskIds.length; ) {\r\n            offchainTasks[i] = getTask(_taskIds[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return offchainTasks;\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function getManagingTasks(\r\n        address _manager,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory) {\r\n        uint256 totalTasks = taskCounter;\r\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\r\n        uint256 managerTasksCount;\r\n        if (_fromTaskId == 0) {\r\n            _fromTaskId = totalTasks - 1;\r\n        }\r\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\r\n            if (tasks[i].manager == _manager) {\r\n                taskIndexes[managerTasksCount] = i;\r\n                unchecked {\r\n                    ++managerTasksCount;\r\n                }\r\n                if (managerTasksCount == _max) {\r\n                    // _max == 0 never triggering is on purpose\r\n                    break;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                --i;\r\n            }\r\n        }\r\n        // decrease length of array to match real entries\r\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, managerTasksCount))) }\r\n        return getTasks(taskIndexes);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function getExecutingTasks(\r\n        address _executor,\r\n        uint256 _fromTaskId,\r\n        uint256 _max\r\n    ) external view returns (OffChainTask[] memory) {\r\n        uint256 totalTasks = taskCounter;\r\n        uint256[] memory taskIndexes = new uint256[](totalTasks);\r\n        uint256 executorTasksCount;\r\n        if (_fromTaskId == 0) {\r\n            _fromTaskId = totalTasks - 1;\r\n        }\r\n        for (uint256 i = _fromTaskId; i != type(uint256).max; ) {\r\n            if (tasks[i].state != TaskState.Open && tasks[i].applications[tasks[i].executorApplication].applicant == _executor) {\r\n                taskIndexes[executorTasksCount] = i;\r\n                unchecked {\r\n                    ++executorTasksCount;\r\n                }\r\n                if (executorTasksCount == _max) {\r\n                    // _max == 0 never triggering is on purpose\r\n                    break;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                --i;\r\n            }\r\n        }\r\n        // decrease length of array to match real entries\r\n        assembly { mstore(taskIndexes, sub(mload(taskIndexes), sub(totalTasks, executorTasksCount))) }\r\n        return getTasks(taskIndexes);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget,\r\n        address _manager,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external returns (uint256 taskId) {\r\n        taskId = taskCounter++;\r\n\r\n        Task storage task = tasks[taskId];\r\n        task.metadata = _metadata;\r\n        task.deadline = _deadline;\r\n        task.budgetCount = uint8(_budget.length);\r\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\r\n        escrow.__Escrow_init();\r\n        task.escrow = escrow;\r\n        for (uint8 i; i < uint8(_budget.length); ) {\r\n            _budget[i].tokenContract.transferFrom(_msgSender(), address(escrow), _budget[i].amount);\r\n            task.budget[i] = _budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        task.manager = _manager;\r\n        task.creator = _msgSender();\r\n\r\n        // Default values are already correct (save gas)\r\n        // task.state = TaskState.Open;\r\n        unchecked {\r\n            // Impossible to overflow due to openTasks <= taskCounter\r\n            ++openTasks;\r\n        }\r\n\r\n        // Gas optimization\r\n        if (_preapprove.length > 0) {\r\n            task.applicationCount = uint16(_preapprove.length);\r\n            for (uint16 i; i < uint16(_preapprove.length); ) {\r\n                Application storage application = task.applications[i];\r\n                application.applicant = _preapprove[i].applicant;\r\n                application.accepted = true;\r\n                _setRewardBellowBudget(task, application, _preapprove[i].reward);\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit TaskCreated(taskId, _metadata, _deadline, _budget, _msgSender(), _manager, _preapprove);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint16 applicationId) {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsOpen(task);\r\n\r\n        Application storage application = task.applications[task.applicationCount];\r\n        application.metadata = _metadata;\r\n        application.applicant = _msgSender();\r\n        application.rewardCount = uint8(_reward.length);\r\n        for (uint8 i; i < uint8(_reward.length); ) {\r\n            application.reward[i] = _reward[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        applicationId = task.applicationCount++;\r\n\r\n        emit ApplicationCreated(_taskId, applicationId, _metadata, _reward, task.manager, _msgSender());\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applicationIds\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsOpen(task);\r\n        _ensureSenderIsManager(task);\r\n\r\n        for (uint i; i < _applicationIds.length; ) {\r\n            _ensureApplicationExists(task, _applicationIds[i]);\r\n            \r\n            Application storage application = task.applications[_applicationIds[i]];\r\n            application.accepted = true;\r\n            _increaseBudgetToReward(task, application.rewardCount, application.reward);\r\n            emit ApplicationAccepted(_taskId, _applicationIds[i], _msgSender(), application.applicant);\r\n            \r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function takeTask(\r\n        uint256 _taskId,\r\n        uint16 _applicationId\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsOpen(task);\r\n        _ensureApplicationExists(task, _applicationId);\r\n\r\n        Application storage application = task.applications[_applicationId];\r\n        _ensureSenderIsApplicant(application);\r\n        _ensureApplicationIsAccepted(application);\r\n\r\n        task.executorApplication = _applicationId;\r\n\r\n        task.state = TaskState.Taken;\r\n        unchecked {\r\n            --openTasks;\r\n            ++takenTasks;\r\n        }\r\n\r\n        emit TaskTaken(_taskId, _applicationId, task.manager, _msgSender());\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        string calldata _metadata\r\n    ) external returns (uint8 submissionId) {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsTaken(task);\r\n        _ensureSenderIsExecutor(task);\r\n\r\n        Submission storage submission = task.submissions[task.submissionCount];\r\n        submission.metadata = _metadata;\r\n        submissionId = task.submissionCount++;\r\n\r\n        emit SubmissionCreated(_taskId, submissionId, _metadata, task.manager, _msgSender());\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsTaken(task);\r\n        _ensureSenderIsManager(task);\r\n        _ensureSubmissionExists(task, _submissionId);\r\n\r\n        Submission storage submission = task.submissions[_submissionId];\r\n        _ensureSubmissionNotJudged(submission);\r\n        submission.judgement = _judgement;\r\n        submission.feedback = _feedback;\r\n\r\n        if (_judgement == SubmissionJudgement.Accepted) {\r\n            _payoutTask(task);\r\n            unchecked {\r\n                --takenTasks;\r\n                ++successfulTasks;\r\n            }\r\n\r\n            emit TaskCompleted(_taskId, _msgSender(), task.applications[task.executorApplication].applicant);\r\n        }\r\n\r\n        emit SubmissionReviewed(_taskId, _submissionId, _judgement, _feedback, _msgSender(), task.applications[task.executorApplication].applicant);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function cancelTask(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 cancelTaskRequestId) {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureSenderIsManager(task);\r\n\r\n        _ensureTaskNotClosed(task);\r\n\r\n        if (task.state == TaskState.Open || task.deadline <= uint64(block.timestamp)) {\r\n            // Task is open or deadline past\r\n            _refundCreator(task);\r\n            if (task.state == TaskState.Open) {\r\n                unchecked {\r\n                    --openTasks;\r\n                }\r\n            } else if (task.state == TaskState.Taken) {\r\n                unchecked {\r\n                    --takenTasks;\r\n                }\r\n            }\r\n            emit TaskCancelled(_taskId, _msgSender(), task.state == TaskState.Open ? address(0) : task.applications[task.executorApplication].applicant);\r\n            // Max means no request\r\n            cancelTaskRequestId = type(uint8).max;\r\n        }\r\n        else {\r\n            // Task is taken and deadline has not past\r\n            CancelTaskRequest storage request = task.cancelTaskRequests[task.cancelTaskRequestCount];\r\n            request.explanation = _explanation;\r\n            cancelTaskRequestId = task.cancelTaskRequestCount++;\r\n\r\n            emit CancelTaskRequested(_taskId, cancelTaskRequestId, _explanation, _msgSender(), task.applications[task.executorApplication].applicant);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function acceptRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId,\r\n        bool _execute\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsTaken(task);\r\n        _ensureSenderIsExecutor(task);\r\n        \r\n        if (_requestType == RequestType.CancelTask) {\r\n            _ensureCancelTaskRequestExists(task, _requestId);\r\n            \r\n            CancelTaskRequest storage cancelTaskRequest = task.cancelTaskRequests[_requestId];\r\n            _ensureRequestNotAccepted(cancelTaskRequest.request);\r\n\r\n            if (_execute) {\r\n                // use executeRequest in the body instead? (more gas due to all the checks, but less code duplication)\r\n                _refundCreator(task);\r\n                unchecked {\r\n                    --takenTasks;\r\n                }\r\n                emit TaskCancelled(_taskId, task.manager, _msgSender());\r\n                cancelTaskRequest.request.executed = true;\r\n            }\r\n\r\n            cancelTaskRequest.request.accepted = true;\r\n        }\r\n\r\n        emit RequestAccepted(_taskId, _requestType, _requestId, task.manager, _msgSender());\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function executeRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureTaskIsTaken(task);\r\n        \r\n        if (_requestType == RequestType.CancelTask) {\r\n            _ensureCancelTaskRequestExists(task, _requestId);\r\n            \r\n            CancelTaskRequest storage cancelTaskRequest = task.cancelTaskRequests[_requestId];\r\n            _ensureRequestAccepted(cancelTaskRequest.request);\r\n            _ensureRequestNotExecuted(cancelTaskRequest.request);\r\n\r\n            _refundCreator(task);\r\n            unchecked {\r\n                --takenTasks;\r\n            }\r\n            emit TaskCancelled(_taskId, task.manager, task.applications[task.executorApplication].applicant);\r\n            cancelTaskRequest.request.executed = true;\r\n        }\r\n\r\n        emit RequestExecuted(_taskId, _requestType, _requestId, _msgSender(), task.manager, task.applications[task.executorApplication].applicant);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function extendDeadline(\r\n        uint256 _taskId,\r\n        uint64 _extension\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureSenderIsManager(task);\r\n\r\n        _ensureTaskNotClosed(task);\r\n\r\n        task.deadline += _extension;\r\n\r\n        emit DeadlineExtended(_taskId, _extension, _msgSender(), task.state == TaskState.Open ? address(0) : task.applications[task.executorApplication].applicant);\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function increaseBudget(\r\n        uint256 _taskId,\r\n        uint96[] calldata _increase\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureSenderIsManager(task);\r\n\r\n        _ensureTaskIsOpen(task);\r\n\r\n        for (uint8 i; i < uint8(_increase.length); ) {\r\n            ERC20Transfer storage transfer = task.budget[i];\r\n            transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), _increase[i]);\r\n            transfer.amount += _increase[i];\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit BudgetIncreased(_taskId, _increase, _msgSender());\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function editMetadata(\r\n        uint256 _taskId,\r\n        string calldata _newMetadata\r\n    ) external {\r\n        Task storage task = _getTask(_taskId);\r\n        _ensureSenderIsManager(task);\r\n\r\n        _ensureTaskIsOpen(task);\r\n\r\n        task.metadata = _newMetadata;\r\n        emit MetadataEditted(_taskId, _newMetadata, _msgSender());\r\n    }\r\n\r\n    function _getTask(uint256 _taskId) internal view returns (Task storage task) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        task = tasks[_taskId];\r\n    }\r\n}"
    },
    "contracts/Tasks/TasksEnsure.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport { ITasks, Escrow } from \"./ITasks.sol\";\r\nimport { Context } from \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/*\r\n  Functions to ensure a certain precondition is met.\r\n*/\r\nabstract contract TasksEnsure is ITasks, Context {\r\n    function _ensureTaskIsOpen(Task storage task) internal view {\r\n        if (task.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n    }\r\n\r\n    function _ensureTaskIsTaken(Task storage task) internal view {\r\n        if (task.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n    }\r\n\r\n    function _ensureTaskNotClosed(Task storage task) internal view {\r\n        if (task.state == TaskState.Closed) {\r\n            revert TaskClosed();\r\n        }\r\n    }\r\n    \r\n    function _ensureSenderIsManager(Task storage task) internal view {\r\n        if (task.manager != _msgSender()) {\r\n            revert NotManager();\r\n        }\r\n    }\r\n\r\n    function _ensureApplicationExists(Task storage task, uint16 _applicationId) internal view {\r\n        if (_applicationId >= task.applicationCount) {\r\n            revert ApplicationDoesNotExist();\r\n        }\r\n    }\r\n\r\n    function _ensureSubmissionExists(Task storage task, uint8 _submissionId) internal view {\r\n        if (_submissionId >= task.submissionCount) {\r\n            revert SubmissionDoesNotExist();\r\n        }\r\n    }\r\n\r\n    function _ensureSenderIsApplicant(Application storage application) internal view {\r\n        if (application.applicant != _msgSender()) {\r\n            revert NotYourApplication();\r\n        }\r\n    }\r\n\r\n    function _ensureApplicationIsAccepted(Application storage application) internal view {\r\n        if (!application.accepted) {\r\n            revert ApplicationNotAccepted();\r\n        }\r\n    }\r\n\r\n    function _ensureSubmissionNotJudged(Submission storage submission) internal view {\r\n        if (submission.judgement != SubmissionJudgement.None) {\r\n            revert SubmissionAlreadyJudged();\r\n        }\r\n    }\r\n\r\n    ///@dev Should only be called is the task is not open!\r\n    function _ensureSenderIsExecutor(Task storage task) internal view {\r\n        if (task.applications[task.executorApplication].applicant != _msgSender()) {\r\n            revert NotExecutor();\r\n        }\r\n    }\r\n\r\n    function _ensureCancelTaskRequestExists(Task storage task, uint8 _requestId) internal view {\r\n        if (_requestId >= task.cancelTaskRequestCount) {\r\n            revert RequestDoesNotExist();\r\n        }\r\n    }\r\n\r\n    function _ensureRequestNotAccepted(Request storage request) internal view {\r\n        if (request.accepted) {\r\n            revert RequestAlreadyAccepted();\r\n        }\r\n    }\r\n\r\n    function _ensureRequestAccepted(Request storage request) internal view {\r\n        if (!request.accepted) {\r\n            revert RequestNotAccepted();\r\n        }\r\n    }\r\n\r\n    function _ensureRequestNotExecuted(Request storage request) internal view {\r\n        if (request.executed) {\r\n            revert RequestAlreadyExecuted();\r\n        }\r\n    }\r\n}"
    },
    "contracts/Tasks/TasksUtils.sol": {
      "content": "// SPDX-License-Identifier: None\r\npragma solidity ^0.8.0;\r\n\r\nimport { ITasks, Escrow } from \"./ITasks.sol\";\r\nimport { Context } from \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/*\r\n  Higher level functions to allow the Tasks file to be more readable.\r\n*/\r\nabstract contract TasksUtils is ITasks, Context {\r\n    function _toOffchainTask(Task storage task) internal view returns (OffChainTask memory offchainTask) {\r\n        offchainTask.metadata = task.metadata;\r\n        offchainTask.deadline = task.deadline;\r\n        offchainTask.executorApplication = task.executorApplication;\r\n        offchainTask.creator = task.creator;\r\n        offchainTask.manager = task.manager;\r\n        offchainTask.state = task.state;\r\n        offchainTask.escrow = task.escrow;\r\n\r\n        offchainTask.budget = new ERC20Transfer[](task.budgetCount);\r\n        for (uint8 i; i < offchainTask.budget.length; ) {\r\n            offchainTask.budget[i] = task.budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        offchainTask.applications = new OffChainApplication[](task.applicationCount);\r\n        for (uint8 i; i < offchainTask.applications.length; ) {\r\n            Application storage application = task.applications[i];\r\n            offchainTask.applications[i].metadata = application.metadata;\r\n            offchainTask.applications[i].applicant = application.applicant;\r\n            offchainTask.applications[i].accepted = application.accepted;\r\n            offchainTask.applications[i].reward = new Reward[](application.rewardCount);\r\n            for (uint8 j; j < offchainTask.applications[i].reward.length; ) {\r\n                offchainTask.applications[i].reward[j] = application.reward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainTask.submissions = new Submission[](task.submissionCount);\r\n        for (uint8 i; i < offchainTask.submissions.length; ) {\r\n            offchainTask.submissions[i] = task.submissions[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainTask.cancelTaskRequests = new CancelTaskRequest[](task.cancelTaskRequestCount);\r\n        for (uint8 i; i < offchainTask.cancelTaskRequests.length; ) {\r\n            offchainTask.cancelTaskRequests[i] = task.cancelTaskRequests[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _increaseBudgetToReward(\r\n        Task storage task,\r\n        uint8 _length,\r\n        mapping(uint8 => Reward) storage _reward\r\n    ) internal {\r\n        uint8 j;\r\n        ERC20Transfer memory erc20Transfer = task.budget[0];\r\n        uint256 needed;\r\n        for (uint8 i; i < _length; ) {\r\n            unchecked {\r\n                needed += _reward[i].amount;\r\n            }\r\n\r\n            if (_reward[i].nextToken) {\r\n                if (needed > erc20Transfer.amount) {\r\n                    // Existing budget in escrow doesnt cover the needed reward\r\n                    erc20Transfer.tokenContract.transferFrom(_msgSender(), address(task.escrow), needed - erc20Transfer.amount);\r\n                }\r\n\r\n                needed = 0;\r\n                unchecked {\r\n                    erc20Transfer = task.budget[++j];\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _setRewardBellowBudget(\r\n        Task storage task,\r\n        Application storage application, \r\n        Reward[] calldata _reward\r\n    ) internal {\r\n        application.rewardCount = uint8(_reward.length);\r\n\r\n        uint8 j;\r\n        ERC20Transfer memory erc20Transfer = task.budget[0];\r\n        uint256 alreadyReserved;\r\n        for (uint8 i; i < uint8(_reward.length); ) {\r\n            // erc20Transfer.amount -= _reward[i].amount (underflow error, but that is not a nice custom once)\r\n            unchecked {\r\n                alreadyReserved += _reward[i].amount;\r\n            }\r\n            if (alreadyReserved > erc20Transfer.amount) {\r\n                revert RewardAboveBudget();\r\n            }\r\n\r\n            application.reward[i] = _reward[i];\r\n\r\n            if (_reward[i].nextToken) {\r\n                alreadyReserved = 0;\r\n                unchecked {\r\n                    erc20Transfer = task.budget[++j];\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _payoutTask(Task storage task) internal {\r\n        Application storage executor = task.applications[task.executorApplication];\r\n        address creator = task.creator;\r\n        Escrow escrow = task.escrow;\r\n\r\n        uint8 j;\r\n        ERC20Transfer memory erc20Transfer = task.budget[0];\r\n        uint8 rewardCount = executor.rewardCount;\r\n        for (uint8 i; i < rewardCount; ) {\r\n            Reward memory reward = executor.reward[i];\r\n            escrow.transfer(erc20Transfer.tokenContract, executor.applicant, reward.amount);\r\n            unchecked {\r\n                erc20Transfer.amount -= reward.amount;\r\n            }\r\n\r\n            if (reward.nextToken) {\r\n                if (erc20Transfer.amount > 0) {\r\n                    escrow.transfer(erc20Transfer.tokenContract, creator, erc20Transfer.amount);\r\n                }\r\n\r\n                unchecked {\r\n                    erc20Transfer = task.budget[++j];\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        uint8 budgetCount = task.budgetCount;\r\n        while (j < budgetCount) {\r\n            escrow.transfer(erc20Transfer.tokenContract, creator, erc20Transfer.amount);\r\n            \r\n            unchecked {\r\n                erc20Transfer = task.budget[++j];\r\n            }\r\n        }\r\n\r\n        task.state = TaskState.Closed;\r\n    }\r\n    \r\n    function _refundCreator(Task storage task) internal {\r\n        uint8 budgetCount = task.budgetCount;\r\n        address creator = task.creator;\r\n        Escrow escrow = task.escrow;\r\n        for (uint8 i; i < budgetCount; ) {\r\n            ERC20Transfer memory erc20Transfer = task.budget[i];\r\n            escrow.transfer(erc20Transfer.tokenContract, creator, erc20Transfer.amount);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        task.state = TaskState.Closed;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}