{
  "language": "Solidity",
  "sources": {
    "@aragon/osx/core/dao/DAO.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\n\nimport {IProtocolVersion} from \"../../utils/protocol/IProtocolVersion.sol\";\nimport {ProtocolVersion} from \"../../utils/protocol/ProtocolVersion.sol\";\nimport {PermissionManager} from \"../permission/PermissionManager.sol\";\nimport {CallbackHandler} from \"../utils/CallbackHandler.sol\";\nimport {hasBit, flipBit} from \"../utils/BitMap.sol\";\nimport {IEIP4824} from \"./IEIP4824.sol\";\nimport {IDAO} from \"./IDAO.sol\";\n\n/// @title DAO\n/// @author Aragon Association - 2021-2023\n/// @notice This contract is the entry point to the Aragon DAO framework and provides our users a simple and easy to use public interface.\n/// @dev Public API of the Aragon DAO framework.\ncontract DAO is\n    IEIP4824,\n    Initializable,\n    IERC1271,\n    ERC165StorageUpgradeable,\n    IDAO,\n    UUPSUpgradeable,\n    ProtocolVersion,\n    PermissionManager,\n    CallbackHandler\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using AddressUpgradeable for address;\n\n    /// @notice The ID of the permission required to call the `execute` function.\n    bytes32 public constant EXECUTE_PERMISSION_ID = keccak256(\"EXECUTE_PERMISSION\");\n\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\n    bytes32 public constant UPGRADE_DAO_PERMISSION_ID = keccak256(\"UPGRADE_DAO_PERMISSION\");\n\n    /// @notice The ID of the permission required to call the `setMetadata` function.\n    bytes32 public constant SET_METADATA_PERMISSION_ID = keccak256(\"SET_METADATA_PERMISSION\");\n\n    /// @notice The ID of the permission required to call the `setTrustedForwarder` function.\n    bytes32 public constant SET_TRUSTED_FORWARDER_PERMISSION_ID =\n        keccak256(\"SET_TRUSTED_FORWARDER_PERMISSION\");\n\n    /// @notice The ID of the permission required to call the `setSignatureValidator` function.\n    bytes32 public constant SET_SIGNATURE_VALIDATOR_PERMISSION_ID =\n        keccak256(\"SET_SIGNATURE_VALIDATOR_PERMISSION\");\n\n    /// @notice The ID of the permission required to call the `registerStandardCallback` function.\n    bytes32 public constant REGISTER_STANDARD_CALLBACK_PERMISSION_ID =\n        keccak256(\"REGISTER_STANDARD_CALLBACK_PERMISSION\");\n\n    /// @notice The internal constant storing the maximal action array length.\n    uint256 internal constant MAX_ACTIONS = 256;\n\n    /// @notice The first out of two values to which the `_reentrancyStatus` state variable (used by the `nonReentrant` modifier) can be set inidicating that a function was not entered.\n    uint256 private constant _NOT_ENTERED = 1;\n\n    /// @notice The second out of two values to which the `_reentrancyStatus` state variable (used by the `nonReentrant` modifier) can be set inidicating that a function was entered.\n    uint256 private constant _ENTERED = 2;\n\n    /// @notice The [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n    /// @dev Added in v1.0.0.\n    IERC1271 public signatureValidator;\n\n    /// @notice The address of the trusted forwarder verifying meta transactions.\n    /// @dev Added in v1.0.0.\n    address private trustedForwarder;\n\n    /// @notice The [EIP-4824](https://eips.ethereum.org/EIPS/eip-4824) DAO URI.\n    /// @dev Added in v1.0.0.\n    string private _daoURI;\n\n    /// @notice The state variable for the reentrancy guard of the `execute` function.\n    /// @dev Added in v1.3.0. The variable can be of value `_NOT_ENTERED = 1` or `_ENTERED = 2` in usage and is initialized with `_NOT_ENTERED`.\n    uint256 private _reentrancyStatus;\n\n    /// @notice Thrown if a call is reentrant.\n    error ReentrantCall();\n\n    /// @notice Thrown if the action array length is larger than `MAX_ACTIONS`.\n    error TooManyActions();\n\n    /// @notice Thrown if action execution has failed.\n    /// @param index The index of the action in the action array that failed.\n    error ActionFailed(uint256 index);\n\n    /// @notice Thrown if an action has insufficent gas left.\n    error InsufficientGas();\n\n    /// @notice Thrown if the deposit amount is zero.\n    error ZeroAmount();\n\n    /// @notice Thrown if there is a mismatch between the expected and actually deposited amount of native tokens.\n    /// @param expected The expected native token amount.\n    /// @param actual The actual native token amount deposited.\n    error NativeTokenDepositAmountMismatch(uint256 expected, uint256 actual);\n\n    /// @notice Thrown if an upgrade is not supported from a specific protocol version .\n    error ProtocolVersionUpgradeNotSupported(uint8[3] protocolVersion);\n\n    /// @notice Emitted when a new DAO URI is set.\n    /// @param daoURI The new URI.\n    event NewURI(string daoURI);\n\n    /// @notice A modifier to protect a function from calling itself, directly or indirectly (reentrancy).\n    /// @dev Currently, this modifier is only applied to the `execute()` function. If this is used multiple times, private `_beforeNonReentrant()` and `_afterNonReentrant()` functions should be created to prevent code duplication.\n    modifier nonReentrant() {\n        if (_reentrancyStatus == _ENTERED) {\n            revert ReentrantCall();\n        }\n        _reentrancyStatus = _ENTERED;\n\n        _;\n\n        _reentrancyStatus = _NOT_ENTERED;\n    }\n\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice Initializes the DAO by\n    /// - setting the reentrancy status variable to `_NOT_ENTERED`\n    /// - registering the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID\n    /// - setting the trusted forwarder for meta transactions\n    /// - giving the `ROOT_PERMISSION_ID` permission to the initial owner (that should be revoked and transferred to the DAO after setup).\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\n    /// @param _metadata IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO.\n    /// @param _initialOwner The initial owner of the DAO having the `ROOT_PERMISSION_ID` permission.\n    /// @param _trustedForwarder The trusted forwarder responsible for verifying meta transactions.\n    /// @param daoURI_ The DAO URI required to support [ERC-4824](https://eips.ethereum.org/EIPS/eip-4824).\n    function initialize(\n        bytes calldata _metadata,\n        address _initialOwner,\n        address _trustedForwarder,\n        string calldata daoURI_\n    ) external reinitializer(2) {\n        _reentrancyStatus = _NOT_ENTERED; // added in v1.3.0\n\n        _registerInterface(type(IDAO).interfaceId);\n        _registerInterface(type(IERC1271).interfaceId);\n        _registerInterface(type(IEIP4824).interfaceId);\n        _registerInterface(type(IProtocolVersion).interfaceId); // added in v1.3.0\n        _registerTokenInterfaces();\n\n        _setMetadata(_metadata);\n        _setTrustedForwarder(_trustedForwarder);\n        _setDaoURI(daoURI_);\n        __PermissionManager_init(_initialOwner);\n    }\n\n    /// @notice Initializes the DAO after an upgrade from a previous protocol version.\n    /// @param _previousProtocolVersion The semantic protocol version number of the previous DAO implementation contract this upgrade is transitioning from.\n    /// @param _initData The initialization data to be passed to via `upgradeToAndCall` (see [ERC-1967](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Upgrade)).\n    function initializeFrom(\n        uint8[3] calldata _previousProtocolVersion,\n        bytes calldata _initData\n    ) external reinitializer(2) {\n        _initData; // Silences the unused function parameter warning.\n\n        // Check that the contract is not upgrading from a different major release.\n        if (_previousProtocolVersion[0] != 1) {\n            revert ProtocolVersionUpgradeNotSupported(_previousProtocolVersion);\n        }\n\n        // Initialize `_reentrancyStatus` that was added in v1.3.0.\n        // Register Interface `ProtocolVersion` that was added in v1.3.0.\n        if (_previousProtocolVersion[1] <= 2) {\n            _reentrancyStatus = _NOT_ENTERED;\n            _registerInterface(type(IProtocolVersion).interfaceId);\n        }\n    }\n\n    /// @inheritdoc PermissionManager\n    function isPermissionRestrictedForAnyAddr(\n        bytes32 _permissionId\n    ) internal pure override returns (bool) {\n        return\n            _permissionId == EXECUTE_PERMISSION_ID ||\n            _permissionId == UPGRADE_DAO_PERMISSION_ID ||\n            _permissionId == SET_METADATA_PERMISSION_ID ||\n            _permissionId == SET_TRUSTED_FORWARDER_PERMISSION_ID ||\n            _permissionId == SET_SIGNATURE_VALIDATOR_PERMISSION_ID ||\n            _permissionId == REGISTER_STANDARD_CALLBACK_PERMISSION_ID;\n    }\n\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeability mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n    /// @dev The caller must have the `UPGRADE_DAO_PERMISSION_ID` permission.\n    function _authorizeUpgrade(address) internal virtual override auth(UPGRADE_DAO_PERMISSION_ID) {}\n\n    /// @inheritdoc IDAO\n    function setTrustedForwarder(\n        address _newTrustedForwarder\n    ) external override auth(SET_TRUSTED_FORWARDER_PERMISSION_ID) {\n        _setTrustedForwarder(_newTrustedForwarder);\n    }\n\n    /// @inheritdoc IDAO\n    function getTrustedForwarder() external view virtual override returns (address) {\n        return trustedForwarder;\n    }\n\n    /// @inheritdoc IDAO\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view override returns (bool) {\n        return isGranted(_where, _who, _permissionId, _data);\n    }\n\n    /// @inheritdoc IDAO\n    function setMetadata(\n        bytes calldata _metadata\n    ) external override auth(SET_METADATA_PERMISSION_ID) {\n        _setMetadata(_metadata);\n    }\n\n    /// @inheritdoc IDAO\n    function execute(\n        bytes32 _callId,\n        Action[] calldata _actions,\n        uint256 _allowFailureMap\n    )\n        external\n        override\n        nonReentrant\n        auth(EXECUTE_PERMISSION_ID)\n        returns (bytes[] memory execResults, uint256 failureMap)\n    {\n        // Check that the action array length is within bounds.\n        if (_actions.length > MAX_ACTIONS) {\n            revert TooManyActions();\n        }\n\n        execResults = new bytes[](_actions.length);\n\n        uint256 gasBefore;\n        uint256 gasAfter;\n\n        for (uint256 i = 0; i < _actions.length; ) {\n            gasBefore = gasleft();\n\n            (bool success, bytes memory result) = _actions[i].to.call{value: _actions[i].value}(\n                _actions[i].data\n            );\n            gasAfter = gasleft();\n\n            // Check if failure is allowed\n            if (!hasBit(_allowFailureMap, uint8(i))) {\n                // Check if the call failed.\n                if (!success) {\n                    revert ActionFailed(i);\n                }\n            } else {\n                // Check if the call failed.\n                if (!success) {\n                    // Make sure that the action call did not fail because 63/64 of `gasleft()` was insufficient to execute the external call `.to.call` (see [ERC-150](https://eips.ethereum.org/EIPS/eip-150)).\n                    // In specific scenarios, i.e. proposal execution where the last action in the action array is allowed to fail, the account calling `execute` could force-fail this action by setting a gas limit\n                    // where 63/64 is insufficient causing the `.to.call` to fail, but where the remaining 1/64 gas are sufficient to successfully finish the `execute` call.\n                    if (gasAfter < gasBefore / 64) {\n                        revert InsufficientGas();\n                    }\n\n                    // Store that this action failed.\n                    failureMap = flipBit(failureMap, uint8(i));\n                }\n            }\n\n            execResults[i] = result;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit Executed({\n            actor: msg.sender,\n            callId: _callId,\n            actions: _actions,\n            allowFailureMap: _allowFailureMap,\n            failureMap: failureMap,\n            execResults: execResults\n        });\n    }\n\n    /// @inheritdoc IDAO\n    function deposit(\n        address _token,\n        uint256 _amount,\n        string calldata _reference\n    ) external payable override {\n        if (_amount == 0) revert ZeroAmount();\n\n        if (_token == address(0)) {\n            if (msg.value != _amount)\n                revert NativeTokenDepositAmountMismatch({expected: _amount, actual: msg.value});\n        } else {\n            if (msg.value != 0)\n                revert NativeTokenDepositAmountMismatch({expected: 0, actual: msg.value});\n\n            IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        }\n\n        emit Deposited(msg.sender, _token, _amount, _reference);\n    }\n\n    /// @inheritdoc IDAO\n    function setSignatureValidator(\n        address _signatureValidator\n    ) external override auth(SET_SIGNATURE_VALIDATOR_PERMISSION_ID) {\n        signatureValidator = IERC1271(_signatureValidator);\n\n        emit SignatureValidatorSet({signatureValidator: _signatureValidator});\n    }\n\n    /// @inheritdoc IDAO\n    function isValidSignature(\n        bytes32 _hash,\n        bytes memory _signature\n    ) external view override(IDAO, IERC1271) returns (bytes4) {\n        if (address(signatureValidator) == address(0)) {\n            // Return the invalid magic number\n            return bytes4(0);\n        }\n        // Forward the call to the set signature validator contract\n        return signatureValidator.isValidSignature(_hash, _signature);\n    }\n\n    /// @notice Emits the `NativeTokenDeposited` event to track native token deposits that weren't made via the deposit method.\n    /// @dev This call is bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// Gas cost increases in future hard forks might break this function. As an alternative, [ERC-2930](https://eips.ethereum.org/EIPS/eip-2930)-type transactions using access lists can be employed.\n    receive() external payable {\n        emit NativeTokenDeposited(msg.sender, msg.value);\n    }\n\n    /// @notice Fallback to handle future versions of the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) standard.\n    /// @param _input An alias being equivalent to `msg.data`. This feature of the fallback function was introduced with the [solidity compiler version 0.7.6](https://github.com/ethereum/solidity/releases/tag/v0.7.6)\n    /// @return The magic number registered for the function selector triggering the fallback.\n    fallback(bytes calldata _input) external returns (bytes memory) {\n        bytes4 magicNumber = _handleCallback(msg.sig, _input);\n        return abi.encode(magicNumber);\n    }\n\n    /// @notice Emits the MetadataSet event if new metadata is set.\n    /// @param _metadata Hash of the IPFS metadata object.\n    function _setMetadata(bytes calldata _metadata) internal {\n        emit MetadataSet(_metadata);\n    }\n\n    /// @notice Sets the trusted forwarder on the DAO and emits the associated event.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function _setTrustedForwarder(address _trustedForwarder) internal {\n        trustedForwarder = _trustedForwarder;\n\n        emit TrustedForwarderSet(_trustedForwarder);\n    }\n\n    /// @notice Registers the [ERC-721](https://eips.ethereum.org/EIPS/eip-721) and [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155) interfaces and callbacks.\n    function _registerTokenInterfaces() private {\n        _registerInterface(type(IERC721ReceiverUpgradeable).interfaceId);\n        _registerInterface(type(IERC1155ReceiverUpgradeable).interfaceId);\n\n        _registerCallback(\n            IERC721ReceiverUpgradeable.onERC721Received.selector,\n            IERC721ReceiverUpgradeable.onERC721Received.selector\n        );\n        _registerCallback(\n            IERC1155ReceiverUpgradeable.onERC1155Received.selector,\n            IERC1155ReceiverUpgradeable.onERC1155Received.selector\n        );\n        _registerCallback(\n            IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector,\n            IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector\n        );\n    }\n\n    /// @inheritdoc IDAO\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external override auth(REGISTER_STANDARD_CALLBACK_PERMISSION_ID) {\n        _registerInterface(_interfaceId);\n        _registerCallback(_callbackSelector, _magicNumber);\n        emit StandardCallbackRegistered(_interfaceId, _callbackSelector, _magicNumber);\n    }\n\n    /// @inheritdoc IEIP4824\n    function daoURI() external view returns (string memory) {\n        return _daoURI;\n    }\n\n    /// @notice Updates the set DAO URI to a new value.\n    /// @param newDaoURI The new DAO URI to be set.\n    function setDaoURI(string calldata newDaoURI) external auth(SET_METADATA_PERMISSION_ID) {\n        _setDaoURI(newDaoURI);\n    }\n\n    /// @notice Sets the new [ERC-4824](https://eips.ethereum.org/EIPS/eip-4824) DAO URI and emits the associated event.\n    /// @param daoURI_ The new DAO URI.\n    function _setDaoURI(string calldata daoURI_) internal {\n        _daoURI = daoURI_;\n\n        emit NewURI(daoURI_);\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[46] private __gap;\n}\n"
    },
    "@aragon/osx/core/dao/IDAO.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IDAO\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\ninterface IDAO {\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\n    /// @param to The address to call.\n    /// @param value The native token value to be sent with the call.\n    /// @param data The bytes-encoded function selector and calldata for the call.\n    struct Action {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the contract.\n    /// @param _who The address of a EOA or contract to give the permissions.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if the address has permission, false if not.\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view returns (bool);\n\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\n    /// @param _metadata The IPFS hash of the new metadata object.\n    function setMetadata(bytes calldata _metadata) external;\n\n    /// @notice Emitted when the DAO metadata is updated.\n    /// @param metadata The IPFS hash of the new metadata object.\n    event MetadataSet(bytes metadata);\n\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n    /// @param _actions The array of actions.\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return The array of results obtained from the executed actions in `bytes`.\n    /// @return The resulting failure map containing the actions have actually failed.\n    function execute(\n        bytes32 _callId,\n        Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) external returns (bytes[] memory, uint256);\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param actor The address of the caller.\n    /// @param callId The ID of the call.\n    /// @param actions The array of actions executed.\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n    /// @param failureMap The failure map encoding which actions have failed.\n    /// @param execResults The array with the results of the executed actions.\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\n    event Executed(\n        address indexed actor,\n        bytes32 callId,\n        Action[] actions,\n        uint256 allowFailureMap,\n        uint256 failureMap,\n        bytes[] execResults\n    );\n\n    /// @notice Emitted when a standard callback is registered.\n    /// @param interfaceId The ID of the interface.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    event StandardCallbackRegistered(\n        bytes4 interfaceId,\n        bytes4 callbackSelector,\n        bytes4 magicNumber\n    );\n\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\n    /// @param _token The address of the token or address(0) in case of the native token.\n    /// @param _amount The amount of tokens to deposit.\n    /// @param _reference The reference describing the deposit reason.\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\n\n    /// @notice Emitted when a token deposit has been made to the DAO.\n    /// @param sender The address of the sender.\n    /// @param token The address of the deposited token.\n    /// @param amount The amount of tokens deposited.\n    /// @param _reference The reference describing the deposit reason.\n    event Deposited(\n        address indexed sender,\n        address indexed token,\n        uint256 amount,\n        string _reference\n    );\n\n    /// @notice Emitted when a native token deposit has been made to the DAO.\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// @param sender The address of the sender.\n    /// @param amount The amount of native tokens deposited.\n    event NativeTokenDeposited(address sender, uint256 amount);\n\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function setTrustedForwarder(address _trustedForwarder) external;\n\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\n    /// @return The trusted forwarder address.\n    function getTrustedForwarder() external view returns (address);\n\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\n    /// @param forwarder the new forwarder address.\n    event TrustedForwarderSet(address forwarder);\n\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n    /// @param _signatureValidator The address of the signature validator.\n    function setSignatureValidator(address _signatureValidator) external;\n\n    /// @notice Emitted when the signature validator address is updated.\n    /// @param signatureValidator The address of the signature validator.\n    event SignatureValidatorSet(address signatureValidator);\n\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n    /// @param _hash The hash of the data to be signed.\n    /// @param _signature The signature byte array associated with `_hash`.\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\n\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n    /// @param _interfaceId The ID of the interface.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the function signature.\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external;\n}\n"
    },
    "@aragon/osx/core/dao/IEIP4824.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.17;\n\n/// @title EIP-4824 Common Interfaces for DAOs\n/// @dev See https://eips.ethereum.org/EIPS/eip-4824\n/// @author Aragon Association - 2021-2023\ninterface IEIP4824 {\n    /// @notice A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \"EIP-4824 DAO JSON-LD Schema\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \"EIP-4824 Members JSON-LD Schema\". The proposalsURI should point to a JSON file that conforms to the \"EIP-4824 Proposals JSON-LD Schema\". The activityLogURI should point to a JSON file that conforms to the \"EIP-4824 Activity Log JSON-LD Schema\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically hosted or dynamically-generated.\n    /// @return _daoURI The DAO URI.\n    function daoURI() external view returns (string memory _daoURI);\n}\n"
    },
    "@aragon/osx/core/permission/IPermissionCondition.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IPermissionCondition\n/// @author Aragon Association - 2021-2023\n/// @notice This interface can be implemented to support more customary permissions depending on on- or off-chain state, e.g., by querying token ownershop or a secondary condition, respectively.\ninterface IPermissionCondition {\n    /// @notice This method is used to check if a call is permitted.\n    /// @param _where The address of the target contract.\n    /// @param _who The address (EOA or contract) for which the permissions are checked.\n    /// @param _permissionId The permission identifier.\n    /// @param _data Optional data passed to the `PermissionCondition` implementation.\n    /// @return allowed Returns true if the call is permitted.\n    function isGranted(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes calldata _data\n    ) external view returns (bool allowed);\n}\n"
    },
    "@aragon/osx/core/permission/PermissionCondition.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport {IPermissionCondition} from \"./IPermissionCondition.sol\";\n\n/// @title PermissionCondition\n/// @author Aragon Association - 2023\n/// @notice An abstract contract for non-upgradeable contracts instantiated via the `new` keyword  to inherit from to support customary permissions depending on arbitrary on-chain state.\nabstract contract PermissionCondition is ERC165, IPermissionCondition {\n    /// @notice Checks if an interface is supported by this or its parent contract.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view override returns (bool) {\n        return\n            _interfaceId == type(IPermissionCondition).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n}\n"
    },
    "@aragon/osx/core/permission/PermissionLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title PermissionLib\n/// @author Aragon Association - 2021-2023\n/// @notice A library containing objects for permission processing.\nlibrary PermissionLib {\n    /// @notice A constant expressing that no condition is applied to a permission.\n    address public constant NO_CONDITION = address(0);\n\n    /// @notice The types of permission operations available in the `PermissionManager`.\n    /// @param Grant The grant operation setting a permission without a condition.\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\n    enum Operation {\n        Grant,\n        Revoke,\n        GrantWithCondition\n    }\n\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\n    /// @param operation The permission operation type.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param permissionId The permission identifier.\n    struct SingleTargetPermission {\n        Operation operation;\n        address who;\n        bytes32 permissionId;\n    }\n\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\n    /// @param operation The permission operation type.\n    /// @param where The address of the target contract for which `who` receives permission.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\n    /// @param permissionId The permission identifier.\n    struct MultiTargetPermission {\n        Operation operation;\n        address where;\n        address who;\n        address condition;\n        bytes32 permissionId;\n    }\n}\n"
    },
    "@aragon/osx/core/permission/PermissionManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport {IPermissionCondition} from \"./IPermissionCondition.sol\";\nimport {PermissionCondition} from \"./PermissionCondition.sol\";\nimport \"./PermissionLib.sol\";\n\n/// @title PermissionManager\n/// @author Aragon Association - 2021-2023\n/// @notice The abstract permission manager used in a DAO, its associated plugins, and other framework-related components.\nabstract contract PermissionManager is Initializable {\n    using AddressUpgradeable for address;\n\n    /// @notice The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function.\n    bytes32 public constant ROOT_PERMISSION_ID = keccak256(\"ROOT_PERMISSION\");\n\n    /// @notice A special address encoding permissions that are valid for any address `who` or `where`.\n    address internal constant ANY_ADDR = address(type(uint160).max);\n\n    /// @notice A special address encoding if a permissions is not set and therefore not allowed.\n    address internal constant UNSET_FLAG = address(0);\n\n    /// @notice A special address encoding if a permission is allowed.\n    address internal constant ALLOW_FLAG = address(2);\n\n    /// @notice A mapping storing permissions as hashes (i.e., `permissionHash(where, who, permissionId)`) and their status encoded by an address (unset, allowed, or redirecting to a `PermissionCondition`).\n    mapping(bytes32 => address) internal permissionsHashed;\n\n    /// @notice Thrown if a call is unauthorized.\n    /// @param where The context in which the authorization reverted.\n    /// @param who The address (EOA or contract) missing the permission.\n    /// @param permissionId The permission identifier.\n    error Unauthorized(address where, address who, bytes32 permissionId);\n\n    /// @notice Thrown if a permission has been already granted with a different condition.\n    /// @dev This makes sure that condition on the same permission can not be overwriten by a different condition.\n    /// @param where The address of the target contract to grant `_who` permission to.\n    /// @param who The address (EOA or contract) to which the permission has already been granted.\n    /// @param permissionId The permission identifier.\n    /// @param currentCondition The current condition set for permissionId.\n    /// @param newCondition The new condition it tries to set for permissionId.\n    error PermissionAlreadyGrantedForDifferentCondition(\n        address where,\n        address who,\n        bytes32 permissionId,\n        address currentCondition,\n        address newCondition\n    );\n\n    /// @notice Thrown if a condition address is not a contract.\n    /// @param condition The address that is not a contract.\n    error ConditionNotAContract(IPermissionCondition condition);\n\n    /// @notice Thrown if a condition contract does not support the `IPermissionCondition` interface.\n    /// @param condition The address that is not a contract.\n    error ConditionInterfacNotSupported(IPermissionCondition condition);\n\n    /// @notice Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`.\n\n    error PermissionsForAnyAddressDisallowed();\n\n    /// @notice Thrown for permission grants where `who` and `where` are both `ANY_ADDR`.\n    error AnyAddressDisallowedForWhoAndWhere();\n\n    /// @notice Thrown if `Operation.GrantWithCondition` is requested as an operation but the method does not support it.\n    error GrantWithConditionNotSupported();\n\n    /// @notice Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`.\n    /// @param permissionId The permission identifier.\n    /// @param here The address of the context in which the permission is granted.\n    /// @param where The address of the target contract for which `_who` receives permission.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param condition The address `ALLOW_FLAG` for regular permissions or, alternatively, the `IPermissionCondition` contract implementation to be used.\n    event Granted(\n        bytes32 indexed permissionId,\n        address indexed here,\n        address where,\n        address indexed who,\n        address condition\n    );\n\n    /// @notice Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`.\n    /// @param permissionId The permission identifier.\n    /// @param here The address of the context in which the permission is revoked.\n    /// @param where The address of the target contract for which `_who` loses permission.\n    /// @param who The address (EOA or contract) losing the permission.\n    event Revoked(\n        bytes32 indexed permissionId,\n        address indexed here,\n        address where,\n        address indexed who\n    );\n\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through this permission manager.\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\n    modifier auth(bytes32 _permissionId) {\n        _auth(_permissionId);\n        _;\n    }\n\n    /// @notice Initialization method to set the initial owner of the permission manager.\n    /// @dev The initial owner is granted the `ROOT_PERMISSION_ID` permission.\n    /// @param _initialOwner The initial owner of the permission manager.\n    function __PermissionManager_init(address _initialOwner) internal onlyInitializing {\n        _initializePermissionManager(_initialOwner);\n    }\n\n    /// @notice Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier.\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) receiving the permission.\n    /// @param _permissionId The permission identifier.\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\n    function grant(\n        address _where,\n        address _who,\n        bytes32 _permissionId\n    ) external virtual auth(ROOT_PERMISSION_ID) {\n        _grant(_where, _who, _permissionId);\n    }\n\n    /// @notice Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it.\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) receiving the permission.\n    /// @param _permissionId The permission identifier.\n    /// @param _condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\n    function grantWithCondition(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        IPermissionCondition _condition\n    ) external virtual auth(ROOT_PERMISSION_ID) {\n        _grantWithCondition(_where, _who, _permissionId, _condition);\n    }\n\n    /// @notice Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier.\n    /// @dev Requires the `ROOT_PERMISSION_ID` permission.\n    /// @param _where The address of the target contract for which `_who` loses permission.\n    /// @param _who The address (EOA or contract) losing the permission.\n    /// @param _permissionId The permission identifier.\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.\n    function revoke(\n        address _where,\n        address _who,\n        bytes32 _permissionId\n    ) external virtual auth(ROOT_PERMISSION_ID) {\n        _revoke(_where, _who, _permissionId);\n    }\n\n    /// @notice Applies an array of permission operations on a single target contracts `_where`.\n    /// @param _where The address of the single target contract.\n    /// @param items The array of single-targeted permission operations to apply.\n    function applySingleTargetPermissions(\n        address _where,\n        PermissionLib.SingleTargetPermission[] calldata items\n    ) external virtual auth(ROOT_PERMISSION_ID) {\n        for (uint256 i; i < items.length; ) {\n            PermissionLib.SingleTargetPermission memory item = items[i];\n\n            if (item.operation == PermissionLib.Operation.Grant) {\n                _grant(_where, item.who, item.permissionId);\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\n                _revoke(_where, item.who, item.permissionId);\n            } else if (item.operation == PermissionLib.Operation.GrantWithCondition) {\n                revert GrantWithConditionNotSupported();\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Applies an array of permission operations on multiple target contracts `items[i].where`.\n    /// @param _items The array of multi-targeted permission operations to apply.\n    function applyMultiTargetPermissions(\n        PermissionLib.MultiTargetPermission[] calldata _items\n    ) external virtual auth(ROOT_PERMISSION_ID) {\n        for (uint256 i; i < _items.length; ) {\n            PermissionLib.MultiTargetPermission memory item = _items[i];\n\n            if (item.operation == PermissionLib.Operation.Grant) {\n                _grant(item.where, item.who, item.permissionId);\n            } else if (item.operation == PermissionLib.Operation.Revoke) {\n                _revoke(item.where, item.who, item.permissionId);\n            } else if (item.operation == PermissionLib.Operation.GrantWithCondition) {\n                _grantWithCondition(\n                    item.where,\n                    item.who,\n                    item.permissionId,\n                    IPermissionCondition(item.condition)\n                );\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) for which the permission is checked.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if `_who` has the permissions on the target contract via the specified permission identifier.\n    function isGranted(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) public view virtual returns (bool) {\n        return\n            _isGranted(_where, _who, _permissionId, _data) || // check if `_who` has permission for `_permissionId` on `_where`\n            _isGranted(_where, ANY_ADDR, _permissionId, _data) || // check if anyone has permission for `_permissionId` on `_where`\n            _isGranted(ANY_ADDR, _who, _permissionId, _data); // check if `_who` has permission for `_permissionI` on any contract\n    }\n\n    /// @notice Grants the `ROOT_PERMISSION_ID` permission to the initial owner during initialization of the permission manager.\n    /// @param _initialOwner The initial owner of the permission manager.\n    function _initializePermissionManager(address _initialOwner) internal {\n        _grant(address(this), _initialOwner, ROOT_PERMISSION_ID);\n    }\n\n    /// @notice This method is used in the external `grant` method of the permission manager.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) owning the permission.\n    /// @param _permissionId The permission identifier.\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\n    function _grant(address _where, address _who, bytes32 _permissionId) internal virtual {\n        if (_where == ANY_ADDR || _who == ANY_ADDR) {\n            revert PermissionsForAnyAddressDisallowed();\n        }\n\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\n\n        address currentFlag = permissionsHashed[permHash];\n\n        // Means permHash is not currently set.\n        if (currentFlag == UNSET_FLAG) {\n            permissionsHashed[permHash] = ALLOW_FLAG;\n\n            emit Granted(_permissionId, msg.sender, _where, _who, ALLOW_FLAG);\n        }\n    }\n\n    /// @notice This method is used in the external `grantWithCondition` method of the permission manager.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) owning the permission.\n    /// @param _permissionId The permission identifier.\n    /// @param _condition An address either resolving to a `PermissionCondition` contract address or being the `ALLOW_FLAG` address (`address(2)`).\n    /// @dev Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.\n    function _grantWithCondition(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        IPermissionCondition _condition\n    ) internal virtual {\n        address conditionAddr = address(_condition);\n\n        if (!conditionAddr.isContract()) {\n            revert ConditionNotAContract(_condition);\n        }\n\n        if (\n            !PermissionCondition(conditionAddr).supportsInterface(\n                type(IPermissionCondition).interfaceId\n            )\n        ) {\n            revert ConditionInterfacNotSupported(_condition);\n        }\n\n        if (_where == ANY_ADDR && _who == ANY_ADDR) {\n            revert AnyAddressDisallowedForWhoAndWhere();\n        }\n\n        if (_where == ANY_ADDR || _who == ANY_ADDR) {\n            if (\n                _permissionId == ROOT_PERMISSION_ID ||\n                isPermissionRestrictedForAnyAddr(_permissionId)\n            ) {\n                revert PermissionsForAnyAddressDisallowed();\n            }\n        }\n\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\n\n        address currentCondition = permissionsHashed[permHash];\n\n        // Means permHash is not currently set.\n        if (currentCondition == UNSET_FLAG) {\n            permissionsHashed[permHash] = conditionAddr;\n\n            emit Granted(_permissionId, msg.sender, _where, _who, conditionAddr);\n        } else if (currentCondition != conditionAddr) {\n            // Revert if `permHash` is already granted, but uses a different condition.\n            // If we don't revert, we either should:\n            //   - allow overriding the condition on the same permission\n            //     which could be confusing whoever granted the same permission first\n            //   - or do nothing and succeed silently which could be confusing for the caller.\n            revert PermissionAlreadyGrantedForDifferentCondition({\n                where: _where,\n                who: _who,\n                permissionId: _permissionId,\n                currentCondition: currentCondition,\n                newCondition: conditionAddr\n            });\n        }\n    }\n\n    /// @notice This method is used in the public `revoke` method of the permission manager.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) owning the permission.\n    /// @param _permissionId The permission identifier.\n    /// @dev Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that might have been granted in parallel.\n    function _revoke(address _where, address _who, bytes32 _permissionId) internal virtual {\n        bytes32 permHash = permissionHash(_where, _who, _permissionId);\n        if (permissionsHashed[permHash] != UNSET_FLAG) {\n            permissionsHashed[permHash] = UNSET_FLAG;\n\n            emit Revoked(_permissionId, msg.sender, _where, _who);\n        }\n    }\n\n    /// @notice Checks if a caller is granted permissions on a target contract via a permission identifier and redirects the approval to a `PermissionCondition` if this was specified in the setup.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) owning the permission.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if `_who` has the permissions on the contract via the specified permissionId identifier.\n    function _isGranted(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) internal view virtual returns (bool) {\n        address accessFlagOrCondition = permissionsHashed[\n            permissionHash(_where, _who, _permissionId)\n        ];\n\n        if (accessFlagOrCondition == UNSET_FLAG) return false;\n        if (accessFlagOrCondition == ALLOW_FLAG) return true;\n\n        // Since it's not a flag, assume it's a PermissionCondition and try-catch to skip failures\n        try\n            IPermissionCondition(accessFlagOrCondition).isGranted(\n                _where,\n                _who,\n                _permissionId,\n                _data\n            )\n        returns (bool allowed) {\n            if (allowed) return true;\n        } catch {}\n\n        return false;\n    }\n\n    /// @notice A private function to be used to check permissions on the permission manager contract (`address(this)`) itself.\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\n    function _auth(bytes32 _permissionId) internal view virtual {\n        if (!isGranted(address(this), msg.sender, _permissionId, msg.data)) {\n            revert Unauthorized({\n                where: address(this),\n                who: msg.sender,\n                permissionId: _permissionId\n            });\n        }\n    }\n\n    /// @notice Generates the hash for the `permissionsHashed` mapping obtained from the word \"PERMISSION\", the contract address, the address owning the permission, and the permission identifier.\n    /// @param _where The address of the target contract for which `_who` receives permission.\n    /// @param _who The address (EOA or contract) owning the permission.\n    /// @param _permissionId The permission identifier.\n    /// @return The permission hash.\n    function permissionHash(\n        address _where,\n        address _who,\n        bytes32 _permissionId\n    ) internal pure virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"PERMISSION\", _who, _where, _permissionId));\n    }\n\n    /// @notice Decides if the granting permissionId is restricted when `_who == ANY_ADDR` or `_where == ANY_ADDR`.\n    /// @param _permissionId The permission identifier.\n    /// @return Whether or not the permission is restricted.\n    /// @dev By default, every permission is unrestricted and it is the derived contract's responsibility to override it. Note, that the `ROOT_PERMISSION_ID` is included and not required to be set it again.\n    function isPermissionRestrictedForAnyAddr(\n        bytes32 _permissionId\n    ) internal view virtual returns (bool) {\n        (_permissionId); // silence the warning.\n        return false;\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[49] private __gap;\n}\n"
    },
    "@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nimport {IDAO} from \"../../dao/IDAO.sol\";\nimport {_auth} from \"../../utils/auth.sol\";\n\n/// @title DaoAuthorizableUpgradeable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\n    IDAO private dao_;\n\n    /// @notice Initializes the contract by setting the associated DAO.\n    /// @param _dao The associated DAO address.\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\n        dao_ = _dao;\n    }\n\n    /// @notice Returns the DAO contract.\n    /// @return The DAO contract.\n    function dao() public view returns (IDAO) {\n        return dao_;\n    }\n\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\n    modifier auth(bytes32 _permissionId) {\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\n        _;\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[49] private __gap;\n}\n"
    },
    "@aragon/osx/core/plugin/IPlugin.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IPlugin\n/// @author Aragon Association - 2022-2023\n/// @notice An interface defining the traits of a plugin.\ninterface IPlugin {\n    enum PluginType {\n        UUPS,\n        Cloneable,\n        Constructable\n    }\n\n    /// @notice Returns the plugin's type\n    function pluginType() external view returns (PluginType);\n}\n"
    },
    "@aragon/osx/core/plugin/PluginUUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IERC1822ProxiableUpgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\";\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\n\nimport {IDAO} from \"../dao/IDAO.sol\";\nimport {DaoAuthorizableUpgradeable} from \"./dao-authorizable/DaoAuthorizableUpgradeable.sol\";\nimport {IPlugin} from \"./IPlugin.sol\";\n\n/// @title PluginUUPSUpgradeable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract, upgradeable contract to inherit from when creating a plugin being deployed via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\nabstract contract PluginUUPSUpgradeable is\n    IPlugin,\n    ERC165Upgradeable,\n    UUPSUpgradeable,\n    DaoAuthorizableUpgradeable\n{\n    // NOTE: When adding new state variables to the contract, the size of `_gap` has to be adapted below as well.\n\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @inheritdoc IPlugin\n    function pluginType() public pure override returns (PluginType) {\n        return PluginType.UUPS;\n    }\n\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\n    bytes32 public constant UPGRADE_PLUGIN_PERMISSION_ID = keccak256(\"UPGRADE_PLUGIN_PERMISSION\");\n\n    /// @notice Initializes the plugin by storing the associated DAO.\n    /// @param _dao The DAO contract.\n    function __PluginUUPSUpgradeable_init(IDAO _dao) internal virtual onlyInitializing {\n        __DaoAuthorizableUpgradeable_init(_dao);\n    }\n\n    /// @notice Checks if an interface is supported by this or its parent contract.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IPlugin).interfaceId ||\n            _interfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @notice Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to.\n    /// @return The address of the implementation contract.\n    function implementation() public view returns (address) {\n        return _getImplementation();\n    }\n\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeability mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n    /// @dev The caller must have the `UPGRADE_PLUGIN_PERMISSION_ID` permission.\n    function _authorizeUpgrade(\n        address\n    ) internal virtual override auth(UPGRADE_PLUGIN_PERMISSION_ID) {}\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[50] private __gap;\n}\n"
    },
    "@aragon/osx/core/plugin/proposal/IProposal.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IDAO} from \"../../dao/IDAO.sol\";\n\n/// @title IProposal\n/// @author Aragon Association - 2022-2023\n/// @notice An interface to be implemented by DAO plugins that create and execute proposals.\ninterface IProposal {\n    /// @notice Emitted when a proposal is created.\n    /// @param proposalId The ID of the proposal.\n    /// @param creator  The creator of the proposal.\n    /// @param startDate The start date of the proposal in seconds.\n    /// @param endDate The end date of the proposal in seconds.\n    /// @param metadata The metadata of the proposal.\n    /// @param actions The actions that will be executed if the proposal passes.\n    /// @param allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    event ProposalCreated(\n        uint256 indexed proposalId,\n        address indexed creator,\n        uint64 startDate,\n        uint64 endDate,\n        bytes metadata,\n        IDAO.Action[] actions,\n        uint256 allowFailureMap\n    );\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param proposalId The ID of the proposal.\n    event ProposalExecuted(uint256 indexed proposalId);\n\n    /// @notice Returns the proposal count determining the next proposal ID.\n    /// @return The proposal count.\n    function proposalCount() external view returns (uint256);\n}\n"
    },
    "@aragon/osx/core/plugin/proposal/ProposalUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {CountersUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\n\nimport \"./IProposal.sol\";\n\n/// @title ProposalUpgradeable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract containing the traits and internal functionality to create and execute proposals that can be inherited by upgradeable DAO plugins.\nabstract contract ProposalUpgradeable is IProposal, ERC165Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// @notice The incremental ID for proposals and executions.\n    CountersUpgradeable.Counter private proposalCounter;\n\n    /// @inheritdoc IProposal\n    function proposalCount() public view override returns (uint256) {\n        return proposalCounter.current();\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IProposal).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /// @notice Creates a proposal ID.\n    /// @return proposalId The proposal ID.\n    function _createProposalId() internal returns (uint256 proposalId) {\n        proposalId = proposalCount();\n        proposalCounter.increment();\n    }\n\n    /// @notice Internal function to create a proposal.\n    /// @param _metadata The proposal metadata.\n    /// @param _startDate The start date of the proposal in seconds.\n    /// @param _endDate The end date of the proposal in seconds.\n    /// @param _allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @param _actions The actions that will be executed after the proposal passes.\n    /// @return proposalId The ID of the proposal.\n    function _createProposal(\n        address _creator,\n        bytes calldata _metadata,\n        uint64 _startDate,\n        uint64 _endDate,\n        IDAO.Action[] calldata _actions,\n        uint256 _allowFailureMap\n    ) internal virtual returns (uint256 proposalId) {\n        proposalId = _createProposalId();\n\n        emit ProposalCreated({\n            proposalId: proposalId,\n            creator: _creator,\n            metadata: _metadata,\n            startDate: _startDate,\n            endDate: _endDate,\n            actions: _actions,\n            allowFailureMap: _allowFailureMap\n        });\n    }\n\n    /// @notice Internal function to execute a proposal.\n    /// @param _proposalId The ID of the proposal to be executed.\n    /// @param _actions The array of actions to be executed.\n    /// @param _allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return execResults The array with the results of the executed actions.\n    /// @return failureMap The failure map encoding which actions have failed.\n    function _executeProposal(\n        IDAO _dao,\n        uint256 _proposalId,\n        IDAO.Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) internal virtual returns (bytes[] memory execResults, uint256 failureMap) {\n        (execResults, failureMap) = _dao.execute(bytes32(_proposalId), _actions, _allowFailureMap);\n        emit ProposalExecuted({proposalId: _proposalId});\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[49] private __gap;\n}\n"
    },
    "@aragon/osx/core/utils/auth.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IDAO} from \"../dao/IDAO.sol\";\n\n/// @notice Thrown if a call is unauthorized in the associated DAO.\n/// @param dao The associated DAO.\n/// @param where The context in which the authorization reverted.\n/// @param who The address (EOA or contract) missing the permission.\n/// @param permissionId The permission identifier.\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\n\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\n/// @param _where The address of the target contract for which `who` receives permission.\n/// @param _who The address (EOA or contract) owning the permission.\n/// @param _permissionId The permission identifier.\n/// @param _data The optional data passed to the `PermissionCondition` registered.\nfunction _auth(\n    IDAO _dao,\n    address _where,\n    address _who,\n    bytes32 _permissionId,\n    bytes calldata _data\n) view {\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\n        revert DaoUnauthorized({\n            dao: address(_dao),\n            where: _where,\n            who: _who,\n            permissionId: _permissionId\n        });\n}\n"
    },
    "@aragon/osx/core/utils/BitMap.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.17;\n\n/// @param bitmap The `uint256` representation of bits.\n/// @param index The index number to check whether 1 or 0 is set.\n/// @return Returns `true` if the bit is set at `index` on `bitmap`.\nfunction hasBit(uint256 bitmap, uint8 index) pure returns (bool) {\n    uint256 bitValue = bitmap & (1 << index);\n    return bitValue > 0;\n}\n\n/// @param bitmap The `uint256` representation of bits.\n/// @param index The index number to set the bit.\n/// @return Returns a new number in which the bit is set at `index`.\nfunction flipBit(uint256 bitmap, uint8 index) pure returns (uint256) {\n    return bitmap ^ (1 << index);\n}\n"
    },
    "@aragon/osx/core/utils/CallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.17;\n\n/// @title CallbackHandler\n/// @author Aragon Association - 2022-2023\n/// @notice This contract handles callbacks by registering a magic number together with the callback function's selector. It provides the `_handleCallback` function that inheriting contracts have to call inside their `fallback()` function  (`_handleCallback(msg.callbackSelector, msg.data)`).  This allows to adaptively register ERC standards (e.g., [ERC-721](https://eips.ethereum.org/EIPS/eip-721), [ERC-1115](https://eips.ethereum.org/EIPS/eip-1155), or future versions of [ERC-165](https://eips.ethereum.org/EIPS/eip-165)) and returning the required magic numbers for the associated callback functions for the inheriting contract so that it doesn't need to be upgraded.\n/// @dev This callback handling functionality is intented to be used by executor contracts (i.e., `DAO.sol`).\nabstract contract CallbackHandler {\n    /// @notice A mapping between callback function selectors and magic return numbers.\n    mapping(bytes4 => bytes4) internal callbackMagicNumbers;\n\n    /// @notice The magic number refering to unregistered callbacks.\n    bytes4 internal constant UNREGISTERED_CALLBACK = bytes4(0);\n\n    /// @notice Thrown if the callback function is not registered.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    error UnkownCallback(bytes4 callbackSelector, bytes4 magicNumber);\n\n    /// @notice Emitted when `_handleCallback` is called.\n    /// @param sender Who called the callback.\n    /// @param sig The function signature.\n    /// @param data The calldata.\n    event CallbackReceived(address sender, bytes4 indexed sig, bytes data);\n\n    /// @notice Handles callbacks to adaptively support ERC standards.\n    /// @dev This function is supposed to be called via `_handleCallback(msg.sig, msg.data)` in the `fallback()` function of the inheriting contract.\n    /// @param _callbackSelector The function selector of the callback function.\n    /// @param _data The calldata.\n    /// @return The magic number registered for the function selector triggering the fallback.\n    function _handleCallback(\n        bytes4 _callbackSelector,\n        bytes memory _data\n    ) internal virtual returns (bytes4) {\n        bytes4 magicNumber = callbackMagicNumbers[_callbackSelector];\n        if (magicNumber == UNREGISTERED_CALLBACK) {\n            revert UnkownCallback({callbackSelector: _callbackSelector, magicNumber: magicNumber});\n        }\n\n        emit CallbackReceived({sender: msg.sender, sig: _callbackSelector, data: _data});\n\n        return magicNumber;\n    }\n\n    /// @notice Registers a magic number for a callback function selector.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the callback function selector.\n    function _registerCallback(bytes4 _callbackSelector, bytes4 _magicNumber) internal virtual {\n        callbackMagicNumbers[_callbackSelector] = _magicNumber;\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[49] private __gap;\n}\n"
    },
    "@aragon/osx/framework/plugin/setup/IPluginSetup.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {PermissionLib} from \"../../../core/permission/PermissionLib.sol\";\nimport {IDAO} from \"../../../core/dao/IDAO.sol\";\n\n/// @title IPluginSetup\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\ninterface IPluginSetup {\n    /// @notice The data associated with a prepared setup.\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\n    struct PreparedSetupData {\n        address[] helpers;\n        PermissionLib.MultiTargetPermission[] permissions;\n    }\n\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\n    /// @param plugin The address of the `Plugin`.\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\n    struct SetupPayload {\n        address plugin;\n        address[] currentHelpers;\n        bytes data;\n    }\n\n    /// @notice Prepares the installation of a plugin.\n    /// @param _dao The address of the installing DAO.\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\n    function prepareInstallation(\n        address _dao,\n        bytes calldata _data\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\n\n    /// @notice Prepares the update of a plugin.\n    /// @param _dao The address of the updating DAO.\n    /// @param _currentBuild The build number of the plugin to update from.\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\n    function prepareUpdate(\n        address _dao,\n        uint16 _currentBuild,\n        SetupPayload calldata _payload\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\n\n    /// @notice Prepares the uninstallation of a plugin.\n    /// @param _dao The address of the uninstalling DAO.\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\n    function prepareUninstallation(\n        address _dao,\n        SetupPayload calldata _payload\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\n\n    /// @notice Returns the plugin implementation address.\n    /// @return The address of the plugin implementation contract.\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n    function implementation() external view returns (address);\n}\n"
    },
    "@aragon/osx/framework/plugin/setup/PluginSetup.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport {PermissionLib} from \"../../../core/permission/PermissionLib.sol\";\nimport {createERC1967Proxy as createERC1967} from \"../../../utils/Proxy.sol\";\nimport {IPluginSetup} from \"./IPluginSetup.sol\";\n\n/// @title PluginSetup\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\nabstract contract PluginSetup is ERC165, IPluginSetup {\n    /// @inheritdoc IPluginSetup\n    function prepareUpdate(\n        address _dao,\n        uint16 _currentBuild,\n        SetupPayload calldata _payload\n    )\n        external\n        virtual\n        override\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\n    {}\n\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\n    /// @param _data The data to initialize the storage of the proxy contract.\n    /// @return The address of the created proxy contract.\n    function createERC1967Proxy(\n        address _implementation,\n        bytes memory _data\n    ) internal returns (address) {\n        return createERC1967(_implementation, _data);\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n"
    },
    "@aragon/osx/plugins/utils/Ratio.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n// The base value to encode real-valued ratios on the interval `[0,1]` as integers on the interval `[0, 10**6]`.\nuint256 constant RATIO_BASE = 10 ** 6;\n\n/// @notice Thrown if a ratio value exceeds the maximal value of `10**6`.\n/// @param limit The maximal value.\n/// @param actual The actual value.\nerror RatioOutOfBounds(uint256 limit, uint256 actual);\n\n/// @notice Applies a ratio to a value and ceils the remainder.\n/// @param _value The value to which the ratio is applied.\n/// @param _ratio The ratio that must be in the interval `[0, 10**6]`.\n/// @return result The resulting value.\nfunction _applyRatioCeiled(uint256 _value, uint256 _ratio) pure returns (uint256 result) {\n    if (_ratio > RATIO_BASE) {\n        revert RatioOutOfBounds({limit: RATIO_BASE, actual: _ratio});\n    }\n\n    _value = _value * _ratio;\n    uint256 remainder = _value % RATIO_BASE;\n    result = _value / RATIO_BASE;\n\n    // Check if ceiling is needed\n    if (remainder != 0) {\n        ++result;\n    }\n}\n"
    },
    "@aragon/osx/utils/protocol/IProtocolVersion.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IProtocolVersion\n/// @author Aragon Association - 2022-2023\n/// @notice An interface defining the semantic OSx protocol version.\ninterface IProtocolVersion {\n    /// @notice Returns the protocol version at which the current contract was built. Use it to check for future upgrades that might be applicable.\n    /// @return _version Returns the semantic OSx protocol version.\n    function protocolVersion() external view returns (uint8[3] memory _version);\n}\n"
    },
    "@aragon/osx/utils/protocol/ProtocolVersion.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.17;\n\nimport {IProtocolVersion} from \"./IProtocolVersion.sol\";\n\n/// @title ProtocolVersion\n/// @author Aragon Association - 2023\n/// @notice An abstract, stateless, non-upgradeable contract serves as a base for other contracts requiring awareness of the OSx protocol version.\n/// @dev Do not add any new variables to this contract that would shift down storage in the inheritance chain.\nabstract contract ProtocolVersion is IProtocolVersion {\n    // IMPORTANT: Do not add any storage variable, see the above notice.\n\n    /// @inheritdoc IProtocolVersion\n    function protocolVersion() public pure returns (uint8[3] memory) {\n        return [1, 3, 0];\n    }\n}\n"
    },
    "@aragon/osx/utils/Proxy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\n/// @param _logic The base contract address.\n/// @param _data The constructor arguments for this contract.\n/// @return The address of the proxy contract created.\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it’s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZeppelin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\n    return address(new ERC1967Proxy(_logic, _data));\n}\n"
    },
    "@aragon/osx/utils/UncheckedMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @notice Increments an unsigned integer by one without checking the result for overflow errors (using safe math).\n/// @param i The number to be incremented.\n/// @return The number incremented by one.\nfunction _uncheckedIncrement(uint256 i) pure returns (uint256) {\n    unchecked {\n        ++i;\n    }\n    return i;\n}\n\n/// @notice Adds two unsigned integers without checking the result for overflow errors (using safe math).\n/// @param a The first summand.\n/// @param b The second summand.\n/// @return The sum.\nfunction _uncheckedAdd(uint256 a, uint256 b) pure returns (uint256) {\n    unchecked {\n        return a + b;\n    }\n}\n\n/// @notice Subtracts two unsigned integers without checking the result for overflow errors (using safe math).\n/// @param a The minuend.\n/// @param b The subtrahend.\n/// @return The difference.\nfunction _uncheckedSub(uint256 a, uint256 b) pure returns (uint256) {\n    unchecked {\n        return a - b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Checkpoints.sol)\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SafeCastUpgradeable.sol\";\n\n/**\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n *\n * _Available since v4.5._\n */\nlibrary CheckpointsUpgradeable {\n    struct History {\n        Checkpoint[] _checkpoints;\n    }\n\n    struct Checkpoint {\n        uint32 _blockNumber;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\n     * block, the requested block number must be in the past, excluding the current block.\n     */\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n        uint32 key = SafeCastUpgradeable.toUint32(blockNumber);\n\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\n     * checkpoint is probably \"recent\", defined as being among the last sqrt(N) checkpoints where N is the number of\n     * checkpoints.\n     */\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n        uint32 key = SafeCastUpgradeable.toUint32(blockNumber);\n\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - MathUpgradeable.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\n     *\n     * Returns previous value and new value.\n     */\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\n        return _insert(self._checkpoints, SafeCastUpgradeable.toUint32(block.number), SafeCastUpgradeable.toUint224(value));\n    }\n\n    /**\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\n     * be set to `op(latest, delta)`.\n     *\n     * Returns previous value and new value.\n     */\n    function push(\n        History storage self,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) internal returns (uint256, uint256) {\n        return push(self, op(latest(self), delta));\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(History storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(\n        History storage self\n    ) internal view returns (bool exists, uint32 _blockNumber, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._blockNumber, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(History storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            require(last._blockNumber <= key, \"Checkpoint: decreasing keys\");\n\n            // Update or push new checkpoint\n            if (last._blockNumber == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace224 {\n        Checkpoint224[] _checkpoints;\n    }\n\n    struct Checkpoint224 {\n        uint32 _key;\n        uint224 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     */\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if there is none.\n     */\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     */\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high keys).\n     */\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - MathUpgradeable.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace224 storage self) internal view returns (uint224) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace224 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            require(last._key <= key, \"Checkpoint: decreasing keys\");\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint224({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint224({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint224[] storage self,\n        uint32 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint224[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint224 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n\n    struct Trace160 {\n        Checkpoint160[] _checkpoints;\n    }\n\n    struct Checkpoint160 {\n        uint96 _key;\n        uint160 _value;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\n     *\n     * Returns previous value and new value.\n     */\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\n        return _insert(self._checkpoints, key, value);\n    }\n\n    /**\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if there is none.\n     */\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     */\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero if there is none.\n     *\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \"recent\" checkpoint (checkpoints with high keys).\n     */\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\n        uint256 len = self._checkpoints.length;\n\n        uint256 low = 0;\n        uint256 high = len;\n\n        if (len > 5) {\n            uint256 mid = len - MathUpgradeable.sqrt(len);\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\n\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(Trace160 storage self) internal view returns (uint160) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\n    }\n\n    /**\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\n     * in the most recent checkpoint.\n     */\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\n        uint256 pos = self._checkpoints.length;\n        if (pos == 0) {\n            return (false, 0, 0);\n        } else {\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\n            return (true, ckpt._key, ckpt._value);\n        }\n    }\n\n    /**\n     * @dev Returns the number of checkpoint.\n     */\n    function length(Trace160 storage self) internal view returns (uint256) {\n        return self._checkpoints.length;\n    }\n\n    /**\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\n     * or by updating the last one.\n     */\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\n        uint256 pos = self.length;\n\n        if (pos > 0) {\n            // Copying to memory is important here.\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\n\n            // Checkpoint keys must be non-decreasing.\n            require(last._key <= key, \"Checkpoint: decreasing keys\");\n\n            // Update or push new checkpoint\n            if (last._key == key) {\n                _unsafeAccess(self, pos - 1)._value = value;\n            } else {\n                self.push(Checkpoint160({_key: key, _value: value}));\n            }\n            return (last._value, value);\n        } else {\n            self.push(Checkpoint160({_key: key, _value: value}));\n            return (0, value);\n        }\n    }\n\n    /**\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _upperBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(self, mid)._key > key) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or `high` if there is none.\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\n     *\n     * WARNING: `high` should not be greater than the array's length.\n     */\n    function _lowerBinaryLookup(\n        Checkpoint160[] storage self,\n        uint96 key,\n        uint256 low,\n        uint256 high\n    ) private view returns (uint256) {\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (_unsafeAccess(self, mid)._key < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return high;\n    }\n\n    /**\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\n     */\n    function _unsafeAccess(\n        Checkpoint160[] storage self,\n        uint256 pos\n    ) private pure returns (Checkpoint160 storage result) {\n        assembly {\n            mstore(0, self.slot)\n            result.slot := add(keccak256(0, 0x20), pos)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\n    function __ERC165Storage_init() internal onlyInitializing {\n    }\n\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/DAO/SharedAddress/ISharedAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\n\r\nbytes32 constant GRANT_ACCESS_PERMISSION_ID = keccak256(\r\n    \"GRANT_ACCESS_PERMISSION\"\r\n);\r\nbytes32 constant REVOKE_ACCESS_PERMISSION_ID = keccak256(\r\n    \"REVOKE_ACCESS_PERMISSION\"\r\n);\r\n\r\ninterface ISharedAddress {\r\n    error NotWearingHat();\r\n    error AccessDenied();\r\n\r\n    event Execution(\r\n        uint256 indexed nonce,\r\n        address indexed sender,\r\n        uint256 hat,\r\n        IDAO.Action[] actions\r\n    );\r\n\r\n    event FullAccessGranted(uint256 indexed hat);\r\n    event FullZoneAccessGranted(uint256 indexed hat, address zone);\r\n    event FullFunctionAccessGranted(\r\n        uint256 indexed hat,\r\n        address zone,\r\n        bytes4 functionSelector\r\n    );\r\n\r\n    event FullAccessRevoked(uint256 indexed hat);\r\n    event FullZoneAccessRevoked(uint256 indexed hat, address zone);\r\n    event FullFunctionAccessRevoked(\r\n        uint256 indexed hat,\r\n        address zone,\r\n        bytes4 functionSelector\r\n    );\r\n\r\n    /// @notice Verifies if a hat is allowed to execute a list of actions.\r\n    /// @param _hat The hat to check with.\r\n    /// @param _actions The actions to check.\r\n    /// @dev Only a single hat means that a user holding multiple hats might need to split their actions into one batch per hat.\r\n    function hasAccess(\r\n        uint256 _hat,\r\n        IDAO.Action[] calldata _actions\r\n    ) external view returns (bool);\r\n\r\n    /// @notice Executes a list of actions as the DAO.\r\n    /// @param _hat The hat to use for validations the actions are allowed.\r\n    /// @param _actions The actions to execute.\r\n    /// @param _failureMap Which actions are allowed to fail without reverting the whole transaction.\r\n    function asDAO(\r\n        uint256 _hat,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _failureMap\r\n    ) external returns (bytes[] memory, uint256);\r\n\r\n    /// @notice Grants a hat the permission to do any action.\r\n    /// @param _hat The hat that is granted the permission.\r\n    function grantFullAccess(uint256 _hat) external;\r\n\r\n    /// @notice Grants a hat the permission to call all functions of one smart contract.\r\n    /// @param _hat The hat that is granted the permission.\r\n    /// @param _zone The address of the smart contract.\r\n    function grantFullZoneAccess(uint256 _hat, address _zone) external;\r\n\r\n    /// @notice Grants a hat the permission to call one function of one smart contract.\r\n    /// @param _hat The hat that is granted the permission.\r\n    /// @param _zone The address of the smart contract.\r\n    /// @param _function The function of the smart contract.\r\n    function grantFullFunctionAccess(\r\n        uint256 _hat,\r\n        address _zone,\r\n        bytes4 _function\r\n    ) external;\r\n\r\n    /// @notice Revokes a hat the permission to do any action.\r\n    /// @param _hat The hat that is granted the permission.\r\n    function revokeFullAccess(uint256 _hat) external;\r\n\r\n    /// @notice Revokes a hat the permission to call all functions of one smart contract.\r\n    /// @param _hat The hat that is granted the permission.\r\n    /// @param _zone The address of the smart contract.\r\n    function revokeFullZoneAccess(uint256 _hat, address _zone) external;\r\n\r\n    /// @notice Revokes a hat the permission to call one function of one smart contract.\r\n    /// @param _hat The hat that is granted the permission.\r\n    /// @param _zone The address of the smart contract.\r\n    /// @param _function The function of the smart contract.\r\n    function revokeFullFunctionAccess(\r\n        uint256 _hat,\r\n        address _zone,\r\n        bytes4 _function\r\n    ) external;\r\n}\r\n"
    },
    "contracts/DAO/SharedAddress/SharedAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; // For verification, the setup contract (deployer) is fixed on 0.8.17\r\n\r\nimport {PluginUUPSUpgradeable} from \"@aragon/osx/core/plugin/PluginUUPSUpgradeable.sol\";\r\nimport {IHats} from \"../../Deps/hats-protocol/Interfaces/IHats.sol\";\r\nimport {ISharedAddress, IDAO, GRANT_ACCESS_PERMISSION_ID, REVOKE_ACCESS_PERMISSION_ID} from \"./ISharedAddress.sol\";\r\n\r\ncontract SharedAddress is PluginUUPSUpgradeable, ISharedAddress {\r\n    uint256 private daoNonce;\r\n    IHats private hats; // Should work for any ERC-1155 collection though\r\n    mapping(uint256 => bool) private fullAccess;\r\n    mapping(address => mapping(uint256 => bool)) private fullZoneAccess;\r\n    mapping(uint256 => mapping(uint256 => bool)) private fullFunctionAccess;\r\n\r\n    modifier wearingHat(uint256 _hat) {\r\n        if (hats.balanceOf(msg.sender, _hat) == 0) {\r\n            revert NotWearingHat();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize the TaskDisputes plugin.\r\n    /// @param _dao The dao where this plugin is installed.\r\n    /// @param _hats The deployment of Hats Protocol to use.\r\n    function initialize(IDAO _dao, IHats _hats) external initializer {\r\n        __PluginUUPSUpgradeable_init(_dao);\r\n        hats = _hats;\r\n    }\r\n\r\n    /// @inheritdoc PluginUUPSUpgradeable\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            _interfaceId == type(ISharedAddress).interfaceId ||\r\n            super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function hasAccess(\r\n        uint256 _hat,\r\n        IDAO.Action[] calldata _actions\r\n    ) public view returns (bool) {\r\n        if (!fullAccess[_hat]) {\r\n            for (uint i; i < _actions.length; ) {\r\n                if (!_hasAccess(_hat, _actions[i])) {\r\n                    return false;\r\n                }\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function asDAO(\r\n        uint256 _hat,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _failureMap\r\n    )\r\n        external\r\n        wearingHat(_hat)\r\n        returns (bytes[] memory returnValueBytes, uint256 failureMap)\r\n    {\r\n        if (!hasAccess(_hat, _actions)) {\r\n            revert AccessDenied();\r\n        }\r\n\r\n        (returnValueBytes, failureMap) = dao().execute(\r\n            bytes32(daoNonce),\r\n            _actions,\r\n            _failureMap\r\n        );\r\n        emit Execution(daoNonce, msg.sender, _hat, _actions);\r\n        ++daoNonce;\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function grantFullAccess(\r\n        uint256 _hat\r\n    ) external auth(GRANT_ACCESS_PERMISSION_ID) {\r\n        fullAccess[_hat] = true;\r\n        emit FullAccessGranted(_hat);\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function grantFullZoneAccess(\r\n        uint256 _hat,\r\n        address _zone\r\n    ) external auth(GRANT_ACCESS_PERMISSION_ID) {\r\n        fullZoneAccess[_zone][_hat] = true;\r\n        emit FullZoneAccessGranted(_hat, _zone);\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function grantFullFunctionAccess(\r\n        uint256 _hat,\r\n        address _zone,\r\n        bytes4 _function\r\n    ) external auth(GRANT_ACCESS_PERMISSION_ID) {\r\n        fullFunctionAccess[_functionId(_zone, _function)][_hat] = true;\r\n        emit FullFunctionAccessGranted(_hat, _zone, _function);\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function revokeFullAccess(\r\n        uint256 _hat\r\n    ) external auth(REVOKE_ACCESS_PERMISSION_ID) {\r\n        fullAccess[_hat] = false;\r\n        emit FullAccessRevoked(_hat);\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function revokeFullZoneAccess(\r\n        uint256 _hat,\r\n        address _zone\r\n    ) external auth(REVOKE_ACCESS_PERMISSION_ID) {\r\n        fullZoneAccess[_zone][_hat] = false;\r\n        emit FullZoneAccessRevoked(_hat, _zone);\r\n    }\r\n\r\n    /// @inheritdoc ISharedAddress\r\n    function revokeFullFunctionAccess(\r\n        uint256 _hat,\r\n        address _zone,\r\n        bytes4 _function\r\n    ) external auth(REVOKE_ACCESS_PERMISSION_ID) {\r\n        fullFunctionAccess[_functionId(_zone, _function)][_hat] = false;\r\n        emit FullFunctionAccessRevoked(_hat, _zone, _function);\r\n    }\r\n\r\n    function _hasAccess(\r\n        uint256 _hat,\r\n        IDAO.Action calldata _action\r\n    ) internal view returns (bool) {\r\n        return\r\n            fullZoneAccess[_action.to][_hat] ||\r\n            fullFunctionAccess[_functionId(_action.to, bytes4(_action.data))][\r\n                _hat\r\n            ];\r\n    }\r\n\r\n    // address + function selector\r\n    function _functionId(\r\n        address _zone,\r\n        bytes4 _function\r\n    ) internal pure returns (uint256) {\r\n        return (uint160(bytes20(_zone)) << 32) + uint32(_function);\r\n    }\r\n\r\n    /// @dev This empty reserved space is put in place to allow future versions to add new\r\n    /// variables without shifting down storage in the inheritance chain.\r\n    /// https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/DAO/SharedAddress/SharedAddressSetup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\nimport {DAO} from \"@aragon/osx/core/dao/DAO.sol\";\r\nimport {PermissionLib} from \"@aragon/osx/core/permission/PermissionLib.sol\";\r\nimport {PluginSetup, IPluginSetup} from \"@aragon/osx/framework/plugin/setup/PluginSetup.sol\";\r\nimport {SharedAddress, IHats, GRANT_ACCESS_PERMISSION_ID, REVOKE_ACCESS_PERMISSION_ID} from \"./SharedAddress.sol\";\r\n\r\ncontract SharedAddressSetup is PluginSetup {\r\n    /// @notice The address of `SharedAddress` plugin logic contract to be used in creating proxy contracts.\r\n    SharedAddress private immutable sharedAddressBase;\r\n\r\n    /// @notice The contract constructor, that deploys the `SharedAddress` plugin logic contract.\r\n    constructor() {\r\n        sharedAddressBase = new SharedAddress();\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareInstallation(\r\n        address _dao,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns (address plugin, PreparedSetupData memory preparedSetupData)\r\n    {\r\n        // Decode `_data` to extract the params needed for deploying and initializing `SharedAddress` plugin.\r\n        IHats hats = abi.decode(_data, (IHats));\r\n\r\n        // Prepare and Deploy the plugin proxy.\r\n        plugin = createERC1967Proxy(\r\n            address(sharedAddressBase),\r\n            abi.encodeWithSelector(\r\n                SharedAddress.initialize.selector,\r\n                _dao,\r\n                hats\r\n            )\r\n        );\r\n\r\n        // Prepare permissions\r\n        PermissionLib.MultiTargetPermission[]\r\n            memory permissions = new PermissionLib.MultiTargetPermission[](3);\r\n\r\n        // Set permissions to be granted.\r\n        // Grant the list of permissions of the plugin to the DAO.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            GRANT_ACCESS_PERMISSION_ID\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            REVOKE_ACCESS_PERMISSION_ID\r\n        );\r\n\r\n        // Grant `EXECUTE_PERMISSION` of the DAO to the plugin.\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            _dao,\r\n            plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            DAO(payable(_dao)).EXECUTE_PERMISSION_ID()\r\n        );\r\n\r\n        preparedSetupData.permissions = permissions;\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareUninstallation(\r\n        address _dao,\r\n        SetupPayload calldata _payload\r\n    )\r\n        external\r\n        view\r\n        returns (PermissionLib.MultiTargetPermission[] memory permissions)\r\n    {\r\n        // Prepare permissions\r\n        permissions = new PermissionLib.MultiTargetPermission[](1);\r\n\r\n        // Set permissions to be Revoked.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            GRANT_ACCESS_PERMISSION_ID\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            REVOKE_ACCESS_PERMISSION_ID\r\n        );\r\n\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _dao,\r\n            _payload.plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            DAO(payable(_dao)).EXECUTE_PERMISSION_ID()\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function implementation() external view returns (address) {\r\n        return address(sharedAddressBase);\r\n    }\r\n}\r\n"
    },
    "contracts/DAO/TaskDisputes/ITaskDisputes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ITasks} from \"../../Tasks/ITasks.sol\";\r\nimport {IPluginProposals} from \"../TokenListGovernance/IPluginProposals.sol\";\r\n\r\nbytes32 constant UPDATE_ADDRESSES_PERMISSION_ID = keccak256(\r\n    \"UPDATE_ADDRESSES_PERMISSION\"\r\n);\r\n\r\nbytes32 constant UPDATE_DISPUTE_COST_PERMISSION_ID = keccak256(\r\n    \"UPDATE_DISPUTE_COST_PERMISSION\"\r\n);\r\n\r\ninterface ITaskDisputes {\r\n    error Underpaying();\r\n    error TransferToDAOError();\r\n\r\n    /// @notice The minimum amount of native currency that has to be attached to create a dispute.\r\n    function getDisputeCost() external view returns (uint256);\r\n\r\n    /// @notice The Tasks contract where tasks are created.\r\n    function getTasksContract() external view returns (ITasks);\r\n\r\n    /// @notice The governance plugin (instance) contract where proposals are created.\r\n    function getGovernanceContract() external view returns (IPluginProposals);\r\n\r\n    /// @notice Updates the dispute cost.\r\n    /// @param _disputeCost The new dispute cost.\r\n    function updateDisputeCost(uint256 _disputeCost) external;\r\n\r\n    /// @notice Updates the tasks contract address.\r\n    /// @param _tasks The new Tasks contract address.\r\n    function updateTasksContract(ITasks _tasks) external;\r\n\r\n    /// @notice Updates the governance plugin contract address.\r\n    /// @param _governancePlugin The new governance plugin contract address.\r\n    function updateGovernanceContract(\r\n        IPluginProposals _governancePlugin\r\n    ) external;\r\n\r\n    /// @notice Create a dispute for a task\r\n    /// @param _metadata Metadata of the proposal.\r\n    /// @param _startDate Start date of the proposal.\r\n    /// @param _endDate End date of the proposal.\r\n    /// @param _taskId The task wanting to complete by dispute.\r\n    /// @param _partialReward Complete with how much of the reward.\r\n    /// @param _partialNativeReward Complete with how much of the native reward.\r\n    function createDispute(\r\n        bytes calldata _metadata,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        uint256 _taskId,\r\n        uint88[] calldata _partialReward,\r\n        uint96[] calldata _partialNativeReward\r\n    ) external payable;\r\n}\r\n"
    },
    "contracts/DAO/TaskDisputes/TaskDisputes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; // For verification, the setup contract (deployer) is fixed on 0.8.17\r\n\r\nimport {PluginUUPSUpgradeable, IDAO} from \"@aragon/osx/core/plugin/PluginUUPSUpgradeable.sol\";\r\n\r\nimport {ITaskDisputes, ITasks, IPluginProposals, UPDATE_ADDRESSES_PERMISSION_ID, UPDATE_DISPUTE_COST_PERMISSION_ID} from \"./ITaskDisputes.sol\";\r\n\r\ncontract TaskDisputes is PluginUUPSUpgradeable, ITaskDisputes {\r\n    ITasks private tasks;\r\n    IPluginProposals private governancePlugin;\r\n    uint256 private disputeCost;\r\n\r\n    /// @notice Initialize the TaskDisputes plugin.\r\n    /// @param _dao The dao where this plugin is installed.\r\n    /// @param _tasks The tasks contract to create tasks.\r\n    /// @param _governancePlugin The governance plugin contract to create proposals.\r\n    function initialize(\r\n        IDAO _dao,\r\n        ITasks _tasks,\r\n        IPluginProposals _governancePlugin,\r\n        uint256 _disputeCost\r\n    ) external initializer {\r\n        __PluginUUPSUpgradeable_init(_dao);\r\n        tasks = _tasks;\r\n        governancePlugin = _governancePlugin;\r\n        disputeCost = _disputeCost;\r\n    }\r\n\r\n    /// @inheritdoc PluginUUPSUpgradeable\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            _interfaceId == type(ITaskDisputes).interfaceId ||\r\n            super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function getDisputeCost() external view returns (uint256) {\r\n        return disputeCost;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function getTasksContract() external view returns (ITasks) {\r\n        return tasks;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function getGovernanceContract() external view returns (IPluginProposals) {\r\n        return governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function updateDisputeCost(\r\n        uint256 _disputeCost\r\n    ) external auth(UPDATE_DISPUTE_COST_PERMISSION_ID) {\r\n        disputeCost = _disputeCost;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function updateTasksContract(\r\n        ITasks _tasks\r\n    ) external auth(UPDATE_ADDRESSES_PERMISSION_ID) {\r\n        tasks = _tasks;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function updateGovernanceContract(\r\n        IPluginProposals _governancePlugin\r\n    ) external auth(UPDATE_ADDRESSES_PERMISSION_ID) {\r\n        governancePlugin = _governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDisputes\r\n    function createDispute(\r\n        bytes calldata _metadata,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        uint256 _taskId,\r\n        uint88[] calldata _partialReward,\r\n        uint96[] calldata _partialNativeReward\r\n    ) external payable {\r\n        // Dispute cost is required to make a dispute proposal. It is sent to the DAO.\r\n        if (msg.value < disputeCost) {\r\n            revert Underpaying();\r\n        }\r\n\r\n        // Normal address.transfer does not work with gas estimation\r\n        (bool succes, ) = address(dao()).call{value: msg.value}(\"\");\r\n        if (!succes) {\r\n            revert TransferToDAOError();\r\n        }\r\n\r\n        IDAO.Action[] memory actions = new IDAO.Action[](1);\r\n        {\r\n            bytes memory callData = abi.encodeWithSelector(\r\n                tasks.completeByDispute.selector,\r\n                _taskId,\r\n                _partialReward,\r\n                _partialNativeReward\r\n            );\r\n            actions[0] = IDAO.Action(address(tasks), 0, callData);\r\n        }\r\n\r\n        governancePlugin.createPluginProposal(\r\n            _metadata,\r\n            actions,\r\n            0,\r\n            _startDate,\r\n            _endDate\r\n        );\r\n    }\r\n\r\n    /// @dev This empty reserved space is put in place to allow future versions to add new\r\n    /// variables without shifting down storage in the inheritance chain.\r\n    /// https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/DAO/TaskDisputes/TaskDisputesSetup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\nimport {DAO} from \"@aragon/osx/core/dao/DAO.sol\";\r\nimport {PermissionLib} from \"@aragon/osx/core/permission/PermissionLib.sol\";\r\nimport {PluginSetup, IPluginSetup} from \"@aragon/osx/framework/plugin/setup/PluginSetup.sol\";\r\nimport {TaskDisputes, IPluginProposals, ITasks, UPDATE_ADDRESSES_PERMISSION_ID, UPDATE_DISPUTE_COST_PERMISSION_ID} from \"./TaskDisputes.sol\";\r\nimport {PLUGIN_PROPOSAL_PERMISSION_ID} from \"../TokenListGovernance/IPluginProposals.sol\";\r\n\r\ncontract TaskDisputesSetup is PluginSetup {\r\n    /// @notice The address of `TaskDisputes` plugin logic contract to be used in creating proxy contracts.\r\n    TaskDisputes private immutable taskDisputesBase;\r\n\r\n    /// @notice The contract constructor, that deploys the `TaskDisputes` plugin logic contract.\r\n    constructor() {\r\n        taskDisputesBase = new TaskDisputes();\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareInstallation(\r\n        address _dao,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns (address plugin, PreparedSetupData memory preparedSetupData)\r\n    {\r\n        // Decode `_data` to extract the params needed for deploying and initializing `TaskDisputes` plugin.\r\n        (\r\n            ITasks tasks,\r\n            IPluginProposals governancePlugin,\r\n            uint256 disputeCost\r\n        ) = abi.decode(_data, (ITasks, IPluginProposals, uint256));\r\n\r\n        // Prepare and Deploy the plugin proxy.\r\n        plugin = createERC1967Proxy(\r\n            address(taskDisputesBase),\r\n            abi.encodeWithSelector(\r\n                TaskDisputes.initialize.selector,\r\n                _dao,\r\n                tasks,\r\n                governancePlugin,\r\n                disputeCost\r\n            )\r\n        );\r\n\r\n        // Prepare permissions\r\n        PermissionLib.MultiTargetPermission[]\r\n            memory permissions = new PermissionLib.MultiTargetPermission[](3);\r\n\r\n        // Set permissions to be granted.\r\n        // Grant the list of permissions of the plugin to the DAO.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            address(governancePlugin),\r\n            plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            PLUGIN_PROPOSAL_PERMISSION_ID\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            UPDATE_ADDRESSES_PERMISSION_ID\r\n        );\r\n\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            UPDATE_DISPUTE_COST_PERMISSION_ID\r\n        );\r\n\r\n        preparedSetupData.permissions = permissions;\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareUninstallation(\r\n        address _dao,\r\n        SetupPayload calldata _payload\r\n    )\r\n        external\r\n        view\r\n        returns (PermissionLib.MultiTargetPermission[] memory permissions)\r\n    {\r\n        // Prepare permissions\r\n        permissions = new PermissionLib.MultiTargetPermission[](3);\r\n\r\n        // Set permissions to be Revoked.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            address(TaskDisputes(_payload.plugin).getGovernanceContract()),\r\n            _payload.plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            PLUGIN_PROPOSAL_PERMISSION_ID\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            UPDATE_ADDRESSES_PERMISSION_ID\r\n        );\r\n\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            UPDATE_DISPUTE_COST_PERMISSION_ID\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function implementation() external view returns (address) {\r\n        return address(taskDisputesBase);\r\n    }\r\n}\r\n"
    },
    "contracts/DAO/TaskDrafts/ITaskDrafts.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ITasks} from \"../../Tasks/ITasks.sol\";\r\nimport {IPluginProposals} from \"../TokenListGovernance/IPluginProposals.sol\";\r\n\r\nbytes32 constant UPDATE_ADDRESSES_PERMISSION_ID = keccak256(\r\n    \"UPDATE_ADDRESSES_PERMISSION\"\r\n);\r\n\r\ninterface ITaskDrafts {\r\n    event TaskDraftCreated(\r\n        uint256 proposalId,\r\n        bytes metadata,\r\n        uint64 startDate,\r\n        uint64 endDate,\r\n        CreateTaskInfo taskInfo\r\n    );\r\n\r\n    struct CreateTaskInfo {\r\n        string metadata;\r\n        uint64 deadline;\r\n        ITasks.ERC20Transfer[] budget;\r\n        address manager;\r\n        ITasks.PreapprovedApplication[] preapproved;\r\n    }\r\n\r\n    /// @notice The Tasks contract where tasks are created.\r\n    function getTasksContract() external view returns (ITasks);\r\n\r\n    /// @notice The governance plugin (instance) contract where proposals are created.\r\n    function getGovernanceContract() external view returns (IPluginProposals);\r\n\r\n    /// @notice Updates the tasks contract address.\r\n    /// @param _tasks The new Tasks contract address.\r\n    function updateTasksContract(ITasks _tasks) external;\r\n\r\n    /// @notice Updates the governance plugin contract address.\r\n    /// @param _governancePlugin The new governance plugin contract address.\r\n    function updateGovernanceContract(\r\n        IPluginProposals _governancePlugin\r\n    ) external;\r\n\r\n    /// @notice Create a proposal to create a task.\r\n    /// @param _metadata The metadata of the proposal.\r\n    /// @param _startDate The start date of the proposal.\r\n    /// @param _endDate The end date of the proposal.\r\n    /// @param _taskInfo The task to be created if the proposal passes.\r\n    function createDraftTask(\r\n        bytes calldata _metadata,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        CreateTaskInfo calldata _taskInfo\r\n    ) external;\r\n}\r\n"
    },
    "contracts/DAO/TaskDrafts/TaskDrafts.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; // For verification, the setup contract (deployer) is fixed on 0.8.17\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {PluginUUPSUpgradeable, IDAO} from \"@aragon/osx/core/plugin/PluginUUPSUpgradeable.sol\";\r\n\r\nimport {ITaskDrafts, ITasks, IPluginProposals, UPDATE_ADDRESSES_PERMISSION_ID} from \"./ITaskDrafts.sol\";\r\n\r\ncontract TaskDrafts is Initializable, PluginUUPSUpgradeable, ITaskDrafts {\r\n    ITasks private tasks;\r\n    IPluginProposals private governancePlugin;\r\n\r\n    /// @notice Initialize the TaskDrafts plugin.\r\n    /// @param _dao The dao where this plugin is installed.\r\n    /// @param _tasks The tasks contract to create tasks.\r\n    /// @param _governancePlugin The governance plugin contract to create proposals.\r\n    function initialize(\r\n        IDAO _dao,\r\n        ITasks _tasks,\r\n        IPluginProposals _governancePlugin\r\n    ) external initializer {\r\n        __PluginUUPSUpgradeable_init(_dao);\r\n        tasks = _tasks;\r\n        governancePlugin = _governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc PluginUUPSUpgradeable\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            _interfaceId == type(ITaskDrafts).interfaceId ||\r\n            super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function getTasksContract() external view returns (ITasks) {\r\n        return tasks;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function getGovernanceContract() external view returns (IPluginProposals) {\r\n        return governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function updateTasksContract(\r\n        ITasks _tasks\r\n    ) external auth(UPDATE_ADDRESSES_PERMISSION_ID) {\r\n        tasks = _tasks;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function updateGovernanceContract(\r\n        IPluginProposals _governancePlugin\r\n    ) external auth(UPDATE_ADDRESSES_PERMISSION_ID) {\r\n        governancePlugin = _governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function createDraftTask(\r\n        bytes calldata _metadata,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        CreateTaskInfo calldata _taskInfo\r\n    ) external {\r\n        // Could also add approve ERC20's of budget here\r\n        // Currently the DAO should approve select ERC20's in advance (once) for unlimited spending\r\n\r\n        IDAO.Action[] memory actions = new IDAO.Action[](1);\r\n        {\r\n            bytes memory callData = abi.encodeWithSelector(\r\n                tasks.createTask.selector,\r\n                _taskInfo.metadata,\r\n                _taskInfo.deadline,\r\n                _taskInfo.budget,\r\n                _taskInfo.manager,\r\n                _taskInfo.preapproved\r\n            );\r\n            actions[0] = IDAO.Action(address(tasks), 0, callData);\r\n        }\r\n\r\n        uint256 _proposalId = governancePlugin.createPluginProposal(\r\n            _metadata,\r\n            actions,\r\n            0,\r\n            _startDate,\r\n            _endDate\r\n        );\r\n\r\n        emit TaskDraftCreated(\r\n            _proposalId,\r\n            _metadata,\r\n            _startDate,\r\n            _endDate,\r\n            _taskInfo\r\n        );\r\n    }\r\n\r\n    /// @dev This empty reserved space is put in place to allow future versions to add new\r\n    /// variables without shifting down storage in the inheritance chain.\r\n    /// https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/DAO/TaskDrafts/TaskDraftsSetup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\nimport {DAO} from \"@aragon/osx/core/dao/DAO.sol\";\r\nimport {PermissionLib} from \"@aragon/osx/core/permission/PermissionLib.sol\";\r\nimport {PluginSetup, IPluginSetup} from \"@aragon/osx/framework/plugin/setup/PluginSetup.sol\";\r\nimport {TaskDrafts, IPluginProposals, ITasks, UPDATE_ADDRESSES_PERMISSION_ID} from \"./TaskDrafts.sol\";\r\nimport {PLUGIN_PROPOSAL_PERMISSION_ID} from \"../TokenListGovernance/IPluginProposals.sol\";\r\n\r\ncontract TaskDraftsSetup is PluginSetup {\r\n    /// @notice The address of `TaskDrafts` plugin logic contract to be used in creating proxy contracts.\r\n    TaskDrafts private immutable taskDraftsBase;\r\n\r\n    /// @notice The contract constructor, that deploys the `TaskDrafts` plugin logic contract.\r\n    constructor() {\r\n        taskDraftsBase = new TaskDrafts();\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareInstallation(\r\n        address _dao,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns (address plugin, PreparedSetupData memory preparedSetupData)\r\n    {\r\n        // Decode `_data` to extract the params needed for deploying and initializing `TaskDrafts` plugin.\r\n        (ITasks tasks, IPluginProposals governancePlugin) = abi.decode(\r\n            _data,\r\n            (ITasks, IPluginProposals)\r\n        );\r\n\r\n        // Prepare and Deploy the plugin proxy.\r\n        plugin = createERC1967Proxy(\r\n            address(taskDraftsBase),\r\n            abi.encodeWithSelector(\r\n                TaskDrafts.initialize.selector,\r\n                _dao,\r\n                tasks,\r\n                governancePlugin\r\n            )\r\n        );\r\n\r\n        // Prepare permissions\r\n        PermissionLib.MultiTargetPermission[]\r\n            memory permissions = new PermissionLib.MultiTargetPermission[](2);\r\n\r\n        // Set permissions to be granted.\r\n        // Grant the list of permissions of the plugin to the DAO.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            address(governancePlugin),\r\n            plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            PLUGIN_PROPOSAL_PERMISSION_ID\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            UPDATE_ADDRESSES_PERMISSION_ID\r\n        );\r\n\r\n        preparedSetupData.permissions = permissions;\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareUninstallation(\r\n        address _dao,\r\n        SetupPayload calldata _payload\r\n    )\r\n        external\r\n        view\r\n        returns (PermissionLib.MultiTargetPermission[] memory permissions)\r\n    {\r\n        // Prepare permissions\r\n        permissions = new PermissionLib.MultiTargetPermission[](2);\r\n\r\n        // Set permissions to be Revoked.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            address(TaskDrafts(_payload.plugin).getGovernanceContract()),\r\n            _payload.plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            PLUGIN_PROPOSAL_PERMISSION_ID\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            UPDATE_ADDRESSES_PERMISSION_ID\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function implementation() external view returns (address) {\r\n        return address(taskDraftsBase);\r\n    }\r\n}\r\n"
    },
    "contracts/DAO/TokenListGovernance/IPluginProposals.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\n\r\nbytes32 constant PLUGIN_PROPOSAL_PERMISSION_ID = keccak256(\r\n    \"PLUGIN_PROPOSAL_PERMISSION\"\r\n);\r\n\r\ninterface IPluginProposals {\r\n    /// @notice Allows other plugins to create proposals\r\n    /// @param _metadata The proposal metadata.\r\n    /// @param _actions The proposal actions.\r\n    /// @param _allowFailureMap The proposal failure map.\r\n    /// @param _startDate The proposal start date.\r\n    /// @param _endDate The proposal end date.\r\n    /// @return proposalId The id of the created proposal.\r\n    function createPluginProposal(\r\n        bytes calldata _metadata,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _allowFailureMap,\r\n        uint64 _startDate,\r\n        uint64 _endDate\r\n    ) external returns (uint256 proposalId);\r\n}\r\n"
    },
    "contracts/DAO/TokenListGovernance/ITokenListGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITokenListGovernance {\r\n    /// @notice Adds new members to the token list.\r\n    /// @param _members The Members of members to be added.\r\n    /// @dev This function is used during the plugin initialization.\r\n    function addMembers(uint256[] calldata _members) external;\r\n\r\n    /// @notice Removes existing members from the token list.\r\n    /// @param _members The Members of the members to be removed.\r\n    function removeMembers(uint256[] calldata _members) external;\r\n}\r\n"
    },
    "contracts/DAO/TokenListGovernance/TokenList.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {CheckpointsUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CheckpointsUpgradeable.sol\";\r\n\r\nimport {_uncheckedAdd, _uncheckedSub} from \"@aragon/osx/utils/UncheckedMath.sol\";\r\n\r\n// Based on https://github.com/aragon/osx/blob/develop/packages/contracts/src/plugins/utils/Addresslist.sol\r\nabstract contract TokenList {\r\n    using CheckpointsUpgradeable for CheckpointsUpgradeable.History;\r\n\r\n    event TokensAdded(uint256[] tokens);\r\n    event TokensRemoved(uint256[] tokens);\r\n\r\n    /// @notice The mapping containing the checkpointed history of the token list.\r\n    mapping(uint256 => CheckpointsUpgradeable.History)\r\n        private _tokenlistCheckpoints;\r\n\r\n    /// @notice The checkpointed history of the length of the address list.\r\n    CheckpointsUpgradeable.History private _tokenlistLengthCheckpoints;\r\n\r\n    /// @notice Thrown when the token list update is invalid, which can be caused by the addition of an existing tokenId or removal of a non-existing tokenId.\r\n    /// @param tokenId The first invalid tokenId.\r\n    error InvalidTokenlistUpdate(uint256 tokenId);\r\n\r\n    /// @notice Checks if a tokenId is on the address list at a specific block number.\r\n    /// @param _tokenId The tokenId being checked.\r\n    /// @param _blockNumber The block number.\r\n    /// @return Whether the tokenId is listed at the specified block number.\r\n    function isListedAtBlock(\r\n        uint256 _tokenId,\r\n        uint256 _blockNumber\r\n    ) public view virtual returns (bool) {\r\n        return _tokenlistCheckpoints[_tokenId].getAtBlock(_blockNumber) == 1;\r\n    }\r\n\r\n    /// @notice Checks if a tokenId is currently on the address list.\r\n    /// @param _tokenId The tokenId being checked.\r\n    /// @return Whether the tokenId is currently listed.\r\n    function isListed(uint256 _tokenId) public view virtual returns (bool) {\r\n        return _tokenlistCheckpoints[_tokenId].latest() == 1;\r\n    }\r\n\r\n    /// @notice Returns the length of the token list at a specific block number.\r\n    /// @param _blockNumber The specific block to get the count from. If `0`, then the latest checkpoint value is returned.\r\n    /// @return The token list length at the specified block number.\r\n    function tokenlistLengthAtBlock(\r\n        uint256 _blockNumber\r\n    ) public view virtual returns (uint256) {\r\n        return _tokenlistLengthCheckpoints.getAtBlock(_blockNumber);\r\n    }\r\n\r\n    /// @notice Returns the current length of the token list.\r\n    /// @return The current token list length.\r\n    function tokenlistLength() public view virtual returns (uint256) {\r\n        return _tokenlistLengthCheckpoints.latest();\r\n    }\r\n\r\n    /// @notice Internal function to add new tokens to the token list.\r\n    /// @param _newTokens The new tokens to be added.\r\n    function _addTokens(uint256[] calldata _newTokens) internal virtual {\r\n        for (uint256 i; i < _newTokens.length; ) {\r\n            if (isListed(_newTokens[i])) {\r\n                revert InvalidTokenlistUpdate(_newTokens[i]);\r\n            }\r\n\r\n            // Mark the address as listed\r\n            _tokenlistCheckpoints[_newTokens[i]].push(1);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        _tokenlistLengthCheckpoints.push(_uncheckedAdd, _newTokens.length);\r\n\r\n        emit TokensAdded(_newTokens);\r\n    }\r\n\r\n    /// @notice Internal function to remove existing tokens from the token list.\r\n    /// @param _exitingTokens The existing tokens to be removed.\r\n    function _removeTokens(uint256[] calldata _exitingTokens) internal virtual {\r\n        for (uint256 i; i < _exitingTokens.length; ) {\r\n            if (!isListed(_exitingTokens[i])) {\r\n                revert InvalidTokenlistUpdate(_exitingTokens[i]);\r\n            }\r\n\r\n            // Mark the address as not listed\r\n            _tokenlistCheckpoints[_exitingTokens[i]].push(0);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        _tokenlistLengthCheckpoints.push(_uncheckedSub, _exitingTokens.length);\r\n\r\n        emit TokensRemoved(_exitingTokens);\r\n    }\r\n\r\n    /// @dev This empty reserved space is put in place to allow future versions to add new\r\n    /// variables without shifting down storage in the inheritance chain.\r\n    /// https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/DAO/TokenListGovernance/TokenListGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; // For verification, the setup contract (deployer) is fixed on 0.8.17\r\n\r\nimport {SafeCastUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\r\nimport {RATIO_BASE, _applyRatioCeiled} from \"@aragon/osx/plugins/utils/Ratio.sol\";\r\nimport {TokenList} from \"./TokenList.sol\";\r\n\r\nimport {TokenMajorityVotingBase, IDAO, IERC721} from \"../TokenMajorityVoting/TokenMajorityVotingBase.sol\";\r\nimport {ITokenMembership} from \"../TokenMembership/ITokenMembership.sol\";\r\nimport {ITokenListGovernance} from \"./ITokenListGovernance.sol\";\r\nimport {IPluginProposals, PLUGIN_PROPOSAL_PERMISSION_ID} from \"./IPluginProposals.sol\";\r\n\r\n// Based on https://github.com/aragon/osx/blob/develop/packages/contracts/src/plugins/governance/majority-voting/addresslist/AddresslistVoting.sol\r\ncontract TokenListGovernance is\r\n    TokenMajorityVotingBase,\r\n    TokenList,\r\n    ITokenMembership,\r\n    ITokenListGovernance,\r\n    IPluginProposals\r\n{\r\n    using SafeCastUpgradeable for uint256;\r\n\r\n    /// @notice The ID of the permission required to call the `addMembers` and `removeMembers` functions.\r\n    bytes32 public constant UPDATE_MEMBERS_PERMISSION_ID =\r\n        keccak256(\"UPDATE_MEMBERS_PERMISSION\");\r\n\r\n    /// @notice Initializes the component.\r\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\r\n    /// @param _dao The IDAO interface of the associated DAO.\r\n    /// @param _votingSettings The voting settings.\r\n    /// @param _tokenCollection The ERC721 contract that defines who has what token.\r\n    /// @param _members Initial members of the DAO.\r\n    function initialize(\r\n        IDAO _dao,\r\n        VotingSettings calldata _votingSettings,\r\n        IERC721 _tokenCollection,\r\n        uint256[] calldata _members\r\n    ) external initializer {\r\n        __TokenMajorityVotingBase_init(_dao, _votingSettings, _tokenCollection);\r\n\r\n        _addTokens(_members);\r\n    }\r\n\r\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\r\n    /// @param _interfaceId The ID of the interface.\r\n    /// @return Returns `true` if the interface is supported.\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    ) public view virtual override returns (bool) {\r\n        return\r\n            _interfaceId == type(ITokenListGovernance).interfaceId ||\r\n            super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ITokenListGovernance\r\n    function addMembers(\r\n        uint256[] calldata _members\r\n    ) external auth(UPDATE_MEMBERS_PERMISSION_ID) {\r\n        _addTokens(_members);\r\n    }\r\n\r\n    /// @inheritdoc ITokenListGovernance\r\n    function removeMembers(\r\n        uint256[] calldata _members\r\n    ) external auth(UPDATE_MEMBERS_PERMISSION_ID) {\r\n        _removeTokens(_members);\r\n    }\r\n\r\n    /// @inheritdoc TokenMajorityVotingBase\r\n    function totalVotingPower(\r\n        uint256 _blockNumber\r\n    ) public view override returns (uint256) {\r\n        return tokenlistLengthAtBlock(_blockNumber);\r\n    }\r\n\r\n    /// @inheritdoc IPluginProposals\r\n    function createPluginProposal(\r\n        bytes calldata _metadata,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _allowFailureMap,\r\n        uint64 _startDate,\r\n        uint64 _endDate\r\n    )\r\n        external\r\n        auth(PLUGIN_PROPOSAL_PERMISSION_ID)\r\n        returns (uint256 proposalId)\r\n    {\r\n        proposalId = _createProposalBase(\r\n            _metadata,\r\n            _actions,\r\n            _allowFailureMap,\r\n            _startDate,\r\n            _endDate\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc TokenMajorityVotingBase\r\n    function createProposal(\r\n        bytes calldata _metadata,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _allowFailureMap,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        VoteOption _voteOption,\r\n        bool _tryEarlyExecution,\r\n        uint256 _tokenId\r\n    ) external override returns (uint256 proposalId) {\r\n        if (tokenCollection.ownerOf(_tokenId) != _msgSender()) {\r\n            revert TokenNotOwnedBySender(_tokenId, _msgSender());\r\n        }\r\n\r\n        if (minProposerVotingPower() != 0 && !isListed(_tokenId)) {\r\n            revert ProposalCreationForbidden(_tokenId);\r\n        }\r\n\r\n        proposalId = _createProposalBase(\r\n            _metadata,\r\n            _actions,\r\n            _allowFailureMap,\r\n            _startDate,\r\n            _endDate\r\n        );\r\n\r\n        if (_voteOption != VoteOption.None) {\r\n            vote(proposalId, _voteOption, _tryEarlyExecution, _tokenId);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ITokenMembership\r\n    function isMember(uint256 _account) external view override returns (bool) {\r\n        return isListed(_account);\r\n    }\r\n\r\n    function _createProposalBase(\r\n        bytes calldata _metadata,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _allowFailureMap,\r\n        uint64 _startDate,\r\n        uint64 _endDate\r\n    ) internal returns (uint256 proposalId) {\r\n        uint64 snapshotBlock;\r\n        unchecked {\r\n            snapshotBlock = block.number.toUint64() - 1; // The snapshot block must be mined already to protect the transaction against backrunning transactions causing census changes.\r\n        }\r\n\r\n        (_startDate, _endDate) = _validateProposalDates(_startDate, _endDate);\r\n\r\n        proposalId = _createProposal({\r\n            _creator: _msgSender(),\r\n            _metadata: _metadata,\r\n            _startDate: _startDate,\r\n            _endDate: _endDate,\r\n            _actions: _actions,\r\n            _allowFailureMap: _allowFailureMap\r\n        });\r\n\r\n        // Store proposal related information\r\n        Proposal storage proposal_ = proposals[proposalId];\r\n\r\n        proposal_.parameters.startDate = _startDate;\r\n        proposal_.parameters.endDate = _endDate;\r\n        proposal_.parameters.snapshotBlock = snapshotBlock;\r\n        proposal_.parameters.votingMode = votingMode();\r\n        proposal_.parameters.supportThreshold = supportThreshold();\r\n        proposal_.parameters.minVotingPower = _applyRatioCeiled(\r\n            totalVotingPower(snapshotBlock),\r\n            minParticipation()\r\n        );\r\n\r\n        // Reduce costs\r\n        if (_allowFailureMap != 0) {\r\n            proposal_.allowFailureMap = _allowFailureMap;\r\n        }\r\n\r\n        for (uint256 i; i < _actions.length; ) {\r\n            proposal_.actions.push(_actions[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc TokenMajorityVotingBase\r\n    function _vote(\r\n        uint256 _proposalId,\r\n        VoteOption _voteOption,\r\n        uint256 _voter,\r\n        bool _tryEarlyExecution\r\n    ) internal override {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        VoteOption state = proposal_.voters[_voter];\r\n\r\n        // Remove the previous vote.\r\n        if (state == VoteOption.Yes) {\r\n            proposal_.tally.yes = proposal_.tally.yes - 1;\r\n        } else if (state == VoteOption.No) {\r\n            proposal_.tally.no = proposal_.tally.no - 1;\r\n        } else if (state == VoteOption.Abstain) {\r\n            proposal_.tally.abstain = proposal_.tally.abstain - 1;\r\n        }\r\n\r\n        // Store the updated/new vote for the voter.\r\n        if (_voteOption == VoteOption.Yes) {\r\n            proposal_.tally.yes = proposal_.tally.yes + 1;\r\n        } else if (_voteOption == VoteOption.No) {\r\n            proposal_.tally.no = proposal_.tally.no + 1;\r\n        } else if (_voteOption == VoteOption.Abstain) {\r\n            proposal_.tally.abstain = proposal_.tally.abstain + 1;\r\n        }\r\n\r\n        proposal_.voters[_voter] = _voteOption;\r\n\r\n        emit VoteCast({\r\n            proposalId: _proposalId,\r\n            voter: _voter,\r\n            voteOption: _voteOption,\r\n            votingPower: 1\r\n        });\r\n\r\n        if (_tryEarlyExecution && _canExecute(_proposalId)) {\r\n            _execute(_proposalId);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc TokenMajorityVotingBase\r\n    function _canVote(\r\n        uint256 _proposalId,\r\n        uint256 _account,\r\n        VoteOption _voteOption\r\n    ) internal view override returns (bool) {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        // The proposal vote hasn't started or has already ended.\r\n        if (!_isProposalOpen(proposal_)) {\r\n            return false;\r\n        }\r\n\r\n        // The voter votes `None` which is not allowed.\r\n        if (_voteOption == VoteOption.None) {\r\n            return false;\r\n        }\r\n\r\n        // The voter has no voting power.\r\n        if (!isListedAtBlock(_account, proposal_.parameters.snapshotBlock)) {\r\n            return false;\r\n        }\r\n\r\n        // The voter has already voted but vote replacement is not allowed.\r\n        if (\r\n            proposal_.voters[_account] != VoteOption.None &&\r\n            proposal_.parameters.votingMode != VotingMode.VoteReplacement\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This empty reserved space is put in place to allow future versions to add new\r\n    /// variables without shifting down storage in the inheritance chain.\r\n    /// https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/DAO/TokenListGovernance/TokenListGovernanceSetup.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\nimport {DAO} from \"@aragon/osx/core/dao/DAO.sol\";\r\nimport {PermissionLib} from \"@aragon/osx/core/permission/PermissionLib.sol\";\r\nimport {PluginSetup, IPluginSetup} from \"@aragon/osx/framework/plugin/setup/PluginSetup.sol\";\r\nimport {TokenListGovernance, TokenMajorityVotingBase} from \"./TokenListGovernance.sol\";\r\n\r\n// Based on https://github.com/aragon/osx/blob/develop/packages/contracts/src/plugins/governance/majority-voting/addresslist/AddresslistVotingSetup.sol\r\ncontract TokenListGovernanceSetup is PluginSetup {\r\n    /// @notice The address of `TokenListGovernance` plugin logic contract to be used in creating proxy contracts.\r\n    TokenListGovernance private immutable tokenListGovernanceBase;\r\n\r\n    /// @notice The contract constructor, that deploys the `TokenListGovernance` plugin logic contract.\r\n    constructor() {\r\n        tokenListGovernanceBase = new TokenListGovernance();\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareInstallation(\r\n        address _dao,\r\n        bytes calldata _data\r\n    )\r\n        external\r\n        returns (address plugin, PreparedSetupData memory preparedSetupData)\r\n    {\r\n        // Decode `_data` to extract the params needed for deploying and initializing `TokenListGovernance` plugin.\r\n        (\r\n            TokenMajorityVotingBase.VotingSettings memory votingSettings,\r\n            address tokenCollection,\r\n            uint256[] memory members,\r\n            address manager\r\n        ) = abi.decode(\r\n                _data,\r\n                (\r\n                    TokenMajorityVotingBase.VotingSettings,\r\n                    address,\r\n                    uint256[],\r\n                    address\r\n                )\r\n            );\r\n\r\n        // Prepare and Deploy the plugin proxy.\r\n        plugin = createERC1967Proxy(\r\n            address(tokenListGovernanceBase),\r\n            abi.encodeWithSelector(\r\n                TokenListGovernance.initialize.selector,\r\n                _dao,\r\n                votingSettings,\r\n                tokenCollection,\r\n                members\r\n            )\r\n        );\r\n\r\n        // Prepare permissions\r\n        PermissionLib.MultiTargetPermission[]\r\n            memory permissions = new PermissionLib.MultiTargetPermission[](5);\r\n\r\n        // Set permissions to be granted.\r\n        // Grant the list of permissions of the plugin to the DAO.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPDATE_MEMBERS_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPDATE_VOTING_SETTINGS_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPGRADE_PLUGIN_PERMISSION_ID()\r\n        );\r\n\r\n        // Grant `EXECUTE_PERMISSION` of the DAO to the plugin.\r\n        permissions[3] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            _dao,\r\n            plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            DAO(payable(_dao)).EXECUTE_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[4] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            manager,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPDATE_MEMBERS_PERMISSION_ID()\r\n        );\r\n\r\n        preparedSetupData.permissions = permissions;\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareUninstallation(\r\n        address _dao,\r\n        SetupPayload calldata _payload\r\n    )\r\n        external\r\n        view\r\n        returns (PermissionLib.MultiTargetPermission[] memory permissions)\r\n    {\r\n        // Prepare permissions\r\n        permissions = new PermissionLib.MultiTargetPermission[](4);\r\n\r\n        // Set permissions to be Revoked.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPDATE_MEMBERS_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPDATE_VOTING_SETTINGS_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            tokenListGovernanceBase.UPGRADE_PLUGIN_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[3] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _dao,\r\n            _payload.plugin,\r\n            PermissionLib.NO_CONDITION,\r\n            DAO(payable(_dao)).EXECUTE_PERMISSION_ID()\r\n        );\r\n\r\n        // manager permission ?\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function implementation() external view returns (address) {\r\n        return address(tokenListGovernanceBase);\r\n    }\r\n}\r\n"
    },
    "contracts/DAO/TokenMajorityVoting/ITokenMajorityVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\n\r\ninterface ITokenMajorityVoting {\r\n    /// @notice Vote options that a voter can chose from.\r\n    /// @param None The default option state of a voter indicating the absence from the vote. This option neither influences support nor participation.\r\n    /// @param Abstain This option does not influence the support but counts towards participation.\r\n    /// @param Yes This option increases the support and counts towards participation.\r\n    /// @param No This option decreases the support and counts towards participation.\r\n    enum VoteOption {\r\n        None,\r\n        Abstain,\r\n        Yes,\r\n        No\r\n    }\r\n\r\n    /// @notice Emitted when a vote is cast by a voter.\r\n    /// @param proposalId The ID of the proposal.\r\n    /// @param voter The voter casting the vote.\r\n    /// @param voteOption The casted vote option.\r\n    /// @param votingPower The voting power behind this vote.\r\n    event VoteCast(\r\n        uint256 indexed proposalId,\r\n        uint256 indexed voter,\r\n        VoteOption voteOption,\r\n        uint256 votingPower\r\n    );\r\n\r\n    /// @notice Returns the support threshold parameter stored in the voting settings.\r\n    /// @return The support threshold parameter.\r\n    function supportThreshold() external view returns (uint32);\r\n\r\n    /// @notice Returns the minimum participation parameter stored in the voting settings.\r\n    /// @return The minimum participation parameter.\r\n    function minParticipation() external view returns (uint32);\r\n\r\n    /// @notice Checks if the support value defined as $$\\texttt{support} = \\frac{N_\\text{yes}}{N_\\text{yes}+N_\\text{no}}$$ for a proposal vote is greater than the support threshold.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @return Returns `true` if the  support is greater than the support threshold and `false` otherwise.\r\n    function isSupportThresholdReached(\r\n        uint256 _proposalId\r\n    ) external view returns (bool);\r\n\r\n    /// @notice Checks if the worst-case support value defined as $$\\texttt{worstCaseSupport} = \\frac{N_\\text{yes}}{ N_\\text{total}-N_\\text{abstain}}$$ for a proposal vote is greater than the support threshold.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @return Returns `true` if the worst-case support is greater than the support threshold and `false` otherwise.\r\n    function isSupportThresholdReachedEarly(\r\n        uint256 _proposalId\r\n    ) external view returns (bool);\r\n\r\n    /// @notice Checks if the participation value defined as $$\\texttt{participation} = \\frac{N_\\text{yes}+N_\\text{no}+N_\\text{abstain}}{N_\\text{total}}$$ for a proposal vote is greater or equal than the minimum participation value.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @return Returns `true` if the participation is greater than the minimum participation and `false` otherwise.\r\n    function isMinParticipationReached(\r\n        uint256 _proposalId\r\n    ) external view returns (bool);\r\n\r\n    /// @notice Checks if an account can participate on a proposal vote. This can be because the vote\r\n    /// - has not started,\r\n    /// - has ended,\r\n    /// - was executed, or\r\n    /// - the voter doesn't have voting powers.\r\n    /// @param _proposalId The proposal Id.\r\n    /// @param _account The account tokenId to be checked.\r\n    /// @param  _voteOption Whether the voter abstains, supports or opposes the proposal.\r\n    /// @return Returns true if the account is allowed to vote.\r\n    /// @dev The function assumes the queried proposal exists.\r\n    function canVote(\r\n        uint256 _proposalId,\r\n        uint256 _account,\r\n        VoteOption _voteOption\r\n    ) external view returns (bool);\r\n\r\n    /// @notice Checks if a proposal can be executed.\r\n    /// @param _proposalId The ID of the proposal to be checked.\r\n    /// @return True if the proposal can be executed, false otherwise.\r\n    function canExecute(uint256 _proposalId) external view returns (bool);\r\n\r\n    /// @notice Votes for a vote option and, optionally, executes the proposal.\r\n    /// @dev `_voteOption`, 1 -> abstain, 2 -> yes, 3 -> no\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @param _voteOption The chosen vote option.\r\n    /// @param _tryEarlyExecution If `true`,  early execution is tried after the vote cast. The call does not revert if early execution is not possible.\r\n    /// @param _tokenId TokenId to use for this vote.\r\n    function vote(\r\n        uint256 _proposalId,\r\n        VoteOption _voteOption,\r\n        bool _tryEarlyExecution,\r\n        uint256 _tokenId\r\n    ) external;\r\n\r\n    /// @notice Executes a proposal.\r\n    /// @param _proposalId The ID of the proposal to be executed.\r\n    function execute(uint256 _proposalId) external;\r\n\r\n    /// @notice Returns whether the account has voted for the proposal.  Note, that this does not check if the account has voting power.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @param _account The account tokenId to be checked.\r\n    /// @return The vote option cast by a voter for a certain proposal.\r\n    function getVoteOption(\r\n        uint256 _proposalId,\r\n        uint256 _account\r\n    ) external view returns (VoteOption);\r\n}\r\n"
    },
    "contracts/DAO/TokenMajorityVoting/TokenMajorityVotingBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {SafeCastUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nimport {IProposal} from \"@aragon/osx/core/plugin/proposal/IProposal.sol\";\r\nimport {ProposalUpgradeable} from \"@aragon/osx/core/plugin/proposal/ProposalUpgradeable.sol\";\r\nimport {PluginUUPSUpgradeable} from \"@aragon/osx/core/plugin/PluginUUPSUpgradeable.sol\";\r\nimport {IDAO} from \"@aragon/osx/core/dao/IDAO.sol\";\r\nimport {RATIO_BASE, RatioOutOfBounds} from \"@aragon/osx/plugins/utils/Ratio.sol\";\r\nimport {ITokenMajorityVoting} from \"./ITokenMajorityVoting.sol\";\r\n\r\n// Based on packages/contracts/src/plugins/governance/majority-voting/MajorityVotingBase.sol\r\nabstract contract TokenMajorityVotingBase is\r\n    ITokenMajorityVoting,\r\n    Initializable,\r\n    ERC165Upgradeable,\r\n    PluginUUPSUpgradeable,\r\n    ProposalUpgradeable\r\n{\r\n    using SafeCastUpgradeable for uint256;\r\n\r\n    /// @notice The different voting modes available.\r\n    /// @param Standard In standard mode, early execution and vote replacement are disabled.\r\n    /// @param EarlyExecution In early execution mode, a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting.\r\n    /// @param VoteReplacement In vote replacement mode, voters can change their vote multiple times and only the latest vote option is tallied.\r\n    enum VotingMode {\r\n        Standard,\r\n        EarlyExecution,\r\n        VoteReplacement\r\n    }\r\n\r\n    /// @notice A container for the majority voting settings that will be applied as parameters on proposal creation.\r\n    /// @param votingMode A parameter to select the vote mode. In standard mode (0), early execution and vote replacement are disabled. In early execution mode (1), a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting. In vote replacement mode (2), voters can change their vote multiple times and only the latest vote option is tallied.\r\n    /// @param supportThreshold The support threshold value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\r\n    /// @param minParticipation The minimum participation value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\r\n    /// @param minDuration The minimum duration of the proposal vote in seconds.\r\n    /// @param minProposerVotingPower The minimum voting power required to create a proposal.\r\n    struct VotingSettings {\r\n        VotingMode votingMode;\r\n        uint32 supportThreshold;\r\n        uint32 minParticipation;\r\n        uint64 minDuration;\r\n        uint256 minProposerVotingPower;\r\n    }\r\n\r\n    /// @notice A container for proposal-related information.\r\n    /// @param executed Whether the proposal is executed or not.\r\n    /// @param parameters The proposal parameters at the time of the proposal creation.\r\n    /// @param tally The vote tally of the proposal.\r\n    /// @param voters The votes casted by the voters.\r\n    /// @param actions The actions to be executed when the proposal passes.\r\n    /// @param allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\r\n    struct Proposal {\r\n        bool executed;\r\n        ProposalParameters parameters;\r\n        Tally tally;\r\n        mapping(uint256 => ITokenMajorityVoting.VoteOption) voters;\r\n        IDAO.Action[] actions;\r\n        uint256 allowFailureMap;\r\n    }\r\n\r\n    /// @notice A container for the proposal parameters at the time of proposal creation.\r\n    /// @param votingMode A parameter to select the vote mode.\r\n    /// @param supportThreshold The support threshold value. The value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\r\n    /// @param startDate The start date of the proposal vote.\r\n    /// @param endDate The end date of the proposal vote.\r\n    /// @param snapshotBlock The number of the block prior to the proposal creation.\r\n    /// @param minVotingPower The minimum voting power needed.\r\n    struct ProposalParameters {\r\n        VotingMode votingMode;\r\n        uint32 supportThreshold;\r\n        uint64 startDate;\r\n        uint64 endDate;\r\n        uint64 snapshotBlock;\r\n        uint256 minVotingPower;\r\n    }\r\n\r\n    /// @notice A container for the proposal vote tally.\r\n    /// @param abstain The number of abstain votes casted.\r\n    /// @param yes The number of yes votes casted.\r\n    /// @param no The number of no votes casted.\r\n    struct Tally {\r\n        uint256 abstain;\r\n        uint256 yes;\r\n        uint256 no;\r\n    }\r\n\r\n    /// @notice The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID of the contract.\r\n    bytes4 internal constant MAJORITY_VOTING_BASE_INTERFACE_ID =\r\n        this.minDuration.selector ^\r\n            this.minProposerVotingPower.selector ^\r\n            this.votingMode.selector ^\r\n            this.totalVotingPower.selector ^\r\n            this.getProposal.selector ^\r\n            this.updateVotingSettings.selector ^\r\n            this.createProposal.selector;\r\n\r\n    /// @notice The ID of the permission required to call the `updateVotingSettings` function.\r\n    bytes32 public constant UPDATE_VOTING_SETTINGS_PERMISSION_ID =\r\n        keccak256(\"UPDATE_VOTING_SETTINGS_PERMISSION\");\r\n\r\n    /// @notice A mapping between proposal IDs and proposal information.\r\n    mapping(uint256 => Proposal) internal proposals;\r\n\r\n    /// @notice The struct storing the voting settings.\r\n    VotingSettings private votingSettings;\r\n\r\n    /// @notice the NFT collections the tokens belong to.\r\n    IERC721 internal tokenCollection;\r\n\r\n    /// @notice Thrown if a date is out of bounds.\r\n    /// @param limit The limit value.\r\n    /// @param actual The actual value.\r\n    error DateOutOfBounds(uint64 limit, uint64 actual);\r\n\r\n    /// @notice Thrown if the minimal duration value is out of bounds (less than one hour or greater than 1 year).\r\n    /// @param limit The limit value.\r\n    /// @param actual The actual value.\r\n    error MinDurationOutOfBounds(uint64 limit, uint64 actual);\r\n\r\n    /// @notice Thrown when a sender is not allowed to create a proposal.\r\n    /// @param sender The sender tokenId.\r\n    error ProposalCreationForbidden(uint256 sender);\r\n\r\n    /// @notice Thrown if an account is not allowed to cast a vote. This can be because the vote\r\n    /// - has not started,\r\n    /// - has ended,\r\n    /// - was executed, or\r\n    /// - the account doesn't have voting powers.\r\n    /// @param proposalId The ID of the proposal.\r\n    /// @param account The tokenId of the _account.\r\n    /// @param voteOption The chosen vote option.\r\n    error VoteCastForbidden(\r\n        uint256 proposalId,\r\n        uint256 account,\r\n        VoteOption voteOption\r\n    );\r\n\r\n    /// @notice Thrown if the proposal execution is forbidden.\r\n    /// @param proposalId The ID of the proposal.\r\n    error ProposalExecutionForbidden(uint256 proposalId);\r\n\r\n    /// @notice Thrown if the given tokenId is not owned by the sender.\r\n    /// @param tokenId The ID of the token.\r\n    /// @param sender The address that made the call.\r\n    error TokenNotOwnedBySender(uint256 tokenId, address sender);\r\n\r\n    /// @notice Emitted when the voting settings are updated.\r\n    /// @param votingMode A parameter to select the vote mode.\r\n    /// @param supportThreshold The support threshold value.\r\n    /// @param minParticipation The minimum participation value.\r\n    /// @param minDuration The minimum duration of the proposal vote in seconds.\r\n    /// @param minProposerVotingPower The minimum voting power required to create a proposal.\r\n    event VotingSettingsUpdated(\r\n        VotingMode votingMode,\r\n        uint32 supportThreshold,\r\n        uint32 minParticipation,\r\n        uint64 minDuration,\r\n        uint256 minProposerVotingPower\r\n    );\r\n\r\n    /// @notice Initializes the component to be used by inheriting contracts.\r\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\r\n    /// @param _dao The IDAO interface of the associated DAO.\r\n    /// @param _votingSettings The voting settings.\r\n    function __TokenMajorityVotingBase_init(\r\n        IDAO _dao,\r\n        VotingSettings calldata _votingSettings,\r\n        IERC721 _tokenCollection\r\n    ) internal onlyInitializing {\r\n        __PluginUUPSUpgradeable_init(_dao);\r\n        _updateVotingSettings(_votingSettings);\r\n\r\n        tokenCollection = _tokenCollection;\r\n    }\r\n\r\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\r\n    /// @param _interfaceId The ID of the interface.\r\n    /// @return Returns `true` if the interface is supported.\r\n    function supportsInterface(\r\n        bytes4 _interfaceId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165Upgradeable, PluginUUPSUpgradeable, ProposalUpgradeable)\r\n        returns (bool)\r\n    {\r\n        return\r\n            _interfaceId == MAJORITY_VOTING_BASE_INTERFACE_ID ||\r\n            _interfaceId == type(ITokenMajorityVoting).interfaceId ||\r\n            super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function vote(\r\n        uint256 _proposalId,\r\n        VoteOption _voteOption,\r\n        bool _tryEarlyExecution,\r\n        uint256 _tokenId\r\n    ) public virtual {\r\n        if (tokenCollection.ownerOf(_tokenId) != _msgSender()) {\r\n            revert TokenNotOwnedBySender(_tokenId, _msgSender());\r\n        }\r\n\r\n        if (!_canVote(_proposalId, _tokenId, _voteOption)) {\r\n            revert VoteCastForbidden({\r\n                proposalId: _proposalId,\r\n                account: _tokenId,\r\n                voteOption: _voteOption\r\n            });\r\n        }\r\n        _vote(_proposalId, _voteOption, _tokenId, _tryEarlyExecution);\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function execute(uint256 _proposalId) public virtual {\r\n        if (!_canExecute(_proposalId)) {\r\n            revert ProposalExecutionForbidden(_proposalId);\r\n        }\r\n        _execute(_proposalId);\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function getVoteOption(\r\n        uint256 _proposalId,\r\n        uint256 _account\r\n    ) public view virtual returns (VoteOption) {\r\n        return proposals[_proposalId].voters[_account];\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function canVote(\r\n        uint256 _proposalId,\r\n        uint256 _account,\r\n        VoteOption _voteOption\r\n    ) public view virtual returns (bool) {\r\n        return _canVote(_proposalId, _account, _voteOption);\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function canExecute(\r\n        uint256 _proposalId\r\n    ) public view virtual returns (bool) {\r\n        return _canExecute(_proposalId);\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function isSupportThresholdReached(\r\n        uint256 _proposalId\r\n    ) public view virtual returns (bool) {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        // The code below implements the formula of the support criterion explained in the top of this file.\r\n        // `(1 - supportThreshold) * N_yes > supportThreshold *  N_no`\r\n        return\r\n            (RATIO_BASE - proposal_.parameters.supportThreshold) *\r\n                proposal_.tally.yes >\r\n            proposal_.parameters.supportThreshold * proposal_.tally.no;\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function isSupportThresholdReachedEarly(\r\n        uint256 _proposalId\r\n    ) public view virtual returns (bool) {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        uint256 noVotesWorstCase = totalVotingPower(\r\n            proposal_.parameters.snapshotBlock\r\n        ) -\r\n            proposal_.tally.yes -\r\n            proposal_.tally.abstain;\r\n\r\n        // The code below implements the formula of the early execution support criterion explained in the top of this file.\r\n        // `(1 - supportThreshold) * N_yes > supportThreshold *  N_no,worst-case`\r\n        return\r\n            (RATIO_BASE - proposal_.parameters.supportThreshold) *\r\n                proposal_.tally.yes >\r\n            proposal_.parameters.supportThreshold * noVotesWorstCase;\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function isMinParticipationReached(\r\n        uint256 _proposalId\r\n    ) public view virtual returns (bool) {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        // The code below implements the formula of the participation criterion explained in the top of this file.\r\n        // `N_yes + N_no + N_abstain >= minVotingPower = minParticipation * N_total`\r\n        return\r\n            proposal_.tally.yes +\r\n                proposal_.tally.no +\r\n                proposal_.tally.abstain >=\r\n            proposal_.parameters.minVotingPower;\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function supportThreshold() public view virtual returns (uint32) {\r\n        return votingSettings.supportThreshold;\r\n    }\r\n\r\n    /// @inheritdoc ITokenMajorityVoting\r\n    function minParticipation() public view virtual returns (uint32) {\r\n        return votingSettings.minParticipation;\r\n    }\r\n\r\n    /// @notice Returns the minimum duration parameter stored in the voting settings.\r\n    /// @return The minimum duration parameter.\r\n    function minDuration() public view virtual returns (uint64) {\r\n        return votingSettings.minDuration;\r\n    }\r\n\r\n    /// @notice Returns the minimum voting power required to create a proposal stored in the voting settings.\r\n    /// @return The minimum voting power required to create a proposal.\r\n    function minProposerVotingPower() public view virtual returns (uint256) {\r\n        return votingSettings.minProposerVotingPower;\r\n    }\r\n\r\n    /// @notice Returns the vote mode stored in the voting settings.\r\n    /// @return The vote mode parameter.\r\n    function votingMode() public view virtual returns (VotingMode) {\r\n        return votingSettings.votingMode;\r\n    }\r\n\r\n    /// @notice Returns the total voting power checkpointed for a specific block number.\r\n    /// @param _blockNumber The block number.\r\n    /// @return The total voting power.\r\n    function totalVotingPower(\r\n        uint256 _blockNumber\r\n    ) public view virtual returns (uint256);\r\n\r\n    /// @notice Returns all information for a proposal vote by its ID.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @return open Whether the proposal is open or not.\r\n    /// @return executed Whether the proposal is executed or not.\r\n    /// @return parameters The parameters of the proposal vote.\r\n    /// @return tally The current tally of the proposal vote.\r\n    /// @return actions The actions to be executed in the associated DAO after the proposal has passed.\r\n    /// @return allowFailureMap The bit map representations of which actions are allowed to revert so tx still succeeds.\r\n    function getProposal(\r\n        uint256 _proposalId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            bool open,\r\n            bool executed,\r\n            ProposalParameters memory parameters,\r\n            Tally memory tally,\r\n            IDAO.Action[] memory actions,\r\n            uint256 allowFailureMap\r\n        )\r\n    {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        open = _isProposalOpen(proposal_);\r\n        executed = proposal_.executed;\r\n        parameters = proposal_.parameters;\r\n        tally = proposal_.tally;\r\n        actions = proposal_.actions;\r\n        allowFailureMap = proposal_.allowFailureMap;\r\n    }\r\n\r\n    /// @notice Updates the voting settings.\r\n    /// @param _votingSettings The new voting settings.\r\n    function updateVotingSettings(\r\n        VotingSettings calldata _votingSettings\r\n    ) external virtual auth(UPDATE_VOTING_SETTINGS_PERMISSION_ID) {\r\n        _updateVotingSettings(_votingSettings);\r\n    }\r\n\r\n    /// @notice Creates a new majority voting proposal.\r\n    /// @param _metadata The metadata of the proposal.\r\n    /// @param _actions The actions that will be executed after the proposal passes.\r\n    /// @param _allowFailureMap Allows proposal to succeed even if an action reverts. Uses bitmap representation. If the bit at index `x` is 1, the tx succeeds even if the action at `x` failed. Passing 0 will be treated as atomic execution.\r\n    /// @param _startDate The start date of the proposal vote. If 0, the current timestamp is used and the vote starts immediately.\r\n    /// @param _endDate The end date of the proposal vote. If 0, `_startDate + minDuration` is used.\r\n    /// @param _voteOption The chosen vote option to be casted on proposal creation.\r\n    /// @param _tryEarlyExecution If `true`,  early execution is tried after the vote cast. The call does not revert if early execution is not possible.\r\n    /// @return proposalId The ID of the proposal.\r\n    function createProposal(\r\n        bytes calldata _metadata,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _allowFailureMap,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        VoteOption _voteOption,\r\n        bool _tryEarlyExecution,\r\n        uint256 _tokenId\r\n    ) external virtual returns (uint256 proposalId);\r\n\r\n    /// @notice Internal function to cast a vote. It assumes the queried vote exists.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @param _voteOption The chosen vote option to be casted on the proposal vote.\r\n    /// @param _voter The ID of the token that is voting.\r\n    /// @param _tryEarlyExecution If `true`,  early execution is tried after the vote cast. The call does not revert if early execution is not possible.\r\n    function _vote(\r\n        uint256 _proposalId,\r\n        VoteOption _voteOption,\r\n        uint256 _voter,\r\n        bool _tryEarlyExecution\r\n    ) internal virtual;\r\n\r\n    /// @notice Internal function to execute a vote. It assumes the queried proposal exists.\r\n    /// @param _proposalId The ID of the proposal.\r\n    function _execute(uint256 _proposalId) internal virtual {\r\n        proposals[_proposalId].executed = true;\r\n\r\n        _executeProposal(\r\n            dao(),\r\n            _proposalId,\r\n            proposals[_proposalId].actions,\r\n            proposals[_proposalId].allowFailureMap\r\n        );\r\n    }\r\n\r\n    /// @notice Internal function to check if a voter can vote. It assumes the queried proposal exists.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @param _voter The address of the voter to check.\r\n    /// @param  _voteOption Whether the voter abstains, supports or opposes the proposal.\r\n    /// @return Returns `true` if the given voter can vote on a certain proposal and `false` otherwise.\r\n    function _canVote(\r\n        uint256 _proposalId,\r\n        uint256 _voter,\r\n        VoteOption _voteOption\r\n    ) internal view virtual returns (bool);\r\n\r\n    /// @notice Internal function to check if a proposal can be executed. It assumes the queried proposal exists.\r\n    /// @param _proposalId The ID of the proposal.\r\n    /// @return True if the proposal can be executed, false otherwise.\r\n    /// @dev Threshold and minimal values are compared with `>` and `>=` comparators, respectively.\r\n    function _canExecute(\r\n        uint256 _proposalId\r\n    ) internal view virtual returns (bool) {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        // Verify that the vote has not been executed already.\r\n        if (proposal_.executed) {\r\n            return false;\r\n        }\r\n\r\n        if (_isProposalOpen(proposal_)) {\r\n            // Early execution\r\n            if (proposal_.parameters.votingMode != VotingMode.EarlyExecution) {\r\n                return false;\r\n            }\r\n            if (!isSupportThresholdReachedEarly(_proposalId)) {\r\n                return false;\r\n            }\r\n        } else {\r\n            // Normal execution\r\n            if (!isSupportThresholdReached(_proposalId)) {\r\n                return false;\r\n            }\r\n        }\r\n        if (!isMinParticipationReached(_proposalId)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Internal function to check if a proposal vote is still open.\r\n    /// @param proposal_ The proposal struct.\r\n    /// @return True if the proposal vote is open, false otherwise.\r\n    function _isProposalOpen(\r\n        Proposal storage proposal_\r\n    ) internal view virtual returns (bool) {\r\n        uint64 currentTime = block.timestamp.toUint64();\r\n\r\n        return\r\n            proposal_.parameters.startDate <= currentTime &&\r\n            currentTime < proposal_.parameters.endDate &&\r\n            !proposal_.executed;\r\n    }\r\n\r\n    /// @notice Internal function to update the plugin-wide proposal vote settings.\r\n    /// @param _votingSettings The voting settings to be validated and updated.\r\n    function _updateVotingSettings(\r\n        VotingSettings calldata _votingSettings\r\n    ) internal virtual {\r\n        // Require the support threshold value to be in the interval [0, 10^6-1], because `>` comparision is used in the support criterion and >100% could never be reached.\r\n        if (_votingSettings.supportThreshold > RATIO_BASE - 1) {\r\n            revert RatioOutOfBounds({\r\n                limit: RATIO_BASE - 1,\r\n                actual: _votingSettings.supportThreshold\r\n            });\r\n        }\r\n\r\n        // Require the minimum participation value to be in the interval [0, 10^6], because `>=` comparision is used in the participation criterion.\r\n        if (_votingSettings.minParticipation > RATIO_BASE) {\r\n            revert RatioOutOfBounds({\r\n                limit: RATIO_BASE,\r\n                actual: _votingSettings.minParticipation\r\n            });\r\n        }\r\n\r\n        if (_votingSettings.minDuration < 60 minutes) {\r\n            revert MinDurationOutOfBounds({\r\n                limit: 60 minutes,\r\n                actual: _votingSettings.minDuration\r\n            });\r\n        }\r\n\r\n        if (_votingSettings.minDuration > 365 days) {\r\n            revert MinDurationOutOfBounds({\r\n                limit: 365 days,\r\n                actual: _votingSettings.minDuration\r\n            });\r\n        }\r\n\r\n        votingSettings = _votingSettings;\r\n\r\n        emit VotingSettingsUpdated({\r\n            votingMode: _votingSettings.votingMode,\r\n            supportThreshold: _votingSettings.supportThreshold,\r\n            minParticipation: _votingSettings.minParticipation,\r\n            minDuration: _votingSettings.minDuration,\r\n            minProposerVotingPower: _votingSettings.minProposerVotingPower\r\n        });\r\n    }\r\n\r\n    /// @notice Validates and returns the proposal vote dates.\r\n    /// @param _start The start date of the proposal vote. If 0, the current timestamp is used and the vote starts immediately.\r\n    /// @param _end The end date of the proposal vote. If 0, `_start + minDuration` is used.\r\n    /// @return startDate The validated start date of the proposal vote.\r\n    /// @return endDate The validated end date of the proposal vote.\r\n    function _validateProposalDates(\r\n        uint64 _start,\r\n        uint64 _end\r\n    ) internal view virtual returns (uint64 startDate, uint64 endDate) {\r\n        uint64 currentTimestamp = block.timestamp.toUint64();\r\n\r\n        if (_start == 0) {\r\n            startDate = currentTimestamp;\r\n        } else {\r\n            startDate = _start;\r\n\r\n            if (startDate < currentTimestamp) {\r\n                revert DateOutOfBounds({\r\n                    limit: currentTimestamp,\r\n                    actual: startDate\r\n                });\r\n            }\r\n        }\r\n\r\n        uint64 earliestEndDate = startDate + votingSettings.minDuration; // Since `minDuration` is limited to 1 year, `startDate + minDuration` can only overflow if the `startDate` is after `type(uint64).max - minDuration`. In this case, the proposal creation will revert and another date can be picked.\r\n\r\n        if (_end == 0) {\r\n            endDate = earliestEndDate;\r\n        } else {\r\n            endDate = _end;\r\n\r\n            if (endDate < earliestEndDate) {\r\n                revert DateOutOfBounds({\r\n                    limit: earliestEndDate,\r\n                    actual: endDate\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\r\n    uint256[50] private __gap;\r\n}\r\n"
    },
    "contracts/DAO/TokenMembership/ITokenMembership.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITokenMembership {\r\n    /// @notice Emitted when members are added to the DAO plugin.\r\n    /// @param members The list of new members being added.\r\n    event MembersAdded(uint256[] members);\r\n\r\n    /// @notice Emitted when members are removed from the DAO plugin.\r\n    /// @param members The list of existing members being removed.\r\n    event MembersRemoved(uint256[] members);\r\n\r\n    /// @notice Emitted to announce the membership being defined by a contract.\r\n    /// @param definingContract The contract defining the membership.\r\n    event MembershipContractAnnounced(address indexed definingContract);\r\n\r\n    /// @notice Checks if an account is a member of the DAO.\r\n    /// @param _account The tokenId of the account to be checked.\r\n    /// @return Whether the account is a member or not.\r\n    /// @dev This function must be implemented in the plugin contract that introduces the members to the DAO.\r\n    function isMember(uint256 _account) external view returns (bool);\r\n}\r\n"
    },
    "contracts/Deps/hats-protocol/Interfaces/HatsErrors.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// Copyright (C) 2023 Haberdasher Labs\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.13;\n\ninterface HatsErrors {\n    /// @notice Emitted when `user` is attempting to perform an action on `hatId` but is not wearing one of `hatId`'s admin hats\n    /// @dev Can be equivalent to `NotHatWearer(buildHatId(hatId))`, such as when emitted by `approveLinkTopHatToTree` or `relinkTopHatToTree`\n    error NotAdmin(address user, uint256 hatId);\n\n    /// @notice Emitted when attempting to perform an action as or for an account that is not a wearer of a given hat\n    error NotHatWearer();\n\n    /// @notice Emitted when attempting to perform an action that requires being either an admin or wearer of a given hat\n    error NotAdminOrWearer();\n\n    /// @notice Emitted when attempting to mint `hatId` but `hatId`'s maxSupply has been reached\n    error AllHatsWorn(uint256 hatId);\n\n    /// @notice Emitted when attempting to create a hat with a level 14 hat as its admin\n    error MaxLevelsReached();\n\n    /// @notice Emitted when an attempted hat id has empty intermediate level(s)\n    error InvalidHatId();\n\n    /// @notice Emitted when attempting to mint `hatId` to a `wearer` who is already wearing the hat\n    error AlreadyWearingHat(address wearer, uint256 hatId);\n\n    /// @notice Emitted when attempting to mint a non-existant hat\n    error HatDoesNotExist(uint256 hatId);\n\n    /// @notice Emmitted when attempting to mint or transfer a hat that is not active\n    error HatNotActive();\n\n    /// @notice Emitted when attempting to mint or transfer a hat to an ineligible wearer\n    error NotEligible();\n\n    /// @notice Emitted when attempting to check or set a hat's status from an account that is not that hat's toggle module\n    error NotHatsToggle();\n\n    /// @notice Emitted when attempting to check or set a hat wearer's status from an account that is not that hat's eligibility module\n    error NotHatsEligibility();\n\n    /// @notice Emitted when array arguments to a batch function have mismatching lengths\n    error BatchArrayLengthMismatch();\n\n    /// @notice Emitted when attempting to mutate or transfer an immutable hat\n    error Immutable();\n\n    /// @notice Emitted when attempting to change a hat's maxSupply to a value lower than its current supply\n    error NewMaxSupplyTooLow();\n\n    /// @notice Emitted when attempting to link a tophat to a new admin for which the tophat serves as an admin\n    error CircularLinkage();\n\n    /// @notice Emitted when attempting to link or relink a tophat to a separate tree\n    error CrossTreeLinkage();\n\n    /// @notice Emitted when attempting to link a tophat without a request\n    error LinkageNotRequested();\n\n    /// @notice Emitted when attempting to unlink a tophat that does not have a wearer\n    /// @dev This ensures that unlinking never results in a bricked tophat\n    error InvalidUnlink();\n\n    /// @notice Emmited when attempting to change a hat's eligibility or toggle module to the zero address\n    error ZeroAddress();\n\n    /// @notice Emmitted when attempting to change a hat's details or imageURI to a string with over 7000 bytes (~characters)\n    /// @dev This protects against a DOS attack where an admin iteratively extend's a hat's details or imageURI\n    ///      to be so long that reading it exceeds the block gas limit, breaking `uri()` and `viewHat()`\n    error StringTooLong();\n}\n"
    },
    "contracts/Deps/hats-protocol/Interfaces/HatsEvents.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// Copyright (C) 2023 Haberdasher Labs\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.13;\n\ninterface HatsEvents {\n    /// @notice Emitted when a new hat is created\n    /// @param id The id for the new hat\n    /// @param details A description of the Hat\n    /// @param maxSupply The total instances of the Hat that can be worn at once\n    /// @param eligibility The address that can report on the Hat wearer's status\n    /// @param toggle The address that can deactivate the Hat\n    /// @param mutable_ Whether the hat's properties are changeable after creation\n    /// @param imageURI The image uri for this hat and the fallback for its\n    event HatCreated(\n        uint256 id,\n        string details,\n        uint32 maxSupply,\n        address eligibility,\n        address toggle,\n        bool mutable_,\n        string imageURI\n    );\n\n    /// @notice Emitted when a hat wearer's standing is updated\n    /// @dev Eligibility is excluded since the source of truth for eligibility is the eligibility module and may change without a transaction\n    /// @param hatId The id of the wearer's hat\n    /// @param wearer The wearer's address\n    /// @param wearerStanding Whether the wearer is in good standing for the hat\n    event WearerStandingChanged(uint256 hatId, address wearer, bool wearerStanding);\n\n    /// @notice Emitted when a hat's status is updated\n    /// @param hatId The id of the hat\n    /// @param newStatus Whether the hat is active\n    event HatStatusChanged(uint256 hatId, bool newStatus);\n\n    /// @notice Emitted when a hat's details are updated\n    /// @param hatId The id of the hat\n    /// @param newDetails The updated details\n    event HatDetailsChanged(uint256 hatId, string newDetails);\n\n    /// @notice Emitted when a hat's eligibility module is updated\n    /// @param hatId The id of the hat\n    /// @param newEligibility The updated eligibiliy module\n    event HatEligibilityChanged(uint256 hatId, address newEligibility);\n\n    /// @notice Emitted when a hat's toggle module is updated\n    /// @param hatId The id of the hat\n    /// @param newToggle The updated toggle module\n    event HatToggleChanged(uint256 hatId, address newToggle);\n\n    /// @notice Emitted when a hat's mutability is updated\n    /// @param hatId The id of the hat\n    event HatMutabilityChanged(uint256 hatId);\n\n    /// @notice Emitted when a hat's maximum supply is updated\n    /// @param hatId The id of the hat\n    /// @param newMaxSupply The updated max supply\n    event HatMaxSupplyChanged(uint256 hatId, uint32 newMaxSupply);\n\n    /// @notice Emitted when a hat's image URI is updated\n    /// @param hatId The id of the hat\n    /// @param newImageURI The updated image URI\n    event HatImageURIChanged(uint256 hatId, string newImageURI);\n\n    /// @notice Emitted when a tophat linkage is requested by its admin\n    /// @param domain The domain of the tree tophat to link\n    /// @param newAdmin The tophat's would-be admin in the parent tree\n    event TopHatLinkRequested(uint32 domain, uint256 newAdmin);\n\n    /// @notice Emitted when a tophat is linked to a another tree\n    /// @param domain The domain of the newly-linked tophat\n    /// @param newAdmin The tophat's new admin in the parent tree\n    event TopHatLinked(uint32 domain, uint256 newAdmin);\n}\n"
    },
    "contracts/Deps/hats-protocol/Interfaces/IHats.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// Copyright (C) 2023 Haberdasher Labs\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.13;\n\nimport \"./IHatsIdUtilities.sol\";\nimport \"./HatsErrors.sol\";\nimport \"./HatsEvents.sol\";\n\ninterface IHats is IHatsIdUtilities, HatsErrors, HatsEvents {\n    function mintTopHat(address _target, string memory _details, string memory _imageURI)\n        external\n        returns (uint256 topHatId);\n\n    function createHat(\n        uint256 _admin,\n        string calldata _details,\n        uint32 _maxSupply,\n        address _eligibility,\n        address _toggle,\n        bool _mutable,\n        string calldata _imageURI\n    ) external returns (uint256 newHatId);\n\n    function batchCreateHats(\n        uint256[] calldata _admins,\n        string[] calldata _details,\n        uint32[] calldata _maxSupplies,\n        address[] memory _eligibilityModules,\n        address[] memory _toggleModules,\n        bool[] calldata _mutables,\n        string[] calldata _imageURIs\n    ) external returns (bool success);\n\n    function getNextId(uint256 _admin) external view returns (uint256 nextId);\n\n    function mintHat(uint256 _hatId, address _wearer) external returns (bool success);\n\n    function batchMintHats(uint256[] calldata _hatIds, address[] calldata _wearers) external returns (bool success);\n\n    function setHatStatus(uint256 _hatId, bool _newStatus) external returns (bool toggled);\n\n    function checkHatStatus(uint256 _hatId) external returns (bool toggled);\n\n    function setHatWearerStatus(uint256 _hatId, address _wearer, bool _eligible, bool _standing)\n        external\n        returns (bool updated);\n\n    function checkHatWearerStatus(uint256 _hatId, address _wearer) external returns (bool updated);\n\n    function renounceHat(uint256 _hatId) external;\n\n    function transferHat(uint256 _hatId, address _from, address _to) external;\n\n    /*//////////////////////////////////////////////////////////////\n                              HATS ADMIN FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function makeHatImmutable(uint256 _hatId) external;\n\n    function changeHatDetails(uint256 _hatId, string memory _newDetails) external;\n\n    function changeHatEligibility(uint256 _hatId, address _newEligibility) external;\n\n    function changeHatToggle(uint256 _hatId, address _newToggle) external;\n\n    function changeHatImageURI(uint256 _hatId, string memory _newImageURI) external;\n\n    function changeHatMaxSupply(uint256 _hatId, uint32 _newMaxSupply) external;\n\n    function requestLinkTopHatToTree(uint32 _topHatId, uint256 _newAdminHat) external;\n\n    function approveLinkTopHatToTree(\n        uint32 _topHatId,\n        uint256 _newAdminHat,\n        address _eligibility,\n        address _toggle,\n        string calldata _details,\n        string calldata _imageURI\n    ) external;\n\n    function unlinkTopHatFromTree(uint32 _topHatId, address _wearer) external;\n\n    function relinkTopHatWithinTree(\n        uint32 _topHatDomain,\n        uint256 _newAdminHat,\n        address _eligibility,\n        address _toggle,\n        string calldata _details,\n        string calldata _imageURI\n    ) external;\n\n    /*//////////////////////////////////////////////////////////////\n                              VIEW FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function viewHat(uint256 _hatId)\n        external\n        view\n        returns (\n            string memory details,\n            uint32 maxSupply,\n            uint32 supply,\n            address eligibility,\n            address toggle,\n            string memory imageURI,\n            uint16 lastHatId,\n            bool mutable_,\n            bool active\n        );\n\n    function isWearerOfHat(address _user, uint256 _hatId) external view returns (bool isWearer);\n\n    function isAdminOfHat(address _user, uint256 _hatId) external view returns (bool isAdmin);\n\n    function isInGoodStanding(address _wearer, uint256 _hatId) external view returns (bool standing);\n\n    function isEligible(address _wearer, uint256 _hatId) external view returns (bool eligible);\n\n    function getHatEligibilityModule(uint256 _hatId) external view returns (address eligibility);\n\n    function getHatToggleModule(uint256 _hatId) external view returns (address toggle);\n\n    function getHatMaxSupply(uint256 _hatId) external view returns (uint32 maxSupply);\n\n    function hatSupply(uint256 _hatId) external view returns (uint32 supply);\n\n    function getImageURIForHat(uint256 _hatId) external view returns (string memory _uri);\n\n    function balanceOf(address wearer, uint256 hatId) external view returns (uint256 balance);\n\n    function balanceOfBatch(address[] calldata _wearers, uint256[] calldata _hatIds)\n        external\n        view\n        returns (uint256[] memory);\n\n    function uri(uint256 id) external view returns (string memory _uri);\n}\n"
    },
    "contracts/Deps/hats-protocol/Interfaces/IHatsIdUtilities.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// Copyright (C) 2023 Haberdasher Labs\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity >=0.8.13;\n\ninterface IHatsIdUtilities {\n    function buildHatId(uint256 _admin, uint16 _newHat) external pure returns (uint256 id);\n\n    function getHatLevel(uint256 _hatId) external view returns (uint32 level);\n\n    function getLocalHatLevel(uint256 _hatId) external pure returns (uint32 level);\n\n    function isTopHat(uint256 _hatId) external view returns (bool _topHat);\n\n    function isLocalTopHat(uint256 _hatId) external pure returns (bool _localTopHat);\n\n    function isValidHatId(uint256 _hatId) external view returns (bool validHatId);\n\n    function getAdminAtLevel(uint256 _hatId, uint32 _level) external view returns (uint256 admin);\n\n    function getAdminAtLocalLevel(uint256 _hatId, uint32 _level) external pure returns (uint256 admin);\n\n    function getTopHatDomain(uint256 _hatId) external view returns (uint32 domain);\n\n    function getTippyTopHatDomain(uint32 _topHatDomain) external view returns (uint32 domain);\n\n    function noCircularLinkage(uint32 _topHatDomain, uint256 _linkedAdmin) external view returns (bool notCircular);\n\n    function sameTippyTopHatDomain(uint32 _topHatDomain, uint256 _newAdminHat)\n        external\n        view\n        returns (bool sameDomain);\n}\n"
    },
    "contracts/Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Escrow {\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n\r\n    address private owner;\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\r\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\r\n    function __Escrow_init() external payable {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\r\n    /// @param token The ERC20 contract address.\r\n    /// @param to The address to recieve the tokens.\r\n    /// @param amount The amount of ERC20 token to receive.\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of native currency to a given address. Can only be called by the owner.\r\n    /// @param to The address to recieve the currency.\r\n    /// @param amount The amount of native currency to receive.\r\n    function transferNative(address payable to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        to.transfer(amount);\r\n    }\r\n}\r\n"
    },
    "contracts/Tasks/ITasks.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {Escrow} from \"../Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error InvalidTimestamp();\r\n    error InvalidAddress();\r\n    error PointlessOperation();\r\n\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotManager();\r\n    error NotExecutor();\r\n\r\n    error RewardAboveBudget();\r\n    error RewardDoesntEndWithNextToken();\r\n    error IncorrectAmountOfNativeCurrencyAttached();\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n    error JudgementNone();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n    error RequestNotAccepted();\r\n    error RequestAlreadyExecuted();\r\n\r\n    error Overflow();\r\n    error ManualBudgetIncreaseNeeded();\r\n    error PartialRewardAboveFullReward();\r\n    error NativeTransferFailed();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    event TaskCreated(\r\n        uint256 indexed taskId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        ERC20Transfer[] budget,\r\n        uint96 nativeBudget,\r\n        address creator,\r\n        address manager\r\n    );\r\n    event ApplicationCreated(\r\n        uint256 indexed taskId,\r\n        uint16 applicationId,\r\n        string metadata,\r\n        Reward[] reward,\r\n        NativeReward[] nativeReward\r\n    );\r\n    event ApplicationAccepted(uint256 indexed taskId, uint16 applicationId);\r\n    event TaskTaken(uint256 indexed taskId, uint16 applicationId);\r\n    event SubmissionCreated(\r\n        uint256 indexed taskId,\r\n        uint8 submissionId,\r\n        string metadata\r\n    );\r\n    event SubmissionReviewed(\r\n        uint256 indexed taskId,\r\n        uint8 submissionId,\r\n        SubmissionJudgement judgement,\r\n        string feedback\r\n    );\r\n    event TaskCompleted(uint256 indexed taskId, TaskCompletion source);\r\n\r\n    event CancelTaskRequested(\r\n        uint256 indexed taskId,\r\n        uint8 requestId,\r\n        string explanation\r\n    );\r\n    event TaskCancelled(uint256 indexed taskId);\r\n    event RequestAccepted(\r\n        uint256 indexed taskId,\r\n        RequestType requestType,\r\n        uint8 requestId\r\n    );\r\n    event RequestExecuted(\r\n        uint256 indexed taskId,\r\n        RequestType requestType,\r\n        uint8 requestId,\r\n        address by\r\n    );\r\n\r\n    event DeadlineChanged(uint256 indexed taskId, uint64 newDeadline);\r\n    event BudgetChanged(uint256 indexed taskId); // Quite expensive to transfer budget into a datastructure to emit\r\n    event MetadataChanged(uint256 indexed taskId, string newMetadata);\r\n    event PartialPayment(\r\n        uint256 indexed taskId,\r\n        uint88[] partialReward,\r\n        uint96[] partialNativeReward\r\n    );\r\n    event NewManager(uint256 indexed taskId, address manager);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @notice nextToken should always be true for the last entry\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to;\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a native reward payout.\r\n    /// @param to Whom the native reward should be transfered to.\r\n    /// @param amount How much native reward should be transfered.\r\n    struct NativeReward {\r\n        address to;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the manager.\r\n    /// @param reward How much rewards the applicant wants for completion.\r\n    /// @param nativeReward How much native currency the applicant wants for completion.\r\n    struct Application {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 rewardCount;\r\n        uint8 nativeRewardCount;\r\n        mapping(uint8 => Reward) reward;\r\n        mapping(uint8 => NativeReward) nativeReward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        Reward[] reward;\r\n        NativeReward[] nativeReward;\r\n    }\r\n\r\n    /// @notice For approving people on task creation (they are not required to make an application)\r\n    struct PreapprovedApplication {\r\n        address applicant;\r\n        Reward[] reward;\r\n        NativeReward[] nativeReward;\r\n    }\r\n\r\n    enum SubmissionJudgement {\r\n        None,\r\n        Accepted,\r\n        Rejected\r\n    }\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param feedback A response from the manager. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        string feedback;\r\n        SubmissionJudgement judgement;\r\n    }\r\n\r\n    enum RequestType {\r\n        CancelTask\r\n    }\r\n\r\n    /// @notice A container for shared request information.\r\n    /// @param accepted If the request was accepted.\r\n    /// @param executed If the request was executed.\r\n    struct Request {\r\n        bool accepted;\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param request Request information.\r\n    /// @param explanation Why the task should be cancelled.\r\n    struct CancelTaskRequest {\r\n        Request request;\r\n        string explanation;\r\n    }\r\n\r\n    enum TaskState {\r\n        Open,\r\n        Taken,\r\n        Closed\r\n    }\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param nativeBudget Maximum native currency reward that can be earned by completing the task.\r\n    /// @param creator Who has created the task.\r\n    /// @param manager Who has the permission to manage the task.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        Escrow escrow;\r\n        // Storage block seperator\r\n        uint96 nativeBudget;\r\n        address creator;\r\n        // Storage block seperator\r\n        address manager;\r\n        TaskState state;\r\n        uint16 executorApplication;\r\n        uint8 budgetCount;\r\n        uint16 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 cancelTaskRequestCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint16 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint16 executorApplication;\r\n        address creator;\r\n        address manager;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        uint96 nativeBudget;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    enum TaskCompletion {\r\n        SubmissionAccepted,\r\n        Dispute\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) external view returns (OffChainTask memory);\r\n\r\n    /// @notice Retrieves multiple tasks.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(\r\n        uint256[] calldata _taskIds\r\n    ) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param _manager Who will manage the task (become the manager).\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget,\r\n        address _manager,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external payable returns (uint256 taskId);\r\n\r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    /// @param _nativeReward Wanted native currency for completing the task.\r\n    /// @return applicationId Id of the newly created application.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        Reward[] calldata _reward,\r\n        NativeReward[] calldata _nativeReward\r\n    ) external returns (uint16 applicationId);\r\n\r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationIds Indexes of the applications to accept.\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applicationIds\r\n    ) external payable;\r\n\r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Index of application you made that has been accepted.\r\n    function takeTask(uint256 _taskId, uint16 _applicationId) external;\r\n\r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    /// @return submissionId Id of the newly created submission.\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        string calldata _metadata\r\n    ) external returns (uint8 submissionId);\r\n\r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submissionId Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _explanation Why the task was cancelled. (IPFS hash)\r\n    /// @return cancelTaskRequestId Id of the newly created request for task cancellation.\r\n    function cancelTask(\r\n        uint256 _taskId,\r\n        string calldata _explanation\r\n    ) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    /// @param _execute If the request should also be executed in this transaction.\r\n    function acceptRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId,\r\n        bool _execute\r\n    ) external;\r\n\r\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function executeRequest(\r\n        uint256 _taskId,\r\n        RequestType _requestType,\r\n        uint8 _requestId\r\n    ) external;\r\n\r\n    /// @notice Extend the deadline of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _extension How much to extend the deadline by.\r\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\r\n\r\n    /// @notice Increase the budget of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    /// @dev Any attached native reward will also be used to increase the budget.\r\n    function increaseBudget(\r\n        uint256 _taskId,\r\n        uint96[] calldata _increase\r\n    ) external payable;\r\n\r\n    /// @notice Edit the metadata of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New metadata of the task.\r\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\r\n    function editMetadata(\r\n        uint256 _taskId,\r\n        string calldata _newMetadata\r\n    ) external;\r\n\r\n    /// @notice Completes the task through dispute resolution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    function completeByDispute(\r\n        uint256 _taskId,\r\n        uint88[] calldata _partialReward,\r\n        uint96[] calldata _partialNativeReward\r\n    ) external;\r\n\r\n    /// @notice Allows the dispute manager to appoint a new dispute manager.\r\n    /// @param _newManager The new dispute manager.\r\n    function transferDisputeManagement(address _newManager) external;\r\n\r\n    /// @notice Releases a part of the reward to the executor without marking the task as complete.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @dev Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to increase the budget.\r\n    function partialPayment(\r\n        uint256 _taskId,\r\n        uint88[] calldata _partialReward,\r\n        uint96[] calldata _partialNativeReward\r\n    ) external;\r\n\r\n    /// @notice Transfers the manager role to a different address.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newManager What address should become the manager.\r\n    function transferManagement(uint256 _taskId, address _newManager) external;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}