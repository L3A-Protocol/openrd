{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockERC20 is ERC20 {\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\r\n\r\n    }\r\n\r\n    function increaseBalance(address account, uint256 amount) public {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function decreaseBalance(address account, uint256 amount) public {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function setBalance(address account, uint256 amount) external {\r\n        uint256 currentBalance = balanceOf(account);\r\n        if (amount > currentBalance) {\r\n            increaseBalance(account, amount - currentBalance);\r\n        }\r\n        else if (amount < currentBalance) {\r\n            decreaseBalance(account, currentBalance - amount);\r\n        }\r\n    }\r\n}"
    },
    "contracts/Tasks/Escrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Escrow {\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n\r\n    address private owner;\r\n\r\n    function __Escrow_init() external {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n        \r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n}"
    },
    "contracts/Tasks/ITasks.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { Escrow } from \"./Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n\r\n    error NotProposer();\r\n    error NotExecutor();\r\n\r\n    error RewardAboveBudget();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionAlreadyJudged();\r\n    error DeadlineDidNotPass();\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param timestamp When the application has been made.\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the proposer.\r\n    /// @param reward How much rewards the applicant want for completion. (just the amount, in the same order as budget)\r\n    struct Application {\r\n        bytes32 metadata;\r\n        uint64 timestamp;\r\n        address applicant;\r\n        bool accepted;\r\n        mapping(uint8 => uint96) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        bytes32 metadata;\r\n        uint64 timestamp;\r\n        address applicant;\r\n        bool accepted;\r\n        uint96[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement { None, Accepted, Rejected }\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param timestamp When the submission has been made.\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param judgementTimestamp When the judgement has been made.\r\n    /// @param feedback A response from the proposer. (IPFS hash)\r\n    struct Submission {\r\n        bytes32 metadata;\r\n        uint64 timestamp;\r\n        SubmissionJudgement judgement;\r\n        uint64 judgementTimestamp;\r\n        bytes32 feedback;\r\n    }\r\n\r\n    enum TaskState { Open, Taken, Closed }\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param proposer Who has created the task.\r\n    /// @param creationTimestamp When the task has been created.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param executorConfirmationTimestamp When the executor has confirmed to take the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        bytes32 metadata;\r\n\r\n        uint64 creationTimestamp;\r\n        uint64 executorConfirmationTimestamp;\r\n        uint64 deadline;\r\n\r\n        Escrow escrow;\r\n\r\n        address proposer;\r\n        TaskState state;\r\n        uint16 executorApplication;\r\n        uint8 budgetCount;\r\n        uint16 applicationCount;\r\n        uint8 submissionCount;\r\n\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint16 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        bytes32 metadata;\r\n        uint64 deadline;\r\n        uint64 creationTimestamp;\r\n        uint64 executorConfirmationTimestamp;\r\n        uint16 executorApplication;\r\n        address proposer;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) external view returns (OffChainTask memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        bytes32 _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget\r\n    ) external returns (uint256 taskId);\r\n    \r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        bytes32 _metadata,\r\n        uint96[] calldata _reward\r\n    ) external;\r\n    \r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applications Indexes of the applications to accept.\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applications\r\n    ) external;\r\n    \r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _application Index of application you made that has been accepted.\r\n    function takeTask(\r\n        uint256 _taskId,\r\n        uint16 _application\r\n    ) external;\r\n    \r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        bytes32 _metadata\r\n    ) external;\r\n    \r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submission Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submission,\r\n        SubmissionJudgement _judgement,\r\n        bytes32 _feedback\r\n    ) external;\r\n\r\n    /// @notice Refund a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    function refundTask(\r\n        uint256 _taskId\r\n    ) external;\r\n}"
    },
    "contracts/Tasks/Tasks.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport { ITasks, IERC20, Escrow } from \"./ITasks.sol\";\r\nimport { Clones } from \"@openzeppelin/contracts/proxy/Clones.sol\";\r\n\r\ncontract Tasks is ITasks {\r\n    /// @notice The incremental ID for tasks.\r\n    uint256 private taskCounter;\r\n\r\n    /// @notice A mapping between task IDs and task information.\r\n    mapping(uint256 => Task) internal tasks;\r\n\r\n    address private escrowImplementation;\r\n\r\n    constructor() {\r\n        escrowImplementation = address(new Escrow());\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function taskCount() external view returns (uint256) {\r\n        return taskCounter;\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function getTask(\r\n        uint256 _taskId\r\n    ) external view returns (OffChainTask memory task) {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task_ = tasks[_taskId];\r\n        task.metadata = task_.metadata;\r\n        task.deadline = task_.deadline;\r\n        task.creationTimestamp = task_.creationTimestamp;\r\n        task.executorConfirmationTimestamp = task_.executorConfirmationTimestamp;\r\n        task.executorApplication = task_.executorApplication;\r\n        task.proposer = task_.proposer;\r\n        task.state = task_.state;\r\n        task.escrow = task_.escrow;\r\n\r\n        task.budget = new ERC20Transfer[](task_.budgetCount);\r\n        for (uint8 i; i < task.budget.length; ) {\r\n            task.budget[i] = task_.budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        task.applications = new OffChainApplication[](task_.applicationCount);\r\n        for (uint8 i; i < task.applications.length; ) {\r\n            Application storage application = task_.applications[i];\r\n            task.applications[i].metadata = application.metadata;\r\n            task.applications[i].timestamp = application.timestamp;\r\n            task.applications[i].applicant = application.applicant;\r\n            task.applications[i].accepted = application.accepted;\r\n            task.applications[i].reward = new uint96[](task_.budgetCount);\r\n            for (uint8 j; j < task.applications[i].reward.length; ) {\r\n                task.applications[i].reward[j] = application.reward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        task.submissions = new Submission[](task_.submissionCount);\r\n        for (uint8 i; i < task.submissions.length; ) {\r\n            task.submissions[i] = task_.submissions[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        return task;\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function createTask(\r\n        bytes32 _metadata,\r\n        uint64 _deadline,\r\n        ERC20Transfer[] calldata _budget\r\n    ) external returns (uint256 taskId) {\r\n        unchecked {\r\n            taskId = taskCounter++;\r\n        }\r\n\r\n        Task storage task_ = tasks[taskId];\r\n        task_.metadata = _metadata;\r\n        task_.deadline = _deadline;\r\n        task_.budgetCount = uint8(_budget.length);\r\n        Escrow escrow = Escrow(Clones.clone(escrowImplementation));\r\n        escrow.__Escrow_init();\r\n        task_.escrow = escrow;\r\n        for (uint8 i; i < _budget.length; ) {\r\n            _budget[i].tokenContract.transferFrom(msg.sender, address(escrow), _budget[i].amount);\r\n            task_.budget[i] = _budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        \r\n        task_.creationTimestamp = uint64(block.timestamp);\r\n        task_.proposer = msg.sender;\r\n\r\n        // Default values are already correct (save gas)\r\n        // task_.state = TaskState.Open;\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        bytes32 _metadata,\r\n        uint96[] calldata _reward\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task_ = tasks[_taskId];\r\n        if (task_.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n\r\n        Application storage application = task_.applications[task_.applicationCount];\r\n        unchecked {\r\n            ++task_.applicationCount;\r\n        }\r\n        application.metadata = _metadata;\r\n        application.timestamp = uint64(block.timestamp);\r\n        application.applicant = msg.sender;\r\n\r\n        uint8 budgetCount = task_.budgetCount;\r\n        for (uint8 i; i < budgetCount; ) {\r\n            if (_reward[i] > task_.budget[i].amount) {\r\n                revert RewardAboveBudget();\r\n            }\r\n            application.reward[i] = _reward[i];\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function acceptApplications(\r\n        uint256 _taskId,\r\n        uint16[] calldata _applications\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task_ = tasks[_taskId];\r\n        if (task_.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n        if (task_.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n\r\n        for (uint i; i < _applications.length; ) {\r\n            task_.applications[_applications[i]].accepted = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function takeTask(\r\n        uint256 _taskId,\r\n        uint16 _application\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task_ = tasks[_taskId];\r\n        if (task_.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n        Application storage application_ = task_.applications[_application];\r\n        if (application_.applicant != msg.sender) {\r\n            revert NotYourApplication();\r\n        }\r\n        if (!application_.accepted) {\r\n            revert ApplicationNotAccepted();\r\n        }\r\n\r\n        task_.state = TaskState.Taken;\r\n        task_.executorApplication = _application;\r\n        task_.executorConfirmationTimestamp = uint64(block.timestamp);\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function createSubmission(\r\n        uint256 _taskId,\r\n        bytes32 _metadata\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task_ = tasks[_taskId];\r\n        if (task_.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task_.applications[task_.executorApplication].applicant != msg.sender) {\r\n            revert NotExecutor();\r\n        }\r\n\r\n        unchecked { \r\n            Submission storage submission = task_.submissions[task_.submissionCount++];\r\n            submission.metadata = _metadata;\r\n            submission.timestamp = uint64(block.timestamp);\r\n        }\r\n    }\r\n    \r\n    /// @inheritdoc ITasks\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submission,\r\n        SubmissionJudgement _judgement,\r\n        bytes32 _feedback\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n        \r\n        Task storage task_ = tasks[_taskId];\r\n        if (task_.state != TaskState.Taken) {\r\n            revert TaskNotTaken();\r\n        }\r\n        if (task_.proposer != msg.sender) {\r\n            revert NotProposer();\r\n        }\r\n\r\n        Submission storage submission_ = task_.submissions[_submission];\r\n        if (submission_.judgement != SubmissionJudgement.None) {\r\n            revert SubmissionAlreadyJudged();\r\n        }\r\n        // You can judge with judgement None, to give feedback without any judgement yet\r\n        // You can then call this function again to overwrite the feedback (kinda like a draft)\r\n        submission_.judgement = _judgement;\r\n        submission_.judgementTimestamp = uint64(block.timestamp);\r\n        submission_.feedback = _feedback;\r\n\r\n        if (_judgement == SubmissionJudgement.Accepted) {\r\n            uint8 budgetCount = task_.budgetCount;\r\n            Application storage executor = task_.applications[task_.executorApplication];\r\n            address proposer = task_.proposer;\r\n            Escrow escrow = task_.escrow;\r\n            for (uint8 i; i < budgetCount; ) {\r\n                ERC20Transfer memory erc20Transfer = task_.budget[i];\r\n                uint256 reward = executor.reward[i];\r\n                escrow.transfer(erc20Transfer.tokenContract, executor.applicant, reward);\r\n                uint256 refund = erc20Transfer.amount - reward;\r\n                if (refund != 0) {\r\n                    escrow.transfer(erc20Transfer.tokenContract, proposer, refund);\r\n                }\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n            task_.state = TaskState.Closed;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ITasks\r\n    function refundTask(\r\n        uint256 _taskId\r\n    ) external {\r\n        if (_taskId >= taskCounter) {\r\n            revert TaskDoesNotExist();\r\n        }\r\n\r\n        Task storage task_ = tasks[_taskId];\r\n        if (task_.state == TaskState.Taken) {\r\n            if (task_.deadline < uint64(block.timestamp)) {\r\n                revert DeadlineDidNotPass();\r\n            }\r\n        }\r\n        else if (task_.state != TaskState.Open) {\r\n            revert TaskNotOpen();\r\n        }\r\n\r\n        uint8 budgetCount = task_.budgetCount;\r\n        address proposer = task_.proposer;\r\n        Escrow escrow = task_.escrow;\r\n        for (uint8 i; i < budgetCount; ) {\r\n            ERC20Transfer memory erc20Transfer = task_.budget[i];\r\n            escrow.transfer(erc20Transfer.tokenContract, proposer, erc20Transfer.amount);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        task_.state = TaskState.Closed;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}